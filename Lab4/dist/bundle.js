/*! For license information please see bundle.js.LICENSE.txt */
(()=>{"use strict";var t,e,n={258:(t,e,n)=>{n.d(e,{ZR:()=>i.ZR,Jn:()=>I,l4:()=>u,H9:()=>f,Vr:()=>p,Af:()=>l,Z8:()=>v,lz:()=>d,qX:()=>g,Xd:()=>m,wN:()=>y,P2:()=>_,Mq:()=>T,C6:()=>S,ZF:()=>E,TP:()=>A,KN:()=>N,Ub:()=>D});var r=n(909),s=n(594),i=n(589);class o{constructor(t){this.container=t}getPlatformInfoString(){return this.container.getProviders().map((t=>{if(function(t){const e=t.getComponent();return"VERSION"===(null==e?void 0:e.type)}(t)){const e=t.getImmediate();return`${e.library}/${e.version}`}return null})).filter((t=>t)).join(" ")}}const a="@firebase/app",c=new s.Yd("@firebase/app"),u="[DEFAULT]",h={[a]:"fire-core","@firebase/app-compat":"fire-core-compat","@firebase/analytics":"fire-analytics","@firebase/analytics-compat":"fire-analytics-compat","@firebase/app-check":"fire-app-check","@firebase/app-check-compat":"fire-app-check-compat","@firebase/auth":"fire-auth","@firebase/auth-compat":"fire-auth-compat","@firebase/database":"fire-rtdb","@firebase/database-compat":"fire-rtdb-compat","@firebase/functions":"fire-fn","@firebase/functions-compat":"fire-fn-compat","@firebase/installations":"fire-iid","@firebase/installations-compat":"fire-iid-compat","@firebase/messaging":"fire-fcm","@firebase/messaging-compat":"fire-fcm-compat","@firebase/performance":"fire-perf","@firebase/performance-compat":"fire-perf-compat","@firebase/remote-config":"fire-rc","@firebase/remote-config-compat":"fire-rc-compat","@firebase/storage":"fire-gcs","@firebase/storage-compat":"fire-gcs-compat","@firebase/firestore":"fire-fst","@firebase/firestore-compat":"fire-fst-compat","fire-js":"fire-js",firebase:"fire-js-all"},l=new Map,d=new Map;function f(t,e){try{t.container.addComponent(e)}catch(n){c.debug(`Component ${e.name} failed to register with FirebaseApp ${t.name}`,n)}}function p(t,e){t.container.addOrOverwriteComponent(e)}function m(t){const e=t.name;if(d.has(e))return c.debug(`There were multiple attempts to register component ${e}.`),!1;d.set(e,t);for(const e of l.values())f(e,t);return!0}function g(t,e){return t.container.getProvider(e)}function y(t,e,n=u){g(t,e).clearInstance(n)}function v(){d.clear()}const w=new i.LL("app","Firebase",{"no-app":"No Firebase App '{$appName}' has been created - call Firebase App.initializeApp()","bad-app-name":"Illegal App name: '{$appName}","duplicate-app":"Firebase App named '{$appName}' already exists with different options or config","app-deleted":"Firebase App named '{$appName}' already deleted","invalid-app-argument":"firebase.{$appName}() takes either no argument or a Firebase App instance.","invalid-log-argument":"First argument to `onLog` must be null or a function."});class b{constructor(t,e,n){this._isDeleted=!1,this._options=Object.assign({},t),this._config=Object.assign({},e),this._name=e.name,this._automaticDataCollectionEnabled=e.automaticDataCollectionEnabled,this._container=n,this.container.addComponent(new r.wA("app",(()=>this),"PUBLIC"))}get automaticDataCollectionEnabled(){return this.checkDestroyed(),this._automaticDataCollectionEnabled}set automaticDataCollectionEnabled(t){this.checkDestroyed(),this._automaticDataCollectionEnabled=t}get name(){return this.checkDestroyed(),this._name}get options(){return this.checkDestroyed(),this._options}get config(){return this.checkDestroyed(),this._config}get container(){return this._container}get isDeleted(){return this._isDeleted}set isDeleted(t){this._isDeleted=t}checkDestroyed(){if(this.isDeleted)throw w.create("app-deleted",{appName:this._name})}}const I="9.0.0";function E(t,e={}){"object"!=typeof e&&(e={name:e});const n=Object.assign({name:u,automaticDataCollectionEnabled:!1},e),s=n.name;if("string"!=typeof s||!s)throw w.create("bad-app-name",{appName:String(s)});const o=l.get(s);if(o){if((0,i.vZ)(t,o.options)&&(0,i.vZ)(n,o.config))return o;throw w.create("duplicate-app",{appName:s})}const a=new r.H0(s);for(const t of d.values())a.addComponent(t);const c=new b(t,n,a);return l.set(s,c),c}function T(t=u){const e=l.get(t);if(!e)throw w.create("no-app",{appName:t});return e}function S(){return Array.from(l.values())}async function _(t){const e=t.name;l.has(e)&&(l.delete(e),await Promise.all(t.container.getProviders().map((t=>t.delete()))),t.isDeleted=!0)}function N(t,e,n){var s;let i=null!==(s=h[t])&&void 0!==s?s:t;n&&(i+=`-${n}`);const o=i.match(/\s|\//),a=e.match(/\s|\//);if(o||a){const t=[`Unable to register library "${i}" with version "${e}":`];return o&&t.push(`library name "${i}" contains illegal characters (whitespace or "/")`),o&&a&&t.push("and"),a&&t.push(`version name "${e}" contains illegal characters (whitespace or "/")`),void c.warn(t.join(" "))}m(new r.wA(`${i}-version`,(()=>({library:i,version:e})),"VERSION"))}function A(t,e){if(null!==t&&"function"!=typeof t)throw w.create("invalid-log-argument");(0,s.Am)(t,e)}function D(t){(0,s.Ub)(t)}m(new r.wA("platform-logger",(t=>new o(t)),"PRIVATE")),N(a,"0.7.0",undefined),N("fire-js","")},909:(t,e,n)=>{n.d(e,{wA:()=>i,H0:()=>c});var r=n(655),s=n(589),i=function(){function t(t,e,n){this.name=t,this.instanceFactory=e,this.type=n,this.multipleInstances=!1,this.serviceProps={},this.instantiationMode="LAZY",this.onInstanceCreated=null}return t.prototype.setInstantiationMode=function(t){return this.instantiationMode=t,this},t.prototype.setMultipleInstances=function(t){return this.multipleInstances=t,this},t.prototype.setServiceProps=function(t){return this.serviceProps=t,this},t.prototype.setInstanceCreatedCallback=function(t){return this.onInstanceCreated=t,this},t}(),o="[DEFAULT]",a=function(){function t(t,e){this.name=t,this.container=e,this.component=null,this.instances=new Map,this.instancesDeferred=new Map,this.instancesOptions=new Map,this.onInitCallbacks=new Map}return t.prototype.get=function(t){var e=this.normalizeInstanceIdentifier(t);if(!this.instancesDeferred.has(e)){var n=new s.BH;if(this.instancesDeferred.set(e,n),this.isInitialized(e)||this.shouldAutoInitialize())try{var r=this.getOrInitializeService({instanceIdentifier:e});r&&n.resolve(r)}catch(t){}}return this.instancesDeferred.get(e).promise},t.prototype.getImmediate=function(t){var e,n=this.normalizeInstanceIdentifier(null==t?void 0:t.identifier),r=null!==(e=null==t?void 0:t.optional)&&void 0!==e&&e;if(!this.isInitialized(n)&&!this.shouldAutoInitialize()){if(r)return null;throw Error("Service "+this.name+" is not available")}try{return this.getOrInitializeService({instanceIdentifier:n})}catch(t){if(r)return null;throw t}},t.prototype.getComponent=function(){return this.component},t.prototype.setComponent=function(t){var e,n;if(t.name!==this.name)throw Error("Mismatching Component "+t.name+" for Provider "+this.name+".");if(this.component)throw Error("Component for "+this.name+" has already been provided");if(this.component=t,this.shouldAutoInitialize()){if(function(t){return"EAGER"===t.instantiationMode}(t))try{this.getOrInitializeService({instanceIdentifier:o})}catch(t){}try{for(var s=(0,r.XA)(this.instancesDeferred.entries()),i=s.next();!i.done;i=s.next()){var a=(0,r.CR)(i.value,2),c=a[0],u=a[1],h=this.normalizeInstanceIdentifier(c);try{var l=this.getOrInitializeService({instanceIdentifier:h});u.resolve(l)}catch(t){}}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}}},t.prototype.clearInstance=function(t){void 0===t&&(t=o),this.instancesDeferred.delete(t),this.instancesOptions.delete(t),this.instances.delete(t)},t.prototype.delete=function(){return(0,r.mG)(this,void 0,void 0,(function(){var t;return(0,r.Jh)(this,(function(e){switch(e.label){case 0:return t=Array.from(this.instances.values()),[4,Promise.all((0,r.ev)((0,r.ev)([],(0,r.CR)(t.filter((function(t){return"INTERNAL"in t})).map((function(t){return t.INTERNAL.delete()})))),(0,r.CR)(t.filter((function(t){return"_delete"in t})).map((function(t){return t._delete()})))))];case 1:return e.sent(),[2]}}))}))},t.prototype.isComponentSet=function(){return null!=this.component},t.prototype.isInitialized=function(t){return void 0===t&&(t=o),this.instances.has(t)},t.prototype.getOptions=function(t){return void 0===t&&(t=o),this.instancesOptions.get(t)||{}},t.prototype.initialize=function(t){var e,n;void 0===t&&(t={});var s=t.options,i=void 0===s?{}:s,o=this.normalizeInstanceIdentifier(t.instanceIdentifier);if(this.isInitialized(o))throw Error(this.name+"("+o+") has already been initialized");if(!this.isComponentSet())throw Error("Component "+this.name+" has not been registered yet");var a=this.getOrInitializeService({instanceIdentifier:o,options:i});try{for(var c=(0,r.XA)(this.instancesDeferred.entries()),u=c.next();!u.done;u=c.next()){var h=(0,r.CR)(u.value,2),l=h[0],d=h[1];o===this.normalizeInstanceIdentifier(l)&&d.resolve(a)}}catch(t){e={error:t}}finally{try{u&&!u.done&&(n=c.return)&&n.call(c)}finally{if(e)throw e.error}}return a},t.prototype.onInit=function(t,e){var n,r=this.normalizeInstanceIdentifier(e),s=null!==(n=this.onInitCallbacks.get(r))&&void 0!==n?n:new Set;s.add(t),this.onInitCallbacks.set(r,s);var i=this.instances.get(r);return i&&t(i,r),function(){s.delete(t)}},t.prototype.invokeOnInitCallbacks=function(t,e){var n,s,i=this.onInitCallbacks.get(e);if(i)try{for(var o=(0,r.XA)(i),a=o.next();!a.done;a=o.next()){var c=a.value;try{c(t,e)}catch(t){}}}catch(t){n={error:t}}finally{try{a&&!a.done&&(s=o.return)&&s.call(o)}finally{if(n)throw n.error}}},t.prototype.getOrInitializeService=function(t){var e,n=t.instanceIdentifier,r=t.options,s=void 0===r?{}:r,i=this.instances.get(n);if(!i&&this.component&&(i=this.component.instanceFactory(this.container,{instanceIdentifier:(e=n,e===o?void 0:e),options:s}),this.instances.set(n,i),this.instancesOptions.set(n,s),this.invokeOnInitCallbacks(i,n),this.component.onInstanceCreated))try{this.component.onInstanceCreated(this.container,n,i)}catch(t){}return i||null},t.prototype.normalizeInstanceIdentifier=function(t){return void 0===t&&(t=o),this.component?this.component.multipleInstances?t:o:t},t.prototype.shouldAutoInitialize=function(){return!!this.component&&"EXPLICIT"!==this.component.instantiationMode},t}(),c=function(){function t(t){this.name=t,this.providers=new Map}return t.prototype.addComponent=function(t){var e=this.getProvider(t.name);if(e.isComponentSet())throw new Error("Component "+t.name+" has already been registered with "+this.name);e.setComponent(t)},t.prototype.addOrOverwriteComponent=function(t){this.getProvider(t.name).isComponentSet()&&this.providers.delete(t.name),this.addComponent(t)},t.prototype.getProvider=function(t){if(this.providers.has(t))return this.providers.get(t);var e=new a(t,this);return this.providers.set(t,e),e},t.prototype.getProviders=function(){return Array.from(this.providers.values())},t}()},594:(t,e,n)=>{function r(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var r=Array(t),s=0;for(e=0;e<n;e++)for(var i=arguments[e],o=0,a=i.length;o<a;o++,s++)r[s]=i[o];return r}var s;n.d(e,{in:()=>i,Yd:()=>l,Ub:()=>d,Am:()=>f});var i,o=[];!function(t){t[t.DEBUG=0]="DEBUG",t[t.VERBOSE=1]="VERBOSE",t[t.INFO=2]="INFO",t[t.WARN=3]="WARN",t[t.ERROR=4]="ERROR",t[t.SILENT=5]="SILENT"}(i||(i={}));var a={debug:i.DEBUG,verbose:i.VERBOSE,info:i.INFO,warn:i.WARN,error:i.ERROR,silent:i.SILENT},c=i.INFO,u=((s={})[i.DEBUG]="log",s[i.VERBOSE]="log",s[i.INFO]="info",s[i.WARN]="warn",s[i.ERROR]="error",s),h=function(t,e){for(var n=[],s=2;s<arguments.length;s++)n[s-2]=arguments[s];if(!(e<t.logLevel)){var i=(new Date).toISOString(),o=u[e];if(!o)throw new Error("Attempted to log a message with an invalid logType (value: "+e+")");console[o].apply(console,r(["["+i+"]  "+t.name+":"],n))}},l=function(){function t(t){this.name=t,this._logLevel=c,this._logHandler=h,this._userLogHandler=null,o.push(this)}return Object.defineProperty(t.prototype,"logLevel",{get:function(){return this._logLevel},set:function(t){if(!(t in i))throw new TypeError('Invalid value "'+t+'" assigned to `logLevel`');this._logLevel=t},enumerable:!1,configurable:!0}),t.prototype.setLogLevel=function(t){this._logLevel="string"==typeof t?a[t]:t},Object.defineProperty(t.prototype,"logHandler",{get:function(){return this._logHandler},set:function(t){if("function"!=typeof t)throw new TypeError("Value assigned to `logHandler` must be a function");this._logHandler=t},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"userLogHandler",{get:function(){return this._userLogHandler},set:function(t){this._userLogHandler=t},enumerable:!1,configurable:!0}),t.prototype.debug=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,i.DEBUG],t)),this._logHandler.apply(this,r([this,i.DEBUG],t))},t.prototype.log=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,i.VERBOSE],t)),this._logHandler.apply(this,r([this,i.VERBOSE],t))},t.prototype.info=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,i.INFO],t)),this._logHandler.apply(this,r([this,i.INFO],t))},t.prototype.warn=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,i.WARN],t)),this._logHandler.apply(this,r([this,i.WARN],t))},t.prototype.error=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this._userLogHandler&&this._userLogHandler.apply(this,r([this,i.ERROR],t)),this._logHandler.apply(this,r([this,i.ERROR],t))},t}();function d(t){o.forEach((function(e){e.setLogLevel(t)}))}function f(t,e){for(var n=function(n){var r=null;e&&e.level&&(r=a[e.level]),n.userLogHandler=null===t?null:function(e,n){for(var s=[],o=2;o<arguments.length;o++)s[o-2]=arguments[o];var a=s.map((function(t){if(null==t)return null;if("string"==typeof t)return t;if("number"==typeof t||"boolean"==typeof t)return t.toString();if(t instanceof Error)return t.message;try{return JSON.stringify(t)}catch(t){return null}})).filter((function(t){return t})).join(" ");n>=(null!=r?r:e.logLevel)&&t({level:i[n].toLowerCase(),message:a,args:s,type:e.name})}},r=0,s=o;r<s.length;r++)n(s[r])}},589:(t,e,n)=>{n.d(e,{BH:()=>a,LL:()=>v,ZR:()=>y,Sg:()=>c,vZ:()=>I,m9:()=>S,z$:()=>u,ru:()=>l,d:()=>f,w1:()=>p,uI:()=>h,b$:()=>d,G6:()=>g,Mn:()=>m});var r=n(655),s=function(t){for(var e=[],n=0,r=0;r<t.length;r++){var s=t.charCodeAt(r);s<128?e[n++]=s:s<2048?(e[n++]=s>>6|192,e[n++]=63&s|128):55296==(64512&s)&&r+1<t.length&&56320==(64512&t.charCodeAt(r+1))?(s=65536+((1023&s)<<10)+(1023&t.charCodeAt(++r)),e[n++]=s>>18|240,e[n++]=s>>12&63|128,e[n++]=s>>6&63|128,e[n++]=63&s|128):(e[n++]=s>>12|224,e[n++]=s>>6&63|128,e[n++]=63&s|128)}return e},i={byteToCharMap_:null,charToByteMap_:null,byteToCharMapWebSafe_:null,charToByteMapWebSafe_:null,ENCODED_VALS_BASE:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",get ENCODED_VALS(){return this.ENCODED_VALS_BASE+"+/="},get ENCODED_VALS_WEBSAFE(){return this.ENCODED_VALS_BASE+"-_."},HAS_NATIVE_SUPPORT:"function"==typeof atob,encodeByteArray:function(t,e){if(!Array.isArray(t))throw Error("encodeByteArray takes an array as a parameter");this.init_();for(var n=e?this.byteToCharMapWebSafe_:this.byteToCharMap_,r=[],s=0;s<t.length;s+=3){var i=t[s],o=s+1<t.length,a=o?t[s+1]:0,c=s+2<t.length,u=c?t[s+2]:0,h=i>>2,l=(3&i)<<4|a>>4,d=(15&a)<<2|u>>6,f=63&u;c||(f=64,o||(d=64)),r.push(n[h],n[l],n[d],n[f])}return r.join("")},encodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?btoa(t):this.encodeByteArray(s(t),e)},decodeString:function(t,e){return this.HAS_NATIVE_SUPPORT&&!e?atob(t):function(t){for(var e=[],n=0,r=0;n<t.length;){var s=t[n++];if(s<128)e[r++]=String.fromCharCode(s);else if(s>191&&s<224){var i=t[n++];e[r++]=String.fromCharCode((31&s)<<6|63&i)}else if(s>239&&s<365){var o=((7&s)<<18|(63&(i=t[n++]))<<12|(63&(a=t[n++]))<<6|63&t[n++])-65536;e[r++]=String.fromCharCode(55296+(o>>10)),e[r++]=String.fromCharCode(56320+(1023&o))}else{i=t[n++];var a=t[n++];e[r++]=String.fromCharCode((15&s)<<12|(63&i)<<6|63&a)}}return e.join("")}(this.decodeStringToByteArray(t,e))},decodeStringToByteArray:function(t,e){this.init_();for(var n=e?this.charToByteMapWebSafe_:this.charToByteMap_,r=[],s=0;s<t.length;){var i=n[t.charAt(s++)],o=s<t.length?n[t.charAt(s)]:0,a=++s<t.length?n[t.charAt(s)]:64,c=++s<t.length?n[t.charAt(s)]:64;if(++s,null==i||null==o||null==a||null==c)throw Error();var u=i<<2|o>>4;if(r.push(u),64!==a){var h=o<<4&240|a>>2;if(r.push(h),64!==c){var l=a<<6&192|c;r.push(l)}}}return r},init_:function(){if(!this.byteToCharMap_){this.byteToCharMap_={},this.charToByteMap_={},this.byteToCharMapWebSafe_={},this.charToByteMapWebSafe_={};for(var t=0;t<this.ENCODED_VALS.length;t++)this.byteToCharMap_[t]=this.ENCODED_VALS.charAt(t),this.charToByteMap_[this.byteToCharMap_[t]]=t,this.byteToCharMapWebSafe_[t]=this.ENCODED_VALS_WEBSAFE.charAt(t),this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[t]]=t,t>=this.ENCODED_VALS_BASE.length&&(this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(t)]=t,this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(t)]=t)}}},o=function(t){return function(t){var e=s(t);return i.encodeByteArray(e,!0)}(t).replace(/\./g,"")},a=function(){function t(){var t=this;this.reject=function(){},this.resolve=function(){},this.promise=new Promise((function(e,n){t.resolve=e,t.reject=n}))}return t.prototype.wrapCallback=function(t){var e=this;return function(n,r){n?e.reject(n):e.resolve(r),"function"==typeof t&&(e.promise.catch((function(){})),1===t.length?t(n):t(n,r))}},t}();function c(t,e){if(t.uid)throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');var n=e||"demo-project",s=t.iat||0,i=t.sub||t.user_id;if(!i)throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");var a=(0,r.pi)({iss:"https://securetoken.google.com/"+n,aud:n,iat:s,exp:s+3600,auth_time:s,sub:i,user_id:i,firebase:{sign_in_provider:"custom",identities:{}}},t);return[o(JSON.stringify({alg:"none",type:"JWT"})),o(JSON.stringify(a)),""].join(".")}function u(){return"undefined"!=typeof navigator&&"string"==typeof navigator.userAgent?navigator.userAgent:""}function h(){return"undefined"!=typeof window&&!!(window.cordova||window.phonegap||window.PhoneGap)&&/ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(u())}function l(){var t="object"==typeof chrome?chrome.runtime:"object"==typeof browser?browser.runtime:void 0;return"object"==typeof t&&void 0!==t.id}function d(){return"object"==typeof navigator&&"ReactNative"===navigator.product}function f(){return u().indexOf("Electron/")>=0}function p(){var t=u();return t.indexOf("MSIE ")>=0||t.indexOf("Trident/")>=0}function m(){return u().indexOf("MSAppHost/")>=0}function g(){return!function(){try{return"[object process]"===Object.prototype.toString.call(n.g.process)}catch(t){return!1}}()&&navigator.userAgent.includes("Safari")&&!navigator.userAgent.includes("Chrome")}var y=function(t){function e(n,r,s){var i=t.call(this,r)||this;return i.code=n,i.customData=s,i.name="FirebaseError",Object.setPrototypeOf(i,e.prototype),Error.captureStackTrace&&Error.captureStackTrace(i,v.prototype.create),i}return(0,r.ZT)(e,t),e}(Error),v=function(){function t(t,e,n){this.service=t,this.serviceName=e,this.errors=n}return t.prototype.create=function(t){for(var e=[],n=1;n<arguments.length;n++)e[n-1]=arguments[n];var r=e[0]||{},s=this.service+"/"+t,i=this.errors[t],o=i?w(i,r):"Error",a=this.serviceName+": "+o+" ("+s+").",c=new y(s,a,r);return c},t}();function w(t,e){return t.replace(b,(function(t,n){var r=e[n];return null!=r?String(r):"<"+n+"?>"}))}var b=/\{\$([^}]+)}/g;function I(t,e){if(t===e)return!0;for(var n=Object.keys(t),r=Object.keys(e),s=0,i=n;s<i.length;s++){var o=i[s];if(!r.includes(o))return!1;var a=t[o],c=e[o];if(E(a)&&E(c)){if(!I(a,c))return!1}else if(a!==c)return!1}for(var u=0,h=r;u<h.length;u++)if(o=h[u],!n.includes(o))return!1;return!0}function E(t){return null!==t&&"object"==typeof t}function T(){}function S(t){return t&&t._delegate?t._delegate:t}!function(){function t(){this.chain_=[],this.buf_=[],this.W_=[],this.pad_=[],this.inbuf_=0,this.total_=0,this.blockSize=64,this.pad_[0]=128;for(var t=1;t<this.blockSize;++t)this.pad_[t]=0;this.reset()}t.prototype.reset=function(){this.chain_[0]=1732584193,this.chain_[1]=4023233417,this.chain_[2]=2562383102,this.chain_[3]=271733878,this.chain_[4]=3285377520,this.inbuf_=0,this.total_=0},t.prototype.compress_=function(t,e){e||(e=0);var n=this.W_;if("string"==typeof t)for(var r=0;r<16;r++)n[r]=t.charCodeAt(e)<<24|t.charCodeAt(e+1)<<16|t.charCodeAt(e+2)<<8|t.charCodeAt(e+3),e+=4;else for(r=0;r<16;r++)n[r]=t[e]<<24|t[e+1]<<16|t[e+2]<<8|t[e+3],e+=4;for(r=16;r<80;r++){var s=n[r-3]^n[r-8]^n[r-14]^n[r-16];n[r]=4294967295&(s<<1|s>>>31)}var i,o,a=this.chain_[0],c=this.chain_[1],u=this.chain_[2],h=this.chain_[3],l=this.chain_[4];for(r=0;r<80;r++)r<40?r<20?(i=h^c&(u^h),o=1518500249):(i=c^u^h,o=1859775393):r<60?(i=c&u|h&(c|u),o=2400959708):(i=c^u^h,o=3395469782),s=(a<<5|a>>>27)+i+l+o+n[r]&4294967295,l=h,h=u,u=4294967295&(c<<30|c>>>2),c=a,a=s;this.chain_[0]=this.chain_[0]+a&4294967295,this.chain_[1]=this.chain_[1]+c&4294967295,this.chain_[2]=this.chain_[2]+u&4294967295,this.chain_[3]=this.chain_[3]+h&4294967295,this.chain_[4]=this.chain_[4]+l&4294967295},t.prototype.update=function(t,e){if(null!=t){void 0===e&&(e=t.length);for(var n=e-this.blockSize,r=0,s=this.buf_,i=this.inbuf_;r<e;){if(0===i)for(;r<=n;)this.compress_(t,r),r+=this.blockSize;if("string"==typeof t){for(;r<e;)if(s[i]=t.charCodeAt(r),++r,++i===this.blockSize){this.compress_(s),i=0;break}}else for(;r<e;)if(s[i]=t[r],++r,++i===this.blockSize){this.compress_(s),i=0;break}}this.inbuf_=i,this.total_+=e}},t.prototype.digest=function(){var t=[],e=8*this.total_;this.inbuf_<56?this.update(this.pad_,56-this.inbuf_):this.update(this.pad_,this.blockSize-(this.inbuf_-56));for(var n=this.blockSize-1;n>=56;n--)this.buf_[n]=255&e,e/=256;this.compress_(this.buf_);var r=0;for(n=0;n<5;n++)for(var s=24;s>=0;s-=8)t[r]=this.chain_[n]>>s&255,++r;return t}}(),function(){function t(t,e){var n=this;this.observers=[],this.unsubscribes=[],this.observerCount=0,this.task=Promise.resolve(),this.finalized=!1,this.onNoObservers=e,this.task.then((function(){t(n)})).catch((function(t){n.error(t)}))}t.prototype.next=function(t){this.forEachObserver((function(e){e.next(t)}))},t.prototype.error=function(t){this.forEachObserver((function(e){e.error(t)})),this.close(t)},t.prototype.complete=function(){this.forEachObserver((function(t){t.complete()})),this.close()},t.prototype.subscribe=function(t,e,n){var r,s=this;if(void 0===t&&void 0===e&&void 0===n)throw new Error("Missing Observer.");void 0===(r=function(t,e){if("object"!=typeof t||null===t)return!1;for(var n=0,r=["next","error","complete"];n<r.length;n++){var s=r[n];if(s in t&&"function"==typeof t[s])return!0}return!1}(t)?t:{next:t,error:e,complete:n}).next&&(r.next=T),void 0===r.error&&(r.error=T),void 0===r.complete&&(r.complete=T);var i=this.unsubscribeOne.bind(this,this.observers.length);return this.finalized&&this.task.then((function(){try{s.finalError?r.error(s.finalError):r.complete()}catch(t){}})),this.observers.push(r),i},t.prototype.unsubscribeOne=function(t){void 0!==this.observers&&void 0!==this.observers[t]&&(delete this.observers[t],this.observerCount-=1,0===this.observerCount&&void 0!==this.onNoObservers&&this.onNoObservers(this))},t.prototype.forEachObserver=function(t){if(!this.finalized)for(var e=0;e<this.observers.length;e++)this.sendOne(e,t)},t.prototype.sendOne=function(t,e){var n=this;this.task.then((function(){if(void 0!==n.observers&&void 0!==n.observers[t])try{e(n.observers[t])}catch(t){"undefined"!=typeof console&&console.error&&console.error(t)}}))},t.prototype.close=function(t){var e=this;this.finalized||(this.finalized=!0,void 0!==t&&(this.finalError=t),this.task.then((function(){e.observers=void 0,e.onNoObservers=void 0})))}}()},503:(t,e,n)=>{n.r(e),n.d(e,{FirebaseError:()=>r.ZR,SDK_VERSION:()=>r.Jn,_DEFAULT_ENTRY_NAME:()=>r.l4,_addComponent:()=>r.H9,_addOrOverwriteComponent:()=>r.Vr,_apps:()=>r.Af,_clearComponents:()=>r.Z8,_components:()=>r.lz,_getProvider:()=>r.qX,_registerComponent:()=>r.Xd,_removeServiceInstance:()=>r.wN,deleteApp:()=>r.P2,getApp:()=>r.Mq,getApps:()=>r.C6,initializeApp:()=>r.ZF,onLog:()=>r.TP,registerVersion:()=>r.KN,setLogLevel:()=>r.Ub});var r=n(258);(0,r.KN)("firebase","9.0.2","app")},956:(t,e,n)=>{n.r(e),n.d(e,{AbstractUserDataWriter:()=>Tf,Bytes:()=>vd,CACHE_SIZE_UNLIMITED:()=>Zl,CollectionReference:()=>zl,DocumentReference:()=>jl,DocumentSnapshot:()=>Jd,FieldPath:()=>gd,FieldValue:()=>wd,Firestore:()=>td,FirestoreError:()=>Or,GeoPoint:()=>bd,LoadBundleTask:()=>Xl,Query:()=>Kl,QueryConstraint:()=>rf,QueryDocumentSnapshot:()=>Xd,QuerySnapshot:()=>Zd,SnapshotMetadata:()=>Yd,Timestamp:()=>Qr,Transaction:()=>Kf,WriteBatch:()=>Nf,_DatabaseId:()=>kl,_DocumentKey:()=>gs,_EmptyCredentialsProvider:()=>Fr,_FieldPath:()=>ns,_cast:()=>Fl,_debugAssert:()=>xr,_isBase64Available:()=>ss,_logWarn:()=>Ar,_validateIsNotUsedTogether:()=>Rl,addDoc:()=>Vf,arrayRemove:()=>Qf,arrayUnion:()=>Hf,clearIndexedDbPersistence:()=>cd,collection:()=>$l,collectionGroup:()=>Gl,connectFirestoreEmulator:()=>Bl,deleteDoc:()=>Ff,deleteField:()=>$f,disableNetwork:()=>ld,doc:()=>Hl,documentId:()=>yd,enableIndexedDbPersistence:()=>id,enableMultiTabIndexedDbPersistence:()=>od,enableNetwork:()=>hd,endAt:()=>vf,endBefore:()=>yf,ensureFirestoreConfigured:()=>rd,executeWrite:()=>Bf,getDoc:()=>Df,getDocFromCache:()=>kf,getDocFromServer:()=>xf,getDocs:()=>Lf,getDocsFromCache:()=>Rf,getDocsFromServer:()=>Of,getFirestore:()=>nd,increment:()=>Wf,initializeFirestore:()=>ed,limit:()=>lf,limitToLast:()=>df,loadBundle:()=>fd,namedQuery:()=>pd,onSnapshot:()=>Uf,onSnapshotsInSync:()=>qf,orderBy:()=>uf,query:()=>sf,queryEqual:()=>Wl,refEqual:()=>Ql,runTransaction:()=>zf,serverTimestamp:()=>Gf,setDoc:()=>Mf,setLogLevel:()=>Sr,snapshotEqual:()=>ef,startAfter:()=>mf,startAt:()=>pf,terminate:()=>dd,updateDoc:()=>Pf,waitForPendingWrites:()=>ud,where:()=>af,writeBatch:()=>Yf});var r=n(258),s=n(909),i=n(594),o=n(589),a=function(t,e){return a=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},a(t,e)};function c(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}var u,h="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==n.g?n.g:"undefined"!=typeof self?self:{},l=l||{},d=h||self;function f(){}function p(t){var e=typeof t;return"array"==(e="object"!=e?e:t?Array.isArray(t)?"array":e:"null")||"object"==e&&"number"==typeof t.length}function m(t){var e=typeof t;return"object"==e&&null!=t||"function"==e}var g="closure_uid_"+(1e9*Math.random()>>>0),y=0;function v(t,e,n){return t.call.apply(t.bind,arguments)}function w(t,e,n){if(!t)throw Error();if(2<arguments.length){var r=Array.prototype.slice.call(arguments,2);return function(){var n=Array.prototype.slice.call(arguments);return Array.prototype.unshift.apply(n,r),t.apply(e,n)}}return function(){return t.apply(e,arguments)}}function b(t,e,n){return(b=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?v:w).apply(null,arguments)}function I(t,e){var n=Array.prototype.slice.call(arguments,1);return function(){var e=n.slice();return e.push.apply(e,arguments),t.apply(this,e)}}function E(t,e){function n(){}n.prototype=e.prototype,t.Z=e.prototype,t.prototype=new n,t.prototype.constructor=t,t.Vb=function(t,n,r){for(var s=Array(arguments.length-2),i=2;i<arguments.length;i++)s[i-2]=arguments[i];return e.prototype[n].apply(t,s)}}function T(){this.s=this.s,this.o=this.o}var S={};T.prototype.s=!1,T.prototype.na=function(){if(!this.s&&(this.s=!0,this.M(),0)){var t=function(t){return Object.prototype.hasOwnProperty.call(t,g)&&t[g]||(t[g]=++y)}(this);delete S[t]}},T.prototype.M=function(){if(this.o)for(;this.o.length;)this.o.shift()()};var _=Array.prototype.indexOf?function(t,e){return Array.prototype.indexOf.call(t,e,void 0)}:function(t,e){if("string"==typeof t)return"string"!=typeof e||1!=e.length?-1:t.indexOf(e,0);for(var n=0;n<t.length;n++)if(n in t&&t[n]===e)return n;return-1},N=Array.prototype.forEach?function(t,e,n){Array.prototype.forEach.call(t,e,n)}:function(t,e,n){for(var r=t.length,s="string"==typeof t?t.split(""):t,i=0;i<r;i++)i in s&&e.call(n,s[i],i,t)};function A(t){return Array.prototype.concat.apply([],arguments)}function D(t){var e=t.length;if(0<e){for(var n=Array(e),r=0;r<e;r++)n[r]=t[r];return n}return[]}function C(t){return/^[\s\xa0]*$/.test(t)}var k,x=String.prototype.trim?function(t){return t.trim()}:function(t){return/^[\s\xa0]*([\s\S]*?)[\s\xa0]*$/.exec(t)[1]};function L(t,e){return-1!=t.indexOf(e)}function R(t,e){return t<e?-1:t>e?1:0}t:{var O=d.navigator;if(O){var M=O.userAgent;if(M){k=M;break t}}k=""}function P(t,e,n){for(var r in t)e.call(n,t[r],r,t)}function F(t){var e={};for(var n in t)e[n]=t[n];return e}var V="constructor hasOwnProperty isPrototypeOf propertyIsEnumerable toLocaleString toString valueOf".split(" ");function U(t,e){for(var n,r,s=1;s<arguments.length;s++){for(n in r=arguments[s])t[n]=r[n];for(var i=0;i<V.length;i++)n=V[i],Object.prototype.hasOwnProperty.call(r,n)&&(t[n]=r[n])}}function q(t){return q[" "](t),t}q[" "]=f;var B,j,K=L(k,"Opera"),z=L(k,"Trident")||L(k,"MSIE"),$=L(k,"Edge"),G=$||z,H=L(k,"Gecko")&&!(L(k.toLowerCase(),"webkit")&&!L(k,"Edge"))&&!(L(k,"Trident")||L(k,"MSIE"))&&!L(k,"Edge"),Q=L(k.toLowerCase(),"webkit")&&!L(k,"Edge");function W(){var t=d.document;return t?t.documentMode:void 0}t:{var Y="",J=(j=k,H?/rv:([^\);]+)(\)|;)/.exec(j):$?/Edge\/([\d\.]+)/.exec(j):z?/\b(?:MSIE|rv)[: ]([^\);]+)(\)|;)/.exec(j):Q?/WebKit\/(\S+)/.exec(j):K?/(?:Version)[ \/]?(\S+)/.exec(j):void 0);if(J&&(Y=J?J[1]:""),z){var X=W();if(null!=X&&X>parseFloat(Y)){B=String(X);break t}}B=Y}var Z,tt={};function et(){return t=tt,Object.prototype.hasOwnProperty.call(t,9)?t[9]:t[9]=function(){for(var t=0,e=x(String(B)).split("."),n=x("9").split("."),r=Math.max(e.length,n.length),s=0;0==t&&s<r;s++){var i=e[s]||"",o=n[s]||"";do{if(i=/(\d*)(\D*)(.*)/.exec(i)||["","","",""],o=/(\d*)(\D*)(.*)/.exec(o)||["","","",""],0==i[0].length&&0==o[0].length)break;t=R(0==i[1].length?0:parseInt(i[1],10),0==o[1].length?0:parseInt(o[1],10))||R(0==i[2].length,0==o[2].length)||R(i[2],o[2]),i=i[3],o=o[3]}while(0==t)}return 0<=t}();var t}d.document&&z?Z=W()||parseInt(B,10)||void 0:Z=void 0;var nt=Z,rt=function(){if(!d.addEventListener||!Object.defineProperty)return!1;var t=!1,e=Object.defineProperty({},"passive",{get:function(){t=!0}});try{d.addEventListener("test",f,e),d.removeEventListener("test",f,e)}catch(t){}return t}();function st(t,e){this.type=t,this.g=this.target=e,this.defaultPrevented=!1}function it(t,e){if(st.call(this,t?t.type:""),this.relatedTarget=this.g=this.target=null,this.button=this.screenY=this.screenX=this.clientY=this.clientX=0,this.key="",this.metaKey=this.shiftKey=this.altKey=this.ctrlKey=!1,this.state=null,this.pointerId=0,this.pointerType="",this.i=null,t){var n=this.type=t.type,r=t.changedTouches&&t.changedTouches.length?t.changedTouches[0]:null;if(this.target=t.target||t.srcElement,this.g=e,e=t.relatedTarget){if(H){t:{try{q(e.nodeName);var s=!0;break t}catch(t){}s=!1}s||(e=null)}}else"mouseover"==n?e=t.fromElement:"mouseout"==n&&(e=t.toElement);this.relatedTarget=e,r?(this.clientX=void 0!==r.clientX?r.clientX:r.pageX,this.clientY=void 0!==r.clientY?r.clientY:r.pageY,this.screenX=r.screenX||0,this.screenY=r.screenY||0):(this.clientX=void 0!==t.clientX?t.clientX:t.pageX,this.clientY=void 0!==t.clientY?t.clientY:t.pageY,this.screenX=t.screenX||0,this.screenY=t.screenY||0),this.button=t.button,this.key=t.key||"",this.ctrlKey=t.ctrlKey,this.altKey=t.altKey,this.shiftKey=t.shiftKey,this.metaKey=t.metaKey,this.pointerId=t.pointerId||0,this.pointerType="string"==typeof t.pointerType?t.pointerType:ot[t.pointerType]||"",this.state=t.state,this.i=t,t.defaultPrevented&&it.Z.h.call(this)}}st.prototype.h=function(){this.defaultPrevented=!0},E(it,st);var ot={2:"touch",3:"pen",4:"mouse"};it.prototype.h=function(){it.Z.h.call(this);var t=this.i;t.preventDefault?t.preventDefault():t.returnValue=!1};var at="closure_listenable_"+(1e6*Math.random()|0),ct=0;function ut(t,e,n,r,s){this.listener=t,this.proxy=null,this.src=e,this.type=n,this.capture=!!r,this.ia=s,this.key=++ct,this.ca=this.fa=!1}function ht(t){t.ca=!0,t.listener=null,t.proxy=null,t.src=null,t.ia=null}function lt(t){this.src=t,this.g={},this.h=0}function dt(t,e){var n=e.type;if(n in t.g){var r,s=t.g[n],i=_(s,e);(r=0<=i)&&Array.prototype.splice.call(s,i,1),r&&(ht(e),0==t.g[n].length&&(delete t.g[n],t.h--))}}function ft(t,e,n,r){for(var s=0;s<t.length;++s){var i=t[s];if(!i.ca&&i.listener==e&&i.capture==!!n&&i.ia==r)return s}return-1}lt.prototype.add=function(t,e,n,r,s){var i=t.toString();(t=this.g[i])||(t=this.g[i]=[],this.h++);var o=ft(t,e,r,s);return-1<o?(e=t[o],n||(e.fa=!1)):((e=new ut(e,this.src,i,!!r,s)).fa=n,t.push(e)),e};var pt="closure_lm_"+(1e6*Math.random()|0),mt={};function gt(t,e,n,r,s){if(r&&r.once)return vt(t,e,n,r,s);if(Array.isArray(e)){for(var i=0;i<e.length;i++)gt(t,e[i],n,r,s);return null}return n=_t(n),t&&t[at]?t.N(e,n,m(r)?!!r.capture:!!r,s):yt(t,e,n,!1,r,s)}function yt(t,e,n,r,s,i){if(!e)throw Error("Invalid event type");var o=m(s)?!!s.capture:!!s,a=Tt(t);if(a||(t[pt]=a=new lt(t)),(n=a.add(e,n,r,o,i)).proxy)return n;if(r=function(){var t=Et;return function e(n){return t.call(e.src,e.listener,n)}}(),n.proxy=r,r.src=t,r.listener=n,t.addEventListener)rt||(s=o),void 0===s&&(s=!1),t.addEventListener(e.toString(),r,s);else if(t.attachEvent)t.attachEvent(It(e.toString()),r);else{if(!t.addListener||!t.removeListener)throw Error("addEventListener and attachEvent are unavailable.");t.addListener(r)}return n}function vt(t,e,n,r,s){if(Array.isArray(e)){for(var i=0;i<e.length;i++)vt(t,e[i],n,r,s);return null}return n=_t(n),t&&t[at]?t.O(e,n,m(r)?!!r.capture:!!r,s):yt(t,e,n,!0,r,s)}function wt(t,e,n,r,s){if(Array.isArray(e))for(var i=0;i<e.length;i++)wt(t,e[i],n,r,s);else r=m(r)?!!r.capture:!!r,n=_t(n),t&&t[at]?(t=t.i,(e=String(e).toString())in t.g&&-1<(n=ft(i=t.g[e],n,r,s))&&(ht(i[n]),Array.prototype.splice.call(i,n,1),0==i.length&&(delete t.g[e],t.h--))):t&&(t=Tt(t))&&(e=t.g[e.toString()],t=-1,e&&(t=ft(e,n,r,s)),(n=-1<t?e[t]:null)&&bt(n))}function bt(t){if("number"!=typeof t&&t&&!t.ca){var e=t.src;if(e&&e[at])dt(e.i,t);else{var n=t.type,r=t.proxy;e.removeEventListener?e.removeEventListener(n,r,t.capture):e.detachEvent?e.detachEvent(It(n),r):e.addListener&&e.removeListener&&e.removeListener(r),(n=Tt(e))?(dt(n,t),0==n.h&&(n.src=null,e[pt]=null)):ht(t)}}}function It(t){return t in mt?mt[t]:mt[t]="on"+t}function Et(t,e){if(t.ca)t=!0;else{e=new it(e,this);var n=t.listener,r=t.ia||t.src;t.fa&&bt(t),t=n.call(r,e)}return t}function Tt(t){return(t=t[pt])instanceof lt?t:null}var St="__closure_events_fn_"+(1e9*Math.random()>>>0);function _t(t){return"function"==typeof t?t:(t[St]||(t[St]=function(e){return t.handleEvent(e)}),t[St])}function Nt(){T.call(this),this.i=new lt(this),this.P=this,this.I=null}function At(t,e){var n,r=t.I;if(r)for(n=[];r;r=r.I)n.push(r);if(t=t.P,r=e.type||e,"string"==typeof e)e=new st(e,t);else if(e instanceof st)e.target=e.target||t;else{var s=e;U(e=new st(r,t),s)}if(s=!0,n)for(var i=n.length-1;0<=i;i--){var o=e.g=n[i];s=Dt(o,r,!0,e)&&s}if(s=Dt(o=e.g=t,r,!0,e)&&s,s=Dt(o,r,!1,e)&&s,n)for(i=0;i<n.length;i++)s=Dt(o=e.g=n[i],r,!1,e)&&s}function Dt(t,e,n,r){if(!(e=t.i.g[String(e)]))return!0;e=e.concat();for(var s=!0,i=0;i<e.length;++i){var o=e[i];if(o&&!o.ca&&o.capture==n){var a=o.listener,c=o.ia||o.src;o.fa&&dt(t.i,o),s=!1!==a.call(c,r)&&s}}return s&&!r.defaultPrevented}E(Nt,T),Nt.prototype[at]=!0,Nt.prototype.removeEventListener=function(t,e,n,r){wt(this,t,e,n,r)},Nt.prototype.M=function(){if(Nt.Z.M.call(this),this.i){var t,e=this.i;for(t in e.g){for(var n=e.g[t],r=0;r<n.length;r++)ht(n[r]);delete e.g[t],e.h--}}this.I=null},Nt.prototype.N=function(t,e,n,r){return this.i.add(String(t),e,!1,n,r)},Nt.prototype.O=function(t,e,n,r){return this.i.add(String(t),e,!0,n,r)};var Ct=d.JSON.stringify;function kt(){var t=Vt,e=null;return t.g&&(e=t.g,t.g=t.g.next,t.g||(t.h=null),e.next=null),e}var xt,Lt=function(){function t(){this.h=this.g=null}return t.prototype.add=function(t,e){var n=Rt.get();n.set(t,e),this.h?this.h.next=n:this.g=n,this.h=n},t}(),Rt=new(function(){function t(t,e){this.i=t,this.j=e,this.h=0,this.g=null}return t.prototype.get=function(){var t;return 0<this.h?(this.h--,t=this.g,this.g=t.next,t.next=null):t=this.i(),t},t}())((function(){return new Ot}),(function(t){return t.reset()})),Ot=function(){function t(){this.next=this.g=this.h=null}return t.prototype.set=function(t,e){this.h=t,this.g=e,this.next=null},t.prototype.reset=function(){this.next=this.g=this.h=null},t}();function Mt(t){d.setTimeout((function(){throw t}),0)}function Pt(t,e){xt||function(){var t=d.Promise.resolve(void 0);xt=function(){t.then(Ut)}}(),Ft||(xt(),Ft=!0),Vt.add(t,e)}var Ft=!1,Vt=new Lt;function Ut(){for(var t;t=kt();){try{t.h.call(t.g)}catch(t){Mt(t)}var e=Rt;e.j(t),100>e.h&&(e.h++,t.next=e.g,e.g=t)}Ft=!1}function qt(t,e){Nt.call(this),this.h=t||1,this.g=e||d,this.j=b(this.kb,this),this.l=Date.now()}function Bt(t){t.da=!1,t.S&&(t.g.clearTimeout(t.S),t.S=null)}function jt(t,e,n){if("function"==typeof t)n&&(t=b(t,n));else{if(!t||"function"!=typeof t.handleEvent)throw Error("Invalid listener argument");t=b(t.handleEvent,t)}return 2147483647<Number(e)?-1:d.setTimeout(t,e||0)}function Kt(t){t.g=jt((function(){t.g=null,t.i&&(t.i=!1,Kt(t))}),t.j);var e=t.h;t.h=null,t.m.apply(null,e)}E(qt,Nt),(u=qt.prototype).da=!1,u.S=null,u.kb=function(){if(this.da){var t=Date.now()-this.l;0<t&&t<.8*this.h?this.S=this.g.setTimeout(this.j,this.h-t):(this.S&&(this.g.clearTimeout(this.S),this.S=null),At(this,"tick"),this.da&&(Bt(this),this.start()))}},u.start=function(){this.da=!0,this.S||(this.S=this.g.setTimeout(this.j,this.h),this.l=Date.now())},u.M=function(){qt.Z.M.call(this),Bt(this),delete this.g};var zt=function(t){function e(e,n){var r=t.call(this)||this;return r.m=e,r.j=n,r.h=null,r.i=!1,r.g=null,r}return function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}a(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}(e,t),e.prototype.l=function(t){this.h=arguments,this.g?this.i=!0:Kt(this)},e.prototype.M=function(){t.prototype.M.call(this),this.g&&(d.clearTimeout(this.g),this.g=null,this.i=!1,this.h=null)},e}(T);function $t(t){T.call(this),this.h=t,this.g={}}E($t,T);var Gt=[];function Ht(t,e,n,r){Array.isArray(n)||(n&&(Gt[0]=n.toString()),n=Gt);for(var s=0;s<n.length;s++){var i=gt(e,n[s],r||t.handleEvent,!1,t.h||t);if(!i)break;t.g[i.key]=i}}function Qt(t){P(t.g,(function(t,e){this.g.hasOwnProperty(e)&&bt(t)}),t),t.g={}}function Wt(){this.g=!0}function Yt(t,e,n,r){t.info((function(){return"XMLHTTP TEXT ("+e+"): "+function(t,e){if(!t.g)return e;if(!e)return null;try{var n=JSON.parse(e);if(n)for(t=0;t<n.length;t++)if(Array.isArray(n[t])){var r=n[t];if(!(2>r.length)){var s=r[1];if(Array.isArray(s)&&!(1>s.length)){var i=s[0];if("noop"!=i&&"stop"!=i&&"close"!=i)for(var o=1;o<s.length;o++)s[o]=""}}}return Ct(n)}catch(t){return e}}(t,n)+(r?" "+r:"")}))}$t.prototype.M=function(){$t.Z.M.call(this),Qt(this)},$t.prototype.handleEvent=function(){throw Error("EventHandler.handleEvent not implemented")},Wt.prototype.Aa=function(){this.g=!1},Wt.prototype.info=function(){};var Jt={},Xt=null;function Zt(){return Xt=Xt||new Nt}function te(t){st.call(this,Jt.Ma,t)}function ee(t){var e=Zt();At(e,new te(e,t))}function ne(t,e){st.call(this,Jt.STAT_EVENT,t),this.stat=e}function re(t){var e=Zt();At(e,new ne(e,t))}function se(t,e){st.call(this,Jt.Na,t),this.size=e}function ie(t,e){if("function"!=typeof t)throw Error("Fn must not be null and must be a function");return d.setTimeout((function(){t()}),e)}Jt.Ma="serverreachability",E(te,st),Jt.STAT_EVENT="statevent",E(ne,st),Jt.Na="timingevent",E(se,st);var oe={NO_ERROR:0,lb:1,yb:2,xb:3,sb:4,wb:5,zb:6,Ja:7,TIMEOUT:8,Cb:9},ae={qb:"complete",Mb:"success",Ka:"error",Ja:"abort",Eb:"ready",Fb:"readystatechange",TIMEOUT:"timeout",Ab:"incrementaldata",Db:"progress",tb:"downloadprogress",Ub:"uploadprogress"};function ce(){}function ue(t){return t.h||(t.h=t.i())}function he(){}ce.prototype.h=null;var le,de={OPEN:"a",pb:"b",Ka:"c",Bb:"d"};function fe(){st.call(this,"d")}function pe(){st.call(this,"c")}function me(){}function ge(t,e,n,r){this.l=t,this.j=e,this.m=n,this.X=r||1,this.V=new $t(this),this.P=ve,t=G?125:void 0,this.W=new qt(t),this.H=null,this.i=!1,this.s=this.A=this.v=this.K=this.F=this.Y=this.B=null,this.D=[],this.g=null,this.C=0,this.o=this.u=null,this.N=-1,this.I=!1,this.O=0,this.L=null,this.aa=this.J=this.$=this.U=!1,this.h=new ye}function ye(){this.i=null,this.g="",this.h=!1}E(fe,st),E(pe,st),E(me,ce),me.prototype.g=function(){return new XMLHttpRequest},me.prototype.i=function(){return{}},le=new me;var ve=45e3,we={},be={};function Ie(t,e,n){t.K=1,t.v=ze(Ve(e)),t.s=n,t.U=!0,Ee(t,null)}function Ee(t,e){t.F=Date.now(),Ne(t),t.A=Ve(t.v);var n=t.A,r=t.X;Array.isArray(r)||(r=[String(r)]),rn(n.h,"t",r),t.C=0,n=t.l.H,t.h=new ye,t.g=ir(t.l,n?e:null,!t.s),0<t.O&&(t.L=new zt(b(t.Ia,t,t.g),t.O)),Ht(t.V,t.g,"readystatechange",t.gb),e=t.H?F(t.H):{},t.s?(t.u||(t.u="POST"),e["Content-Type"]="application/x-www-form-urlencoded",t.g.ea(t.A,t.u,t.s,e)):(t.u="GET",t.g.ea(t.A,t.u,null,e)),ee(1),function(t,e,n,r,s,i){t.info((function(){if(t.g)if(i)for(var o="",a=i.split("&"),c=0;c<a.length;c++){var u=a[c].split("=");if(1<u.length){var h=u[0];u=u[1];var l=h.split("_");o=2<=l.length&&"type"==l[1]?o+(h+"=")+u+"&":o+(h+"=redacted&")}}else o=null;else o=i;return"XMLHTTP REQ ("+r+") [attempt "+s+"]: "+e+"\n"+n+"\n"+o}))}(t.j,t.u,t.A,t.m,t.X,t.s)}function Te(t){return!!t.g&&"GET"==t.u&&2!=t.K&&t.l.Ba}function Se(t,e,n){for(var r,s=!0;!t.I&&t.C<n.length;){if((r=_e(t,n))==be){4==e&&(t.o=4,re(14),s=!1),Yt(t.j,t.m,null,"[Incomplete Response]");break}if(r==we){t.o=4,re(15),Yt(t.j,t.m,n,"[Invalid Chunk]"),s=!1;break}Yt(t.j,t.m,r,null),xe(t,r)}Te(t)&&r!=be&&r!=we&&(t.h.g="",t.C=0),4!=e||0!=n.length||t.h.h||(t.o=1,re(16),s=!1),t.i=t.i&&s,s?0<n.length&&!t.aa&&(t.aa=!0,(e=t.l).g==t&&e.$&&!e.L&&(e.h.info("Great, no buffering proxy detected. Bytes received: "+n.length),Jn(e),e.L=!0,re(11))):(Yt(t.j,t.m,n,"[Invalid Chunked Response]"),ke(t),Ce(t))}function _e(t,e){var n=t.C,r=e.indexOf("\n",n);return-1==r?be:(n=Number(e.substring(n,r)),isNaN(n)?we:(r+=1)+n>e.length?be:(e=e.substr(r,n),t.C=r+n,e))}function Ne(t){t.Y=Date.now()+t.P,Ae(t,t.P)}function Ae(t,e){if(null!=t.B)throw Error("WatchDog timer not null");t.B=ie(b(t.eb,t),e)}function De(t){t.B&&(d.clearTimeout(t.B),t.B=null)}function Ce(t){0==t.l.G||t.I||tr(t.l,t)}function ke(t){De(t);var e=t.L;e&&"function"==typeof e.na&&e.na(),t.L=null,Bt(t.W),Qt(t.V),t.g&&(e=t.g,t.g=null,e.abort(),e.na())}function xe(t,e){try{var n=t.l;if(0!=n.G&&(n.g==t||ln(n.i,t)))if(n.I=t.N,!t.J&&ln(n.i,t)&&3==n.G){try{var r=n.Ca.g.parse(e)}catch(i){r=null}if(Array.isArray(r)&&3==r.length){var s=r;if(0==s[0]){t:if(!n.u){if(n.g){if(!(n.g.F+3e3<t.F))break t;Zn(n),jn(n)}Yn(n),re(18)}}else n.ta=s[1],0<n.ta-n.U&&37500>s[2]&&n.N&&0==n.A&&!n.v&&(n.v=ie(b(n.ab,n),6e3));if(1>=hn(n.i)&&n.ka){try{n.ka()}catch(i){}n.ka=void 0}}else nr(n,11)}else if((t.J||n.g==t)&&Zn(n),!C(e))for(s=n.Ca.g.parse(e),e=0;e<s.length;e++){var i=s[e];if(n.U=i[0],i=i[1],2==n.G)if("c"==i[0]){n.J=i[1],n.la=i[2];var o=i[3];null!=o&&(n.ma=o,n.h.info("VER="+n.ma));var a=i[4];null!=a&&(n.za=a,n.h.info("SVER="+n.za));var c=i[5];null!=c&&"number"==typeof c&&0<c&&(r=1.5*c,n.K=r,n.h.info("backChannelRequestTimeoutMs_="+r)),r=n;var u=t.g;if(u){var h=u.g?u.g.getResponseHeader("X-Client-Wire-Protocol"):null;if(h){var l=r.i;!l.g&&(L(h,"spdy")||L(h,"quic")||L(h,"h2"))&&(l.j=l.l,l.g=new Set,l.h&&(dn(l,l.h),l.h=null))}if(r.D){var d=u.g?u.g.getResponseHeader("X-HTTP-Session-Id"):null;d&&(r.sa=d,Ke(r.F,r.D,d))}}n.G=3,n.j&&n.j.xa(),n.$&&(n.O=Date.now()-t.F,n.h.info("Handshake RTT: "+n.O+"ms"));var f=t;if((r=n).oa=sr(r,r.H?r.la:null,r.W),f.J){fn(r.i,f);var p=f,m=r.K;m&&p.setTimeout(m),p.B&&(De(p),Ne(p)),r.g=f}else Wn(r);0<n.l.length&&$n(n)}else"stop"!=i[0]&&"close"!=i[0]||nr(n,7);else 3==n.G&&("stop"==i[0]||"close"==i[0]?"stop"==i[0]?nr(n,7):Bn(n):"noop"!=i[0]&&n.j&&n.j.wa(i),n.A=0)}ee(4)}catch(i){}}function Le(t,e){if(t.forEach&&"function"==typeof t.forEach)t.forEach(e,void 0);else if(p(t)||"string"==typeof t)N(t,e,void 0);else{if(t.T&&"function"==typeof t.T)var n=t.T();else if(t.R&&"function"==typeof t.R)n=void 0;else if(p(t)||"string"==typeof t){n=[];for(var r=t.length,s=0;s<r;s++)n.push(s)}else for(s in n=[],r=0,t)n[r++]=s;r=function(t){if(t.R&&"function"==typeof t.R)return t.R();if("string"==typeof t)return t.split("");if(p(t)){for(var e=[],n=t.length,r=0;r<n;r++)e.push(t[r]);return e}for(r in e=[],n=0,t)e[n++]=t[r];return e}(t),s=r.length;for(var i=0;i<s;i++)e.call(void 0,r[i],n&&n[i],t)}}function Re(t,e){this.h={},this.g=[],this.i=0;var n=arguments.length;if(1<n){if(n%2)throw Error("Uneven number of arguments");for(var r=0;r<n;r+=2)this.set(arguments[r],arguments[r+1])}else if(t)if(t instanceof Re)for(n=t.T(),r=0;r<n.length;r++)this.set(n[r],t.get(n[r]));else for(r in t)this.set(r,t[r])}function Oe(t){if(t.i!=t.g.length){for(var e=0,n=0;e<t.g.length;){var r=t.g[e];Me(t.h,r)&&(t.g[n++]=r),e++}t.g.length=n}if(t.i!=t.g.length){var s={};for(n=e=0;e<t.g.length;)Me(s,r=t.g[e])||(t.g[n++]=r,s[r]=1),e++;t.g.length=n}}function Me(t,e){return Object.prototype.hasOwnProperty.call(t,e)}(u=ge.prototype).setTimeout=function(t){this.P=t},u.gb=function(t){t=t.target;var e=this.L;e&&3==Pn(t)?e.l():this.Ia(t)},u.Ia=function(t){try{if(t==this.g)t:{var e=Pn(this.g),n=this.g.Da(),r=this.g.ba();if(!(3>e)&&(3!=e||G||this.g&&(this.h.h||this.g.ga()||Fn(this.g)))){this.I||4!=e||7==n||ee(8==n||0>=r?3:2),De(this);var s=this.g.ba();this.N=s;e:if(Te(this)){var i=Fn(this.g);t="";var o=i.length,a=4==Pn(this.g);if(!this.h.i){if("undefined"==typeof TextDecoder){ke(this),Ce(this);var c="";break e}this.h.i=new d.TextDecoder}for(n=0;n<o;n++)this.h.h=!0,t+=this.h.i.decode(i[n],{stream:a&&n==o-1});i.splice(0,o),this.h.g+=t,this.C=0,c=this.h.g}else c=this.g.ga();if(this.i=200==s,function(t,e,n,r,s,i,o){t.info((function(){return"XMLHTTP RESP ("+r+") [ attempt "+s+"]: "+e+"\n"+n+"\n"+i+" "+o}))}(this.j,this.u,this.A,this.m,this.X,e,s),this.i){if(this.$&&!this.J){e:{if(this.g){var u,h=this.g;if((u=h.g?h.g.getResponseHeader("X-HTTP-Initial-Response"):null)&&!C(u)){var l=u;break e}}l=null}if(!(s=l)){this.i=!1,this.o=3,re(12),ke(this),Ce(this);break t}Yt(this.j,this.m,s,"Initial handshake response via X-HTTP-Initial-Response"),this.J=!0,xe(this,s)}this.U?(Se(this,e,c),G&&this.i&&3==e&&(Ht(this.V,this.W,"tick",this.fb),this.W.start())):(Yt(this.j,this.m,c,null),xe(this,c)),4==e&&ke(this),this.i&&!this.I&&(4==e?tr(this.l,this):(this.i=!1,Ne(this)))}else 400==s&&0<c.indexOf("Unknown SID")?(this.o=3,re(12)):(this.o=0,re(13)),ke(this),Ce(this)}}}catch(e){}},u.fb=function(){if(this.g){var t=Pn(this.g),e=this.g.ga();this.C<e.length&&(De(this),Se(this,t,e),this.i&&4!=t&&Ne(this))}},u.cancel=function(){this.I=!0,ke(this)},u.eb=function(){this.B=null;var t=Date.now();0<=t-this.Y?(function(t,e){t.info((function(){return"TIMEOUT: "+e}))}(this.j,this.A),2!=this.K&&(ee(3),re(17)),ke(this),this.o=2,Ce(this)):Ae(this,this.Y-t)},(u=Re.prototype).R=function(){Oe(this);for(var t=[],e=0;e<this.g.length;e++)t.push(this.h[this.g[e]]);return t},u.T=function(){return Oe(this),this.g.concat()},u.get=function(t,e){return Me(this.h,t)?this.h[t]:e},u.set=function(t,e){Me(this.h,t)||(this.i++,this.g.push(t)),this.h[t]=e},u.forEach=function(t,e){for(var n=this.T(),r=0;r<n.length;r++){var s=n[r],i=this.get(s);t.call(e,i,s,this)}};var Pe=/^(?:([^:/?#.]+):)?(?:\/\/(?:([^\\/?#]*)@)?([^\\/?#]*?)(?::([0-9]+))?(?=[\\/?#]|$))?([^?#]+)?(?:\?([^#]*))?(?:#([\s\S]*))?$/;function Fe(t,e){if(this.i=this.s=this.j="",this.m=null,this.o=this.l="",this.g=!1,t instanceof Fe){this.g=void 0!==e?e:t.g,Ue(this,t.j),this.s=t.s,qe(this,t.i),Be(this,t.m),this.l=t.l,e=t.h;var n=new Ze;n.i=e.i,e.g&&(n.g=new Re(e.g),n.h=e.h),je(this,n),this.o=t.o}else t&&(n=String(t).match(Pe))?(this.g=!!e,Ue(this,n[1]||"",!0),this.s=$e(n[2]||""),qe(this,n[3]||"",!0),Be(this,n[4]),this.l=$e(n[5]||"",!0),je(this,n[6]||"",!0),this.o=$e(n[7]||"")):(this.g=!!e,this.h=new Ze(null,this.g))}function Ve(t){return new Fe(t)}function Ue(t,e,n){t.j=n?$e(e,!0):e,t.j&&(t.j=t.j.replace(/:$/,""))}function qe(t,e,n){t.i=n?$e(e,!0):e}function Be(t,e){if(e){if(e=Number(e),isNaN(e)||0>e)throw Error("Bad port number "+e);t.m=e}else t.m=null}function je(t,e,n){e instanceof Ze?(t.h=e,function(t,e){e&&!t.j&&(tn(t),t.i=null,t.g.forEach((function(t,e){var n=e.toLowerCase();e!=n&&(en(this,e),rn(this,n,t))}),t)),t.j=e}(t.h,t.g)):(n||(e=Ge(e,Je)),t.h=new Ze(e,t.g))}function Ke(t,e,n){t.h.set(e,n)}function ze(t){return Ke(t,"zx",Math.floor(2147483648*Math.random()).toString(36)+Math.abs(Math.floor(2147483648*Math.random())^Date.now()).toString(36)),t}function $e(t,e){return t?e?decodeURI(t.replace(/%25/g,"%2525")):decodeURIComponent(t):""}function Ge(t,e,n){return"string"==typeof t?(t=encodeURI(t).replace(e,He),n&&(t=t.replace(/%25([0-9a-fA-F]{2})/g,"%$1")),t):null}function He(t){return"%"+((t=t.charCodeAt(0))>>4&15).toString(16)+(15&t).toString(16)}Fe.prototype.toString=function(){var t=[],e=this.j;e&&t.push(Ge(e,Qe,!0),":");var n=this.i;return(n||"file"==e)&&(t.push("//"),(e=this.s)&&t.push(Ge(e,Qe,!0),"@"),t.push(encodeURIComponent(String(n)).replace(/%25([0-9a-fA-F]{2})/g,"%$1")),null!=(n=this.m)&&t.push(":",String(n))),(n=this.l)&&(this.i&&"/"!=n.charAt(0)&&t.push("/"),t.push(Ge(n,"/"==n.charAt(0)?Ye:We,!0))),(n=this.h.toString())&&t.push("?",n),(n=this.o)&&t.push("#",Ge(n,Xe)),t.join("")};var Qe=/[#\/\?@]/g,We=/[#\?:]/g,Ye=/[#\?]/g,Je=/[#\?@]/g,Xe=/#/g;function Ze(t,e){this.h=this.g=null,this.i=t||null,this.j=!!e}function tn(t){t.g||(t.g=new Re,t.h=0,t.i&&function(t,e){if(t){t=t.split("&");for(var n=0;n<t.length;n++){var r=t[n].indexOf("="),s=null;if(0<=r){var i=t[n].substring(0,r);s=t[n].substring(r+1)}else i=t[n];e(i,s?decodeURIComponent(s.replace(/\+/g," ")):"")}}}(t.i,(function(e,n){t.add(decodeURIComponent(e.replace(/\+/g," ")),n)})))}function en(t,e){tn(t),e=sn(t,e),Me(t.g.h,e)&&(t.i=null,t.h-=t.g.get(e).length,Me((t=t.g).h,e)&&(delete t.h[e],t.i--,t.g.length>2*t.i&&Oe(t)))}function nn(t,e){return tn(t),e=sn(t,e),Me(t.g.h,e)}function rn(t,e,n){en(t,e),0<n.length&&(t.i=null,t.g.set(sn(t,e),D(n)),t.h+=n.length)}function sn(t,e){return e=String(e),t.j&&(e=e.toLowerCase()),e}(u=Ze.prototype).add=function(t,e){tn(this),this.i=null,t=sn(this,t);var n=this.g.get(t);return n||this.g.set(t,n=[]),n.push(e),this.h+=1,this},u.forEach=function(t,e){tn(this),this.g.forEach((function(n,r){N(n,(function(n){t.call(e,n,r,this)}),this)}),this)},u.T=function(){tn(this);for(var t=this.g.R(),e=this.g.T(),n=[],r=0;r<e.length;r++)for(var s=t[r],i=0;i<s.length;i++)n.push(e[r]);return n},u.R=function(t){tn(this);var e=[];if("string"==typeof t)nn(this,t)&&(e=A(e,this.g.get(sn(this,t))));else{t=this.g.R();for(var n=0;n<t.length;n++)e=A(e,t[n])}return e},u.set=function(t,e){return tn(this),this.i=null,nn(this,t=sn(this,t))&&(this.h-=this.g.get(t).length),this.g.set(t,[e]),this.h+=1,this},u.get=function(t,e){return t&&0<(t=this.R(t)).length?String(t[0]):e},u.toString=function(){if(this.i)return this.i;if(!this.g)return"";for(var t=[],e=this.g.T(),n=0;n<e.length;n++){var r=e[n],s=encodeURIComponent(String(r));r=this.R(r);for(var i=0;i<r.length;i++){var o=s;""!==r[i]&&(o+="="+encodeURIComponent(String(r[i]))),t.push(o)}}return this.i=t.join("&")};var on=function(t,e){this.h=t,this.g=e};function an(t){this.l=t||cn,t=d.PerformanceNavigationTiming?0<(t=d.performance.getEntriesByType("navigation")).length&&("hq"==t[0].nextHopProtocol||"h2"==t[0].nextHopProtocol):!!(d.g&&d.g.Ea&&d.g.Ea()&&d.g.Ea().Zb),this.j=t?this.l:1,this.g=null,1<this.j&&(this.g=new Set),this.h=null,this.i=[]}var cn=10;function un(t){return!!t.h||!!t.g&&t.g.size>=t.j}function hn(t){return t.h?1:t.g?t.g.size:0}function ln(t,e){return t.h?t.h==e:!!t.g&&t.g.has(e)}function dn(t,e){t.g?t.g.add(e):t.h=e}function fn(t,e){t.h&&t.h==e?t.h=null:t.g&&t.g.has(e)&&t.g.delete(e)}function pn(t){var e,n;if(null!=t.h)return t.i.concat(t.h.D);if(null!=t.g&&0!==t.g.size){var r=t.i;try{for(var s=c(t.g.values()),i=s.next();!i.done;i=s.next()){var o=i.value;r=r.concat(o.D)}}catch(t){e={error:t}}finally{try{i&&!i.done&&(n=s.return)&&n.call(s)}finally{if(e)throw e.error}}return r}return D(t.i)}function mn(){}function gn(){this.g=new mn}function yn(t,e,n){var r=n||"";try{Le(t,(function(t,n){var s=t;m(t)&&(s=Ct(t)),e.push(r+n+"="+encodeURIComponent(s))}))}catch(t){throw e.push(r+"type="+encodeURIComponent("_badmap")),t}}function vn(t,e,n,r,s){try{e.onload=null,e.onerror=null,e.onabort=null,e.ontimeout=null,s(r)}catch(t){}}function wn(t){this.l=t.$b||null,this.j=t.ib||!1}function bn(t,e){Nt.call(this),this.D=t,this.u=e,this.m=void 0,this.readyState=In,this.status=0,this.responseType=this.responseText=this.response=this.statusText="",this.onreadystatechange=null,this.v=new Headers,this.h=null,this.C="GET",this.B="",this.g=!1,this.A=this.j=this.l=null}an.prototype.cancel=function(){var t,e;if(this.i=pn(this),this.h)this.h.cancel(),this.h=null;else if(this.g&&0!==this.g.size){try{for(var n=c(this.g.values()),r=n.next();!r.done;r=n.next())r.value.cancel()}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.g.clear()}},mn.prototype.stringify=function(t){return d.JSON.stringify(t,void 0)},mn.prototype.parse=function(t){return d.JSON.parse(t,void 0)},E(wn,ce),wn.prototype.g=function(){return new bn(this.l,this.j)},wn.prototype.i=function(t){return function(){return t}}({}),E(bn,Nt);var In=0;function En(t){t.j.read().then(t.Sa.bind(t)).catch(t.ha.bind(t))}function Tn(t){t.readyState=4,t.l=null,t.j=null,t.A=null,Sn(t)}function Sn(t){t.onreadystatechange&&t.onreadystatechange.call(t)}(u=bn.prototype).open=function(t,e){if(this.readyState!=In)throw this.abort(),Error("Error reopening a connection");this.C=t,this.B=e,this.readyState=1,Sn(this)},u.send=function(t){if(1!=this.readyState)throw this.abort(),Error("need to call open() first. ");this.g=!0;var e={headers:this.v,method:this.C,credentials:this.m,cache:void 0};t&&(e.body=t),(this.D||d).fetch(new Request(this.B,e)).then(this.Va.bind(this),this.ha.bind(this))},u.abort=function(){this.response=this.responseText="",this.v=new Headers,this.status=0,this.j&&this.j.cancel("Request was aborted."),1<=this.readyState&&this.g&&4!=this.readyState&&(this.g=!1,Tn(this)),this.readyState=In},u.Va=function(t){if(this.g&&(this.l=t,this.h||(this.status=this.l.status,this.statusText=this.l.statusText,this.h=t.headers,this.readyState=2,Sn(this)),this.g&&(this.readyState=3,Sn(this),this.g)))if("arraybuffer"===this.responseType)t.arrayBuffer().then(this.Ta.bind(this),this.ha.bind(this));else if(void 0!==d.ReadableStream&&"body"in t){if(this.j=t.body.getReader(),this.u){if(this.responseType)throw Error('responseType must be empty for "streamBinaryChunks" mode responses.');this.response=[]}else this.response=this.responseText="",this.A=new TextDecoder;En(this)}else t.text().then(this.Ua.bind(this),this.ha.bind(this))},u.Sa=function(t){if(this.g){if(this.u&&t.value)this.response.push(t.value);else if(!this.u){var e=t.value?t.value:new Uint8Array(0);(e=this.A.decode(e,{stream:!t.done}))&&(this.response=this.responseText+=e)}t.done?Tn(this):Sn(this),3==this.readyState&&En(this)}},u.Ua=function(t){this.g&&(this.response=this.responseText=t,Tn(this))},u.Ta=function(t){this.g&&(this.response=t,Tn(this))},u.ha=function(){this.g&&Tn(this)},u.setRequestHeader=function(t,e){this.v.append(t,e)},u.getResponseHeader=function(t){return this.h&&this.h.get(t.toLowerCase())||""},u.getAllResponseHeaders=function(){if(!this.h)return"";for(var t=[],e=this.h.entries(),n=e.next();!n.done;)n=n.value,t.push(n[0]+": "+n[1]),n=e.next();return t.join("\r\n")},Object.defineProperty(bn.prototype,"withCredentials",{get:function(){return"include"===this.m},set:function(t){this.m=t?"include":"same-origin"}});var _n=d.JSON.parse;function Nn(t){Nt.call(this),this.headers=new Re,this.u=t||null,this.h=!1,this.C=this.g=null,this.H="",this.m=0,this.j="",this.l=this.F=this.v=this.D=!1,this.B=0,this.A=null,this.J=An,this.K=this.L=!1}E(Nn,Nt);var An="",Dn=/^https?$/i,Cn=["POST","PUT"];function kn(t){return"content-type"==t.toLowerCase()}function xn(t,e){t.h=!1,t.g&&(t.l=!0,t.g.abort(),t.l=!1),t.j=e,t.m=5,Ln(t),On(t)}function Ln(t){t.D||(t.D=!0,At(t,"complete"),At(t,"error"))}function Rn(t){if(t.h&&void 0!==l&&(!t.C[1]||4!=Pn(t)||2!=t.ba()))if(t.v&&4==Pn(t))jt(t.Fa,0,t);else if(At(t,"readystatechange"),4==Pn(t)){t.h=!1;try{var e,n=t.ba();t:switch(n){case 200:case 201:case 202:case 204:case 206:case 304:case 1223:var r=!0;break t;default:r=!1}if(!(e=r)){var s;if(s=0===n){var i=String(t.H).match(Pe)[1]||null;if(!i&&d.self&&d.self.location){var o=d.self.location.protocol;i=o.substr(0,o.length-1)}s=!Dn.test(i?i.toLowerCase():"")}e=s}if(e)At(t,"complete"),At(t,"success");else{t.m=6;try{var a=2<Pn(t)?t.g.statusText:""}catch(t){a=""}t.j=a+" ["+t.ba()+"]",Ln(t)}}finally{On(t)}}}function On(t,e){if(t.g){Mn(t);var n=t.g,r=t.C[0]?f:null;t.g=null,t.C=null,e||At(t,"ready");try{n.onreadystatechange=r}catch(t){}}}function Mn(t){t.g&&t.K&&(t.g.ontimeout=null),t.A&&(d.clearTimeout(t.A),t.A=null)}function Pn(t){return t.g?t.g.readyState:0}function Fn(t){try{if(!t.g)return null;if("response"in t.g)return t.g.response;switch(t.J){case An:case"text":return t.g.responseText;case"arraybuffer":if("mozResponseArrayBuffer"in t.g)return t.g.mozResponseArrayBuffer}return null}catch(t){return null}}function Vn(t,e,n){t:{for(r in n){var r=!1;break t}r=!0}r||(n=function(t){var e="";return P(t,(function(t,n){e+=n,e+=":",e+=t,e+="\r\n"})),e}(n),"string"==typeof t?null!=n&&encodeURIComponent(String(n)):Ke(t,e,n))}function Un(t,e,n){return n&&n.internalChannelParams&&n.internalChannelParams[t]||e}function qn(t){this.za=0,this.l=[],this.h=new Wt,this.la=this.oa=this.F=this.W=this.g=this.sa=this.D=this.aa=this.o=this.P=this.s=null,this.Za=this.V=0,this.Xa=Un("failFast",!1,t),this.N=this.v=this.u=this.m=this.j=null,this.X=!0,this.I=this.ta=this.U=-1,this.Y=this.A=this.C=0,this.Pa=Un("baseRetryDelayMs",5e3,t),this.$a=Un("retryDelaySeedMs",1e4,t),this.Ya=Un("forwardChannelMaxRetries",2,t),this.ra=Un("forwardChannelRequestTimeoutMs",2e4,t),this.qa=t&&t.xmlHttpFactory||void 0,this.Ba=t&&t.Yb||!1,this.K=void 0,this.H=t&&t.supportsCrossDomainXhr||!1,this.J="",this.i=new an(t&&t.concurrentRequestLimit),this.Ca=new gn,this.ja=t&&t.fastHandshake||!1,this.Ra=t&&t.Wb||!1,t&&t.Aa&&this.h.Aa(),t&&t.forceLongPolling&&(this.X=!1),this.$=!this.ja&&this.X&&t&&t.detectBufferingProxy||!1,this.ka=void 0,this.O=0,this.L=!1,this.B=null,this.Wa=!t||!1!==t.Xb}function Bn(t){if(Kn(t),3==t.G){var e=t.V++,n=Ve(t.F);Ke(n,"SID",t.J),Ke(n,"RID",e),Ke(n,"TYPE","terminate"),Hn(t,n),(e=new ge(t,t.h,e,void 0)).K=2,e.v=ze(Ve(n)),n=!1,d.navigator&&d.navigator.sendBeacon&&(n=d.navigator.sendBeacon(e.v.toString(),"")),!n&&d.Image&&((new Image).src=e.v,n=!0),n||(e.g=ir(e.l,null),e.g.ea(e.v)),e.F=Date.now(),Ne(e)}rr(t)}function jn(t){t.g&&(Jn(t),t.g.cancel(),t.g=null)}function Kn(t){jn(t),t.u&&(d.clearTimeout(t.u),t.u=null),Zn(t),t.i.cancel(),t.m&&("number"==typeof t.m&&d.clearTimeout(t.m),t.m=null)}function zn(t,e){t.l.push(new on(t.Za++,e)),3==t.G&&$n(t)}function $n(t){un(t.i)||t.m||(t.m=!0,Pt(t.Ha,t),t.C=0)}function Gn(t,e){var n;n=e?e.m:t.V++;var r=Ve(t.F);Ke(r,"SID",t.J),Ke(r,"RID",n),Ke(r,"AID",t.U),Hn(t,r),t.o&&t.s&&Vn(r,t.o,t.s),n=new ge(t,t.h,n,t.C+1),null===t.o&&(n.H=t.s),e&&(t.l=e.D.concat(t.l)),e=Qn(t,n,1e3),n.setTimeout(Math.round(.5*t.ra)+Math.round(.5*t.ra*Math.random())),dn(t.i,n),Ie(n,r,e)}function Hn(t,e){t.j&&Le({},(function(t,n){Ke(e,n,t)}))}function Qn(t,e,n){n=Math.min(t.l.length,n);var r=t.j?b(t.j.Oa,t.j,t):null;t:for(var s=t.l,i=-1;;){var o=["count="+n];-1==i?0<n?(i=s[0].h,o.push("ofs="+i)):i=0:o.push("ofs="+i);for(var a=!0,c=0;c<n;c++){var u=s[c].h,h=s[c].g;if(0>(u-=i))i=Math.max(0,s[c].h-100),a=!1;else try{yn(h,o,"req"+u+"_")}catch(t){r&&r(h)}}if(a){r=o.join("&");break t}}return t=t.l.splice(0,n),e.D=t,r}function Wn(t){t.g||t.u||(t.Y=1,Pt(t.Ga,t),t.A=0)}function Yn(t){return!(t.g||t.u||3<=t.A||(t.Y++,t.u=ie(b(t.Ga,t),er(t,t.A)),t.A++,0))}function Jn(t){null!=t.B&&(d.clearTimeout(t.B),t.B=null)}function Xn(t){t.g=new ge(t,t.h,"rpc",t.Y),null===t.o&&(t.g.H=t.s),t.g.O=0;var e=Ve(t.oa);Ke(e,"RID","rpc"),Ke(e,"SID",t.J),Ke(e,"CI",t.N?"0":"1"),Ke(e,"AID",t.U),Hn(t,e),Ke(e,"TYPE","xmlhttp"),t.o&&t.s&&Vn(e,t.o,t.s),t.K&&t.g.setTimeout(t.K);var n=t.g;t=t.la,n.K=1,n.v=ze(Ve(e)),n.s=null,n.U=!0,Ee(n,t)}function Zn(t){null!=t.v&&(d.clearTimeout(t.v),t.v=null)}function tr(t,e){var n=null;if(t.g==e){Zn(t),Jn(t),t.g=null;var r=2}else{if(!ln(t.i,e))return;n=e.D,fn(t.i,e),r=1}if(t.I=e.N,0!=t.G)if(e.i)if(1==r){n=e.s?e.s.length:0,e=Date.now()-e.F;var s=t.C;At(r=Zt(),new se(r,n,e,s)),$n(t)}else Wn(t);else if(3==(s=e.o)||0==s&&0<t.I||!(1==r&&function(t,e){return!(hn(t.i)>=t.i.j-(t.m?1:0)||(t.m?(t.l=e.D.concat(t.l),0):1==t.G||2==t.G||t.C>=(t.Xa?0:t.Ya)||(t.m=ie(b(t.Ha,t,e),er(t,t.C)),t.C++,0)))}(t,e)||2==r&&Yn(t)))switch(n&&0<n.length&&(e=t.i,e.i=e.i.concat(n)),s){case 1:nr(t,5);break;case 4:nr(t,10);break;case 3:nr(t,6);break;default:nr(t,2)}}function er(t,e){var n=t.Pa+Math.floor(Math.random()*t.$a);return t.j||(n*=2),n*e}function nr(t,e){if(t.h.info("Error code "+e),2==e){var n=null;t.j&&(n=null);var r=b(t.jb,t);n||(n=new Fe("//www.google.com/images/cleardot.gif"),d.location&&"http"==d.location.protocol||Ue(n,"https"),ze(n)),function(t,e){var n=new Wt;if(d.Image){var r=new Image;r.onload=I(vn,n,r,"TestLoadImage: loaded",!0,e),r.onerror=I(vn,n,r,"TestLoadImage: error",!1,e),r.onabort=I(vn,n,r,"TestLoadImage: abort",!1,e),r.ontimeout=I(vn,n,r,"TestLoadImage: timeout",!1,e),d.setTimeout((function(){r.ontimeout&&r.ontimeout()}),1e4),r.src=t}else e(!1)}(n.toString(),r)}else re(2);t.G=0,t.j&&t.j.va(e),rr(t),Kn(t)}function rr(t){t.G=0,t.I=-1,t.j&&(0==pn(t.i).length&&0==t.l.length||(t.i.i.length=0,D(t.l),t.l.length=0),t.j.ua())}function sr(t,e,n){var r=function(t){return t instanceof Fe?Ve(t):new Fe(t,void 0)}(n);if(""!=r.i)e&&qe(r,e+"."+r.i),Be(r,r.m);else{var s=d.location;r=function(t,e,n,r){var s=new Fe(null,void 0);return t&&Ue(s,t),e&&qe(s,e),n&&Be(s,n),r&&(s.l=r),s}(s.protocol,e?e+"."+s.hostname:s.hostname,+s.port,n)}return t.aa&&P(t.aa,(function(t,e){Ke(r,e,t)})),e=t.D,n=t.sa,e&&n&&Ke(r,e,n),Ke(r,"VER",t.ma),Hn(t,r),r}function ir(t,e,n){if(e&&!t.H)throw Error("Can't create secondary domain capable XhrIo object.");return(e=n&&t.Ba&&!t.qa?new Nn(new wn({ib:!0})):new Nn(t.qa)).L=t.H,e}function or(){}function ar(){if(z&&!(10<=Number(nt)))throw Error("Environmental error: no available transport.")}function cr(t,e){Nt.call(this),this.g=new qn(e),this.l=t,this.h=e&&e.messageUrlParams||null,t=e&&e.messageHeaders||null,e&&e.clientProtocolHeaderRequired&&(t?t["X-Client-Protocol"]="webchannel":t={"X-Client-Protocol":"webchannel"}),this.g.s=t,t=e&&e.initMessageHeaders||null,e&&e.messageContentType&&(t?t["X-WebChannel-Content-Type"]=e.messageContentType:t={"X-WebChannel-Content-Type":e.messageContentType}),e&&e.ya&&(t?t["X-WebChannel-Client-Profile"]=e.ya:t={"X-WebChannel-Client-Profile":e.ya}),this.g.P=t,(t=e&&e.httpHeadersOverwriteParam)&&!C(t)&&(this.g.o=t),this.A=e&&e.supportsCrossDomainXhr||!1,this.v=e&&e.sendRawJson||!1,(e=e&&e.httpSessionIdParam)&&!C(e)&&(this.g.D=e,null!==(t=this.h)&&e in t&&e in(t=this.h)&&delete t[e]),this.j=new lr(this)}function ur(t){fe.call(this);var e=t.__sm__;if(e){t:{for(var n in e){t=n;break t}t=void 0}(this.i=t)&&(t=this.i,e=null!==e&&t in e?e[t]:void 0),this.data=e}else this.data=t}function hr(){pe.call(this),this.status=1}function lr(t){this.g=t}(u=Nn.prototype).ea=function(t,e,n,r){if(this.g)throw Error("[goog.net.XhrIo] Object is active with another request="+this.H+"; newUri="+t);e=e?e.toUpperCase():"GET",this.H=t,this.j="",this.m=0,this.D=!1,this.h=!0,this.g=this.u?this.u.g():le.g(),this.C=this.u?ue(this.u):ue(le),this.g.onreadystatechange=b(this.Fa,this);try{this.F=!0,this.g.open(e,String(t),!0),this.F=!1}catch(t){return void xn(this,t)}t=n||"";var s=new Re(this.headers);r&&Le(r,(function(t,e){s.set(e,t)})),r=function(t){t:{for(var e=kn,n=t.length,r="string"==typeof t?t.split(""):t,s=0;s<n;s++)if(s in r&&e.call(void 0,r[s],s,t)){e=s;break t}e=-1}return 0>e?null:"string"==typeof t?t.charAt(e):t[e]}(s.T()),n=d.FormData&&t instanceof d.FormData,!(0<=_(Cn,e))||r||n||s.set("Content-Type","application/x-www-form-urlencoded;charset=utf-8"),s.forEach((function(t,e){this.g.setRequestHeader(e,t)}),this),this.J&&(this.g.responseType=this.J),"withCredentials"in this.g&&this.g.withCredentials!==this.L&&(this.g.withCredentials=this.L);try{Mn(this),0<this.B&&((this.K=function(t){return z&&et()&&"number"==typeof t.timeout&&void 0!==t.ontimeout}(this.g))?(this.g.timeout=this.B,this.g.ontimeout=b(this.pa,this)):this.A=jt(this.pa,this.B,this)),this.v=!0,this.g.send(t),this.v=!1}catch(t){xn(this,t)}},u.pa=function(){void 0!==l&&this.g&&(this.j="Timed out after "+this.B+"ms, aborting",this.m=8,At(this,"timeout"),this.abort(8))},u.abort=function(t){this.g&&this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1,this.m=t||7,At(this,"complete"),At(this,"abort"),On(this))},u.M=function(){this.g&&(this.h&&(this.h=!1,this.l=!0,this.g.abort(),this.l=!1),On(this,!0)),Nn.Z.M.call(this)},u.Fa=function(){this.s||(this.F||this.v||this.l?Rn(this):this.cb())},u.cb=function(){Rn(this)},u.ba=function(){try{return 2<Pn(this)?this.g.status:-1}catch(t){return-1}},u.ga=function(){try{return this.g?this.g.responseText:""}catch(t){return""}},u.Qa=function(t){if(this.g){var e=this.g.responseText;return t&&0==e.indexOf(t)&&(e=e.substring(t.length)),_n(e)}},u.Da=function(){return this.m},u.La=function(){return"string"==typeof this.j?this.j:String(this.j)},(u=qn.prototype).ma=8,u.G=1,u.hb=function(t){try{this.h.info("Origin Trials invoked: "+t)}catch(t){}},u.Ha=function(t){if(this.m)if(this.m=null,1==this.G){if(!t){this.V=Math.floor(1e5*Math.random()),t=this.V++;var e=new ge(this,this.h,t,void 0),n=this.s;if(this.P&&(n?U(n=F(n),this.P):n=this.P),null===this.o&&(e.H=n),this.ja)t:{for(var r=0,s=0;s<this.l.length;s++){var i=this.l[s];if(void 0===(i="__data__"in i.g&&"string"==typeof(i=i.g.__data__)?i.length:void 0))break;if(4096<(r+=i)){r=s;break t}if(4096===r||s===this.l.length-1){r=s+1;break t}}r=1e3}else r=1e3;r=Qn(this,e,r),Ke(s=Ve(this.F),"RID",t),Ke(s,"CVER",22),this.D&&Ke(s,"X-HTTP-Session-Id",this.D),Hn(this,s),this.o&&n&&Vn(s,this.o,n),dn(this.i,e),this.Ra&&Ke(s,"TYPE","init"),this.ja?(Ke(s,"$req",r),Ke(s,"SID","null"),e.$=!0,Ie(e,s,null)):Ie(e,s,r),this.G=2}}else 3==this.G&&(t?Gn(this,t):0==this.l.length||un(this.i)||Gn(this))},u.Ga=function(){if(this.u=null,Xn(this),this.$&&!(this.L||null==this.g||0>=this.O)){var t=2*this.O;this.h.info("BP detection timer enabled: "+t),this.B=ie(b(this.bb,this),t)}},u.bb=function(){this.B&&(this.B=null,this.h.info("BP detection timeout reached."),this.h.info("Buffering proxy detected and switch to long-polling!"),this.N=!1,this.L=!0,re(10),jn(this),Xn(this))},u.ab=function(){null!=this.v&&(this.v=null,jn(this),Yn(this),re(19))},u.jb=function(t){t?(this.h.info("Successfully pinged google.com"),re(2)):(this.h.info("Failed to ping google.com"),re(1))},(u=or.prototype).xa=function(){},u.wa=function(){},u.va=function(){},u.ua=function(){},u.Oa=function(){},ar.prototype.g=function(t,e){return new cr(t,e)},E(cr,Nt),cr.prototype.m=function(){this.g.j=this.j,this.A&&(this.g.H=!0);var t=this.g,e=this.l,n=this.h||void 0;t.Wa&&(t.h.info("Origin Trials enabled."),Pt(b(t.hb,t,e))),re(0),t.W=e,t.aa=n||{},t.N=t.X,t.F=sr(t,null,t.W),$n(t)},cr.prototype.close=function(){Bn(this.g)},cr.prototype.u=function(t){if("string"==typeof t){var e={};e.__data__=t,zn(this.g,e)}else this.v?((e={}).__data__=Ct(t),zn(this.g,e)):zn(this.g,t)},cr.prototype.M=function(){this.g.j=null,delete this.j,Bn(this.g),delete this.g,cr.Z.M.call(this)},E(ur,fe),E(hr,pe),E(lr,or),lr.prototype.xa=function(){At(this.g,"a")},lr.prototype.wa=function(t){At(this.g,new ur(t))},lr.prototype.va=function(t){At(this.g,new hr(t))},lr.prototype.ua=function(){At(this.g,"b")},ar.prototype.createWebChannel=ar.prototype.g,cr.prototype.send=cr.prototype.u,cr.prototype.open=cr.prototype.m,cr.prototype.close=cr.prototype.close,oe.NO_ERROR=0,oe.TIMEOUT=8,oe.HTTP_ERROR=6,ae.COMPLETE="complete",he.EventType=de,de.OPEN="a",de.CLOSE="b",de.ERROR="c",de.MESSAGE="d",Nt.prototype.listen=Nt.prototype.N,Nn.prototype.listenOnce=Nn.prototype.O,Nn.prototype.getLastError=Nn.prototype.La,Nn.prototype.getLastErrorCode=Nn.prototype.Da,Nn.prototype.getStatus=Nn.prototype.ba,Nn.prototype.getResponseJson=Nn.prototype.Qa,Nn.prototype.getResponseText=Nn.prototype.ga,Nn.prototype.send=Nn.prototype.ea;var dr=oe,fr=ae,pr=Jt,mr=10,gr=11,yr=wn,vr=he,wr=Nn;class br{constructor(t){this.uid=t}isAuthenticated(){return null!=this.uid}toKey(){return this.isAuthenticated()?"uid:"+this.uid:"anonymous-user"}isEqual(t){return t.uid===this.uid}}br.UNAUTHENTICATED=new br(null),br.GOOGLE_CREDENTIALS=new br("google-credentials-uid"),br.FIRST_PARTY=new br("first-party-uid"),br.MOCK_USER=new br("mock-user");let Ir="9.0.2";const Er=new i.Yd("@firebase/firestore");function Tr(){return Er.logLevel}function Sr(t){Er.setLogLevel(t)}function _r(t,...e){if(Er.logLevel<=i.in.DEBUG){const n=e.map(Dr);Er.debug(`Firestore (${Ir}): ${t}`,...n)}}function Nr(t,...e){if(Er.logLevel<=i.in.ERROR){const n=e.map(Dr);Er.error(`Firestore (${Ir}): ${t}`,...n)}}function Ar(t,...e){if(Er.logLevel<=i.in.WARN){const n=e.map(Dr);Er.warn(`Firestore (${Ir}): ${t}`,...n)}}function Dr(t){if("string"==typeof t)return t;try{return e=t,JSON.stringify(e)}catch(e){return t}var e}function Cr(t="Unexpected state"){const e=`FIRESTORE (${Ir}) INTERNAL ASSERTION FAILED: `+t;throw Nr(e),new Error(e)}function kr(t,e){t||Cr()}function xr(t,e){t||Cr()}function Lr(t,e){return t}const Rr={OK:"ok",CANCELLED:"cancelled",UNKNOWN:"unknown",INVALID_ARGUMENT:"invalid-argument",DEADLINE_EXCEEDED:"deadline-exceeded",NOT_FOUND:"not-found",ALREADY_EXISTS:"already-exists",PERMISSION_DENIED:"permission-denied",UNAUTHENTICATED:"unauthenticated",RESOURCE_EXHAUSTED:"resource-exhausted",FAILED_PRECONDITION:"failed-precondition",ABORTED:"aborted",OUT_OF_RANGE:"out-of-range",UNIMPLEMENTED:"unimplemented",INTERNAL:"internal",UNAVAILABLE:"unavailable",DATA_LOSS:"data-loss"};class Or extends Error{constructor(t,e){super(e),this.code=t,this.message=e,this.name="FirebaseError",this.toString=()=>`${this.name}: [code=${this.code}]: ${this.message}`}}class Mr{constructor(){this.promise=new Promise(((t,e)=>{this.resolve=t,this.reject=e}))}}class Pr{constructor(t,e){this.user=e,this.type="OAuth",this.authHeaders={},this.authHeaders.Authorization=`Bearer ${t}`}}class Fr{getToken(){return Promise.resolve(null)}invalidateToken(){}start(t,e){t.enqueueRetryable((()=>e(br.UNAUTHENTICATED)))}shutdown(){}}class Vr{constructor(t){this.token=t,this.changeListener=null}getToken(){return Promise.resolve(this.token)}invalidateToken(){}start(t,e){this.changeListener=e,t.enqueueRetryable((()=>e(this.token.user)))}shutdown(){this.changeListener=null}}class Ur{constructor(t){this.t=t,this.currentUser=br.UNAUTHENTICATED,this.i=0,this.forceRefresh=!1,this.auth=null}start(t,e){let n=this.i;const r=t=>this.i!==n?(n=this.i,e(t)):Promise.resolve();let s=new Mr;this.o=()=>{this.i++,this.currentUser=this.u(),s.resolve(),s=new Mr,t.enqueueRetryable((()=>r(this.currentUser)))};const i=()=>{const e=s;t.enqueueRetryable((async()=>{await e.promise,await r(this.currentUser)}))},o=t=>{_r("FirebaseCredentialsProvider","Auth detected"),this.auth=t,this.auth.addAuthTokenListener(this.o),i()};this.t.onInit((t=>o(t))),setTimeout((()=>{if(!this.auth){const t=this.t.getImmediate({optional:!0});t?o(t):(_r("FirebaseCredentialsProvider","Auth not yet detected"),s.resolve(),s=new Mr)}}),0),i()}getToken(){const t=this.i,e=this.forceRefresh;return this.forceRefresh=!1,this.auth?this.auth.getToken(e).then((e=>this.i!==t?(_r("FirebaseCredentialsProvider","getToken aborted due to token change."),this.getToken()):e?(kr("string"==typeof e.accessToken),new Pr(e.accessToken,this.currentUser)):null)):Promise.resolve(null)}invalidateToken(){this.forceRefresh=!0}shutdown(){this.auth&&this.auth.removeAuthTokenListener(this.o)}u(){const t=this.auth&&this.auth.getUid();return kr(null===t||"string"==typeof t),new br(t)}}class qr{constructor(t,e,n){this.h=t,this.l=e,this.m=n,this.type="FirstParty",this.user=br.FIRST_PARTY}get authHeaders(){const t={"X-Goog-AuthUser":this.l},e=this.h.auth.getAuthHeaderValueForFirstParty([]);return e&&(t.Authorization=e),this.m&&(t["X-Goog-Iam-Authorization-Token"]=this.m),t}}class Br{constructor(t,e,n){this.h=t,this.l=e,this.m=n}getToken(){return Promise.resolve(new qr(this.h,this.l,this.m))}start(t,e){t.enqueueRetryable((()=>e(br.FIRST_PARTY)))}shutdown(){}invalidateToken(){}}class jr{constructor(t,e){this.previousValue=t,e&&(e.sequenceNumberHandler=t=>this.g(t),this.p=t=>e.writeSequenceNumber(t))}g(t){return this.previousValue=Math.max(t,this.previousValue),this.previousValue}next(){const t=++this.previousValue;return this.p&&this.p(t),t}}function Kr(t){const e="undefined"!=typeof self&&(self.crypto||self.msCrypto),n=new Uint8Array(t);if(e&&"function"==typeof e.getRandomValues)e.getRandomValues(n);else for(let e=0;e<t;e++)n[e]=Math.floor(256*Math.random());return n}jr.T=-1;class zr{static I(){const t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",e=Math.floor(256/t.length)*t.length;let n="";for(;n.length<20;){const r=Kr(40);for(let s=0;s<r.length;++s)n.length<20&&r[s]<e&&(n+=t.charAt(r[s]%t.length))}return n}}function $r(t,e){return t<e?-1:t>e?1:0}function Gr(t,e,n){return t.length===e.length&&t.every(((t,r)=>n(t,e[r])))}function Hr(t){return t+"\0"}class Qr{constructor(t,e){if(this.seconds=t,this.nanoseconds=e,e<0)throw new Or(Rr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(e>=1e9)throw new Or(Rr.INVALID_ARGUMENT,"Timestamp nanoseconds out of range: "+e);if(t<-62135596800)throw new Or(Rr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t);if(t>=253402300800)throw new Or(Rr.INVALID_ARGUMENT,"Timestamp seconds out of range: "+t)}static now(){return Qr.fromMillis(Date.now())}static fromDate(t){return Qr.fromMillis(t.getTime())}static fromMillis(t){const e=Math.floor(t/1e3),n=Math.floor(1e6*(t-1e3*e));return new Qr(e,n)}toDate(){return new Date(this.toMillis())}toMillis(){return 1e3*this.seconds+this.nanoseconds/1e6}_compareTo(t){return this.seconds===t.seconds?$r(this.nanoseconds,t.nanoseconds):$r(this.seconds,t.seconds)}isEqual(t){return t.seconds===this.seconds&&t.nanoseconds===this.nanoseconds}toString(){return"Timestamp(seconds="+this.seconds+", nanoseconds="+this.nanoseconds+")"}toJSON(){return{seconds:this.seconds,nanoseconds:this.nanoseconds}}valueOf(){const t=this.seconds- -62135596800;return String(t).padStart(12,"0")+"."+String(this.nanoseconds).padStart(9,"0")}}class Wr{constructor(t){this.timestamp=t}static fromTimestamp(t){return new Wr(t)}static min(){return new Wr(new Qr(0,0))}compareTo(t){return this.timestamp._compareTo(t.timestamp)}isEqual(t){return this.timestamp.isEqual(t.timestamp)}toMicroseconds(){return 1e6*this.timestamp.seconds+this.timestamp.nanoseconds/1e3}toString(){return"SnapshotVersion("+this.timestamp.toString()+")"}toTimestamp(){return this.timestamp}}function Yr(t){let e=0;for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e++;return e}function Jr(t,e){for(const n in t)Object.prototype.hasOwnProperty.call(t,n)&&e(n,t[n])}function Xr(t){for(const e in t)if(Object.prototype.hasOwnProperty.call(t,e))return!1;return!0}class Zr{constructor(t,e,n){void 0===e?e=0:e>t.length&&Cr(),void 0===n?n=t.length-e:n>t.length-e&&Cr(),this.segments=t,this.offset=e,this.len=n}get length(){return this.len}isEqual(t){return 0===Zr.comparator(this,t)}child(t){const e=this.segments.slice(this.offset,this.limit());return t instanceof Zr?t.forEach((t=>{e.push(t)})):e.push(t),this.construct(e)}limit(){return this.offset+this.length}popFirst(t){return t=void 0===t?1:t,this.construct(this.segments,this.offset+t,this.length-t)}popLast(){return this.construct(this.segments,this.offset,this.length-1)}firstSegment(){return this.segments[this.offset]}lastSegment(){return this.get(this.length-1)}get(t){return this.segments[this.offset+t]}isEmpty(){return 0===this.length}isPrefixOf(t){if(t.length<this.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}isImmediateParentOf(t){if(this.length+1!==t.length)return!1;for(let e=0;e<this.length;e++)if(this.get(e)!==t.get(e))return!1;return!0}forEach(t){for(let e=this.offset,n=this.limit();e<n;e++)t(this.segments[e])}toArray(){return this.segments.slice(this.offset,this.limit())}static comparator(t,e){const n=Math.min(t.length,e.length);for(let r=0;r<n;r++){const n=t.get(r),s=e.get(r);if(n<s)return-1;if(n>s)return 1}return t.length<e.length?-1:t.length>e.length?1:0}}class ts extends Zr{construct(t,e,n){return new ts(t,e,n)}canonicalString(){return this.toArray().join("/")}toString(){return this.canonicalString()}static fromString(...t){const e=[];for(const n of t){if(n.indexOf("//")>=0)throw new Or(Rr.INVALID_ARGUMENT,`Invalid segment (${n}). Paths must not contain // in them.`);e.push(...n.split("/").filter((t=>t.length>0)))}return new ts(e)}static emptyPath(){return new ts([])}}const es=/^[_a-zA-Z][_a-zA-Z0-9]*$/;class ns extends Zr{construct(t,e,n){return new ns(t,e,n)}static isValidIdentifier(t){return es.test(t)}canonicalString(){return this.toArray().map((t=>(t=t.replace(/\\/g,"\\\\").replace(/`/g,"\\`"),ns.isValidIdentifier(t)||(t="`"+t+"`"),t))).join(".")}toString(){return this.canonicalString()}isKeyField(){return 1===this.length&&"__name__"===this.get(0)}static keyField(){return new ns(["__name__"])}static fromServerFormat(t){const e=[];let n="",r=0;const s=()=>{if(0===n.length)throw new Or(Rr.INVALID_ARGUMENT,`Invalid field path (${t}). Paths must not be empty, begin with '.', end with '.', or contain '..'`);e.push(n),n=""};let i=!1;for(;r<t.length;){const e=t[r];if("\\"===e){if(r+1===t.length)throw new Or(Rr.INVALID_ARGUMENT,"Path has trailing escape character: "+t);const e=t[r+1];if("\\"!==e&&"."!==e&&"`"!==e)throw new Or(Rr.INVALID_ARGUMENT,"Path has invalid escape sequence: "+t);n+=e,r+=2}else"`"===e?(i=!i,r++):"."!==e||i?(n+=e,r++):(s(),r++)}if(s(),i)throw new Or(Rr.INVALID_ARGUMENT,"Unterminated ` in path: "+t);return new ns(e)}static emptyPath(){return new ns([])}}class rs{constructor(t){this.fields=t,t.sort(ns.comparator)}covers(t){for(const e of this.fields)if(e.isPrefixOf(t))return!0;return!1}isEqual(t){return Gr(this.fields,t.fields,((t,e)=>t.isEqual(e)))}}function ss(){return"undefined"!=typeof atob}class is{constructor(t){this.binaryString=t}static fromBase64String(t){const e=atob(t);return new is(e)}static fromUint8Array(t){const e=function(t){let e="";for(let n=0;n<t.length;++n)e+=String.fromCharCode(t[n]);return e}(t);return new is(e)}toBase64(){return t=this.binaryString,btoa(t);var t}toUint8Array(){return function(t){const e=new Uint8Array(t.length);for(let n=0;n<t.length;n++)e[n]=t.charCodeAt(n);return e}(this.binaryString)}approximateByteSize(){return 2*this.binaryString.length}compareTo(t){return $r(this.binaryString,t.binaryString)}isEqual(t){return this.binaryString===t.binaryString}}is.EMPTY_BYTE_STRING=new is("");const os=new RegExp(/^\d{4}-\d\d-\d\dT\d\d:\d\d:\d\d(?:\.(\d+))?Z$/);function as(t){if(kr(!!t),"string"==typeof t){let e=0;const n=os.exec(t);if(kr(!!n),n[1]){let t=n[1];t=(t+"000000000").substr(0,9),e=Number(t)}const r=new Date(t);return{seconds:Math.floor(r.getTime()/1e3),nanos:e}}return{seconds:cs(t.seconds),nanos:cs(t.nanos)}}function cs(t){return"number"==typeof t?t:"string"==typeof t?Number(t):0}function us(t){return"string"==typeof t?is.fromBase64String(t):is.fromUint8Array(t)}function hs(t){var e,n;return"server_timestamp"===(null===(n=((null===(e=null==t?void 0:t.mapValue)||void 0===e?void 0:e.fields)||{}).__type__)||void 0===n?void 0:n.stringValue)}function ls(t){const e=t.mapValue.fields.__previous_value__;return hs(e)?ls(e):e}function ds(t){const e=as(t.mapValue.fields.__local_write_time__.timestampValue);return new Qr(e.seconds,e.nanos)}function fs(t){return null==t}function ps(t){return 0===t&&1/t==-1/0}function ms(t){return"number"==typeof t&&Number.isInteger(t)&&!ps(t)&&t<=Number.MAX_SAFE_INTEGER&&t>=Number.MIN_SAFE_INTEGER}class gs{constructor(t){this.path=t}static fromPath(t){return new gs(ts.fromString(t))}static fromName(t){return new gs(ts.fromString(t).popFirst(5))}hasCollectionId(t){return this.path.length>=2&&this.path.get(this.path.length-2)===t}isEqual(t){return null!==t&&0===ts.comparator(this.path,t.path)}toString(){return this.path.toString()}static comparator(t,e){return ts.comparator(t.path,e.path)}static isDocumentKey(t){return t.length%2==0}static fromSegments(t){return new gs(new ts(t.slice()))}}function ys(t){return"nullValue"in t?0:"booleanValue"in t?1:"integerValue"in t||"doubleValue"in t?2:"timestampValue"in t?3:"stringValue"in t?5:"bytesValue"in t?6:"referenceValue"in t?7:"geoPointValue"in t?8:"arrayValue"in t?9:"mapValue"in t?hs(t)?4:10:Cr()}function vs(t,e){const n=ys(t);if(n!==ys(e))return!1;switch(n){case 0:return!0;case 1:return t.booleanValue===e.booleanValue;case 4:return ds(t).isEqual(ds(e));case 3:return function(t,e){if("string"==typeof t.timestampValue&&"string"==typeof e.timestampValue&&t.timestampValue.length===e.timestampValue.length)return t.timestampValue===e.timestampValue;const n=as(t.timestampValue),r=as(e.timestampValue);return n.seconds===r.seconds&&n.nanos===r.nanos}(t,e);case 5:return t.stringValue===e.stringValue;case 6:return function(t,e){return us(t.bytesValue).isEqual(us(e.bytesValue))}(t,e);case 7:return t.referenceValue===e.referenceValue;case 8:return function(t,e){return cs(t.geoPointValue.latitude)===cs(e.geoPointValue.latitude)&&cs(t.geoPointValue.longitude)===cs(e.geoPointValue.longitude)}(t,e);case 2:return function(t,e){if("integerValue"in t&&"integerValue"in e)return cs(t.integerValue)===cs(e.integerValue);if("doubleValue"in t&&"doubleValue"in e){const n=cs(t.doubleValue),r=cs(e.doubleValue);return n===r?ps(n)===ps(r):isNaN(n)&&isNaN(r)}return!1}(t,e);case 9:return Gr(t.arrayValue.values||[],e.arrayValue.values||[],vs);case 10:return function(t,e){const n=t.mapValue.fields||{},r=e.mapValue.fields||{};if(Yr(n)!==Yr(r))return!1;for(const t in n)if(n.hasOwnProperty(t)&&(void 0===r[t]||!vs(n[t],r[t])))return!1;return!0}(t,e);default:return Cr()}}function ws(t,e){return void 0!==(t.values||[]).find((t=>vs(t,e)))}function bs(t,e){const n=ys(t),r=ys(e);if(n!==r)return $r(n,r);switch(n){case 0:return 0;case 1:return $r(t.booleanValue,e.booleanValue);case 2:return function(t,e){const n=cs(t.integerValue||t.doubleValue),r=cs(e.integerValue||e.doubleValue);return n<r?-1:n>r?1:n===r?0:isNaN(n)?isNaN(r)?0:-1:1}(t,e);case 3:return Is(t.timestampValue,e.timestampValue);case 4:return Is(ds(t),ds(e));case 5:return $r(t.stringValue,e.stringValue);case 6:return function(t,e){const n=us(t),r=us(e);return n.compareTo(r)}(t.bytesValue,e.bytesValue);case 7:return function(t,e){const n=t.split("/"),r=e.split("/");for(let t=0;t<n.length&&t<r.length;t++){const e=$r(n[t],r[t]);if(0!==e)return e}return $r(n.length,r.length)}(t.referenceValue,e.referenceValue);case 8:return function(t,e){const n=$r(cs(t.latitude),cs(e.latitude));return 0!==n?n:$r(cs(t.longitude),cs(e.longitude))}(t.geoPointValue,e.geoPointValue);case 9:return function(t,e){const n=t.values||[],r=e.values||[];for(let t=0;t<n.length&&t<r.length;++t){const e=bs(n[t],r[t]);if(e)return e}return $r(n.length,r.length)}(t.arrayValue,e.arrayValue);case 10:return function(t,e){const n=t.fields||{},r=Object.keys(n),s=e.fields||{},i=Object.keys(s);r.sort(),i.sort();for(let t=0;t<r.length&&t<i.length;++t){const e=$r(r[t],i[t]);if(0!==e)return e;const o=bs(n[r[t]],s[i[t]]);if(0!==o)return o}return $r(r.length,i.length)}(t.mapValue,e.mapValue);default:throw Cr()}}function Is(t,e){if("string"==typeof t&&"string"==typeof e&&t.length===e.length)return $r(t,e);const n=as(t),r=as(e),s=$r(n.seconds,r.seconds);return 0!==s?s:$r(n.nanos,r.nanos)}function Es(t){return Ts(t)}function Ts(t){return"nullValue"in t?"null":"booleanValue"in t?""+t.booleanValue:"integerValue"in t?""+t.integerValue:"doubleValue"in t?""+t.doubleValue:"timestampValue"in t?function(t){const e=as(t);return`time(${e.seconds},${e.nanos})`}(t.timestampValue):"stringValue"in t?t.stringValue:"bytesValue"in t?us(t.bytesValue).toBase64():"referenceValue"in t?(n=t.referenceValue,gs.fromName(n).toString()):"geoPointValue"in t?`geo(${(e=t.geoPointValue).latitude},${e.longitude})`:"arrayValue"in t?function(t){let e="[",n=!0;for(const r of t.values||[])n?n=!1:e+=",",e+=Ts(r);return e+"]"}(t.arrayValue):"mapValue"in t?function(t){const e=Object.keys(t.fields||{}).sort();let n="{",r=!0;for(const s of e)r?r=!1:n+=",",n+=`${s}:${Ts(t.fields[s])}`;return n+"}"}(t.mapValue):Cr();var e,n}function Ss(t,e){return{referenceValue:`projects/${t.projectId}/databases/${t.database}/documents/${e.path.canonicalString()}`}}function _s(t){return!!t&&"integerValue"in t}function Ns(t){return!!t&&"arrayValue"in t}function As(t){return!!t&&"nullValue"in t}function Ds(t){return!!t&&"doubleValue"in t&&isNaN(Number(t.doubleValue))}function Cs(t){return!!t&&"mapValue"in t}function ks(t){if(t.geoPointValue)return{geoPointValue:Object.assign({},t.geoPointValue)};if(t.timestampValue&&"object"==typeof t.timestampValue)return{timestampValue:Object.assign({},t.timestampValue)};if(t.mapValue){const e={mapValue:{fields:{}}};return Jr(t.mapValue.fields,((t,n)=>e.mapValue.fields[t]=ks(n))),e}if(t.arrayValue){const e={arrayValue:{values:[]}};for(let n=0;n<(t.arrayValue.values||[]).length;++n)e.arrayValue.values[n]=ks(t.arrayValue.values[n]);return e}return Object.assign({},t)}class xs{constructor(t){this.value=t}static empty(){return new xs({mapValue:{}})}field(t){if(t.isEmpty())return this.value;{let e=this.value;for(let n=0;n<t.length-1;++n)if(e=(e.mapValue.fields||{})[t.get(n)],!Cs(e))return null;return e=(e.mapValue.fields||{})[t.lastSegment()],e||null}}set(t,e){this.getFieldsMap(t.popLast())[t.lastSegment()]=ks(e)}setAll(t){let e=ns.emptyPath(),n={},r=[];t.forEach(((t,s)=>{if(!e.isImmediateParentOf(s)){const t=this.getFieldsMap(e);this.applyChanges(t,n,r),n={},r=[],e=s.popLast()}t?n[s.lastSegment()]=ks(t):r.push(s.lastSegment())}));const s=this.getFieldsMap(e);this.applyChanges(s,n,r)}delete(t){const e=this.field(t.popLast());Cs(e)&&e.mapValue.fields&&delete e.mapValue.fields[t.lastSegment()]}isEqual(t){return vs(this.value,t.value)}getFieldsMap(t){let e=this.value;e.mapValue.fields||(e.mapValue={fields:{}});for(let n=0;n<t.length;++n){let r=e.mapValue.fields[t.get(n)];Cs(r)&&r.mapValue.fields||(r={mapValue:{fields:{}}},e.mapValue.fields[t.get(n)]=r),e=r}return e.mapValue.fields}applyChanges(t,e,n){Jr(e,((e,n)=>t[e]=n));for(const e of n)delete t[e]}clone(){return new xs(ks(this.value))}}function Ls(t){const e=[];return Jr(t.fields,((t,n)=>{const r=new ns([t]);if(Cs(n)){const t=Ls(n.mapValue).fields;if(0===t.length)e.push(r);else for(const n of t)e.push(r.child(n))}else e.push(r)})),new rs(e)}class Rs{constructor(t,e,n,r,s){this.key=t,this.documentType=e,this.version=n,this.data=r,this.documentState=s}static newInvalidDocument(t){return new Rs(t,0,Wr.min(),xs.empty(),0)}static newFoundDocument(t,e,n){return new Rs(t,1,e,n,0)}static newNoDocument(t,e){return new Rs(t,2,e,xs.empty(),0)}static newUnknownDocument(t,e){return new Rs(t,3,e,xs.empty(),2)}convertToFoundDocument(t,e){return this.version=t,this.documentType=1,this.data=e,this.documentState=0,this}convertToNoDocument(t){return this.version=t,this.documentType=2,this.data=xs.empty(),this.documentState=0,this}convertToUnknownDocument(t){return this.version=t,this.documentType=3,this.data=xs.empty(),this.documentState=2,this}setHasCommittedMutations(){return this.documentState=2,this}setHasLocalMutations(){return this.documentState=1,this}get hasLocalMutations(){return 1===this.documentState}get hasCommittedMutations(){return 2===this.documentState}get hasPendingWrites(){return this.hasLocalMutations||this.hasCommittedMutations}isValidDocument(){return 0!==this.documentType}isFoundDocument(){return 1===this.documentType}isNoDocument(){return 2===this.documentType}isUnknownDocument(){return 3===this.documentType}isEqual(t){return t instanceof Rs&&this.key.isEqual(t.key)&&this.version.isEqual(t.version)&&this.documentType===t.documentType&&this.documentState===t.documentState&&this.data.isEqual(t.data)}clone(){return new Rs(this.key,this.documentType,this.version,this.data.clone(),this.documentState)}toString(){return`Document(${this.key}, ${this.version}, ${JSON.stringify(this.data.value)}, {documentType: ${this.documentType}}), {documentState: ${this.documentState}})`}}class Os{constructor(t,e=null,n=[],r=[],s=null,i=null,o=null){this.path=t,this.collectionGroup=e,this.orderBy=n,this.filters=r,this.limit=s,this.startAt=i,this.endAt=o,this.A=null}}function Ms(t,e=null,n=[],r=[],s=null,i=null,o=null){return new Os(t,e,n,r,s,i,o)}function Ps(t){const e=Lr(t);if(null===e.A){let t=e.path.canonicalString();null!==e.collectionGroup&&(t+="|cg:"+e.collectionGroup),t+="|f:",t+=e.filters.map((t=>function(t){return t.field.canonicalString()+t.op.toString()+Es(t.value)}(t))).join(","),t+="|ob:",t+=e.orderBy.map((t=>function(t){return t.field.canonicalString()+t.dir}(t))).join(","),fs(e.limit)||(t+="|l:",t+=e.limit),e.startAt&&(t+="|lb:",t+=Ws(e.startAt)),e.endAt&&(t+="|ub:",t+=Ws(e.endAt)),e.A=t}return e.A}function Fs(t,e){if(t.limit!==e.limit)return!1;if(t.orderBy.length!==e.orderBy.length)return!1;for(let n=0;n<t.orderBy.length;n++)if(!Js(t.orderBy[n],e.orderBy[n]))return!1;if(t.filters.length!==e.filters.length)return!1;for(let s=0;s<t.filters.length;s++)if(n=t.filters[s],r=e.filters[s],n.op!==r.op||!n.field.isEqual(r.field)||!vs(n.value,r.value))return!1;var n,r;return t.collectionGroup===e.collectionGroup&&!!t.path.isEqual(e.path)&&!!Zs(t.startAt,e.startAt)&&Zs(t.endAt,e.endAt)}function Vs(t){return gs.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}class Us extends class{}{constructor(t,e,n){super(),this.field=t,this.op=e,this.value=n}static create(t,e,n){return t.isKeyField()?"in"===e||"not-in"===e?this.R(t,e,n):new qs(t,e,n):"array-contains"===e?new zs(t,n):"in"===e?new $s(t,n):"not-in"===e?new Gs(t,n):"array-contains-any"===e?new Hs(t,n):new Us(t,e,n)}static R(t,e,n){return"in"===e?new Bs(t,n):new js(t,n)}matches(t){const e=t.data.field(this.field);return"!="===this.op?null!==e&&this.P(bs(e,this.value)):null!==e&&ys(this.value)===ys(e)&&this.P(bs(e,this.value))}P(t){switch(this.op){case"<":return t<0;case"<=":return t<=0;case"==":return 0===t;case"!=":return 0!==t;case">":return t>0;case">=":return t>=0;default:return Cr()}}v(){return["<","<=",">",">=","!=","not-in"].indexOf(this.op)>=0}}class qs extends Us{constructor(t,e,n){super(t,e,n),this.key=gs.fromName(n.referenceValue)}matches(t){const e=gs.comparator(t.key,this.key);return this.P(e)}}class Bs extends Us{constructor(t,e){super(t,"in",e),this.keys=Ks(0,e)}matches(t){return this.keys.some((e=>e.isEqual(t.key)))}}class js extends Us{constructor(t,e){super(t,"not-in",e),this.keys=Ks(0,e)}matches(t){return!this.keys.some((e=>e.isEqual(t.key)))}}function Ks(t,e){var n;return((null===(n=e.arrayValue)||void 0===n?void 0:n.values)||[]).map((t=>gs.fromName(t.referenceValue)))}class zs extends Us{constructor(t,e){super(t,"array-contains",e)}matches(t){const e=t.data.field(this.field);return Ns(e)&&ws(e.arrayValue,this.value)}}class $s extends Us{constructor(t,e){super(t,"in",e)}matches(t){const e=t.data.field(this.field);return null!==e&&ws(this.value.arrayValue,e)}}class Gs extends Us{constructor(t,e){super(t,"not-in",e)}matches(t){if(ws(this.value.arrayValue,{nullValue:"NULL_VALUE"}))return!1;const e=t.data.field(this.field);return null!==e&&!ws(this.value.arrayValue,e)}}class Hs extends Us{constructor(t,e){super(t,"array-contains-any",e)}matches(t){const e=t.data.field(this.field);return!(!Ns(e)||!e.arrayValue.values)&&e.arrayValue.values.some((t=>ws(this.value.arrayValue,t)))}}class Qs{constructor(t,e){this.position=t,this.before=e}}function Ws(t){return`${t.before?"b":"a"}:${t.position.map((t=>Es(t))).join(",")}`}class Ys{constructor(t,e="asc"){this.field=t,this.dir=e}}function Js(t,e){return t.dir===e.dir&&t.field.isEqual(e.field)}function Xs(t,e,n){let r=0;for(let s=0;s<t.position.length;s++){const i=e[s],o=t.position[s];if(r=i.field.isKeyField()?gs.comparator(gs.fromName(o.referenceValue),n.key):bs(o,n.data.field(i.field)),"desc"===i.dir&&(r*=-1),0!==r)break}return t.before?r<=0:r<0}function Zs(t,e){if(null===t)return null===e;if(null===e)return!1;if(t.before!==e.before||t.position.length!==e.position.length)return!1;for(let n=0;n<t.position.length;n++)if(!vs(t.position[n],e.position[n]))return!1;return!0}class ti{constructor(t,e=null,n=[],r=[],s=null,i="F",o=null,a=null){this.path=t,this.collectionGroup=e,this.explicitOrderBy=n,this.filters=r,this.limit=s,this.limitType=i,this.startAt=o,this.endAt=a,this.V=null,this.S=null,this.startAt,this.endAt}}function ei(t,e,n,r,s,i,o,a){return new ti(t,e,n,r,s,i,o,a)}function ni(t){return new ti(t)}function ri(t){return!fs(t.limit)&&"F"===t.limitType}function si(t){return!fs(t.limit)&&"L"===t.limitType}function ii(t){return t.explicitOrderBy.length>0?t.explicitOrderBy[0].field:null}function oi(t){for(const e of t.filters)if(e.v())return e.field;return null}function ai(t){return null!==t.collectionGroup}function ci(t){const e=Lr(t);if(null===e.V){e.V=[];const t=oi(e),n=ii(e);if(null!==t&&null===n)t.isKeyField()||e.V.push(new Ys(t)),e.V.push(new Ys(ns.keyField(),"asc"));else{let t=!1;for(const n of e.explicitOrderBy)e.V.push(n),n.field.isKeyField()&&(t=!0);if(!t){const t=e.explicitOrderBy.length>0?e.explicitOrderBy[e.explicitOrderBy.length-1].dir:"asc";e.V.push(new Ys(ns.keyField(),t))}}}return e.V}function ui(t){const e=Lr(t);if(!e.S)if("F"===e.limitType)e.S=Ms(e.path,e.collectionGroup,ci(e),e.filters,e.limit,e.startAt,e.endAt);else{const t=[];for(const n of ci(e)){const e="desc"===n.dir?"asc":"desc";t.push(new Ys(n.field,e))}const n=e.endAt?new Qs(e.endAt.position,!e.endAt.before):null,r=e.startAt?new Qs(e.startAt.position,!e.startAt.before):null;e.S=Ms(e.path,e.collectionGroup,t,e.filters,e.limit,n,r)}return e.S}function hi(t,e,n){return new ti(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),e,n,t.startAt,t.endAt)}function li(t,e){return Fs(ui(t),ui(e))&&t.limitType===e.limitType}function di(t){return`${Ps(ui(t))}|lt:${t.limitType}`}function fi(t){return`Query(target=${function(t){let e=t.path.canonicalString();return null!==t.collectionGroup&&(e+=" collectionGroup="+t.collectionGroup),t.filters.length>0&&(e+=`, filters: [${t.filters.map((t=>{return`${(e=t).field.canonicalString()} ${e.op} ${Es(e.value)}`;var e})).join(", ")}]`),fs(t.limit)||(e+=", limit: "+t.limit),t.orderBy.length>0&&(e+=`, orderBy: [${t.orderBy.map((t=>function(t){return`${t.field.canonicalString()} (${t.dir})`}(t))).join(", ")}]`),t.startAt&&(e+=", startAt: "+Ws(t.startAt)),t.endAt&&(e+=", endAt: "+Ws(t.endAt)),`Target(${e})`}(ui(t))}; limitType=${t.limitType})`}function pi(t,e){return e.isFoundDocument()&&function(t,e){const n=e.key.path;return null!==t.collectionGroup?e.key.hasCollectionId(t.collectionGroup)&&t.path.isPrefixOf(n):gs.isDocumentKey(t.path)?t.path.isEqual(n):t.path.isImmediateParentOf(n)}(t,e)&&function(t,e){for(const n of t.explicitOrderBy)if(!n.field.isKeyField()&&null===e.data.field(n.field))return!1;return!0}(t,e)&&function(t,e){for(const n of t.filters)if(!n.matches(e))return!1;return!0}(t,e)&&function(t,e){return!(t.startAt&&!Xs(t.startAt,ci(t),e)||t.endAt&&Xs(t.endAt,ci(t),e))}(t,e)}function mi(t){return(e,n)=>{let r=!1;for(const s of ci(t)){const t=gi(s,e,n);if(0!==t)return t;r=r||s.field.isKeyField()}return 0}}function gi(t,e,n){const r=t.field.isKeyField()?gs.comparator(e.key,n.key):function(t,e,n){const r=e.data.field(t),s=n.data.field(t);return null!==r&&null!==s?bs(r,s):Cr()}(t.field,e,n);switch(t.dir){case"asc":return r;case"desc":return-1*r;default:return Cr()}}function yi(t,e){if(t.D){if(isNaN(e))return{doubleValue:"NaN"};if(e===1/0)return{doubleValue:"Infinity"};if(e===-1/0)return{doubleValue:"-Infinity"}}return{doubleValue:ps(e)?"-0":e}}function vi(t){return{integerValue:""+t}}function wi(t,e){return ms(e)?vi(e):yi(t,e)}class bi{constructor(){this._=void 0}}function Ii(t,e,n){return t instanceof Si?function(t,e){const n={fields:{__type__:{stringValue:"server_timestamp"},__local_write_time__:{timestampValue:{seconds:t.seconds,nanos:t.nanoseconds}}}};return e&&(n.fields.__previous_value__=e),{mapValue:n}}(n,e):t instanceof _i?Ni(t,e):t instanceof Ai?Di(t,e):function(t,e){const n=Ti(t,e),r=ki(n)+ki(t.C);return _s(n)&&_s(t.C)?vi(r):yi(t.N,r)}(t,e)}function Ei(t,e,n){return t instanceof _i?Ni(t,e):t instanceof Ai?Di(t,e):n}function Ti(t,e){return t instanceof Ci?_s(n=e)||function(t){return!!t&&"doubleValue"in t}(n)?e:{integerValue:0}:null;var n}class Si extends bi{}class _i extends bi{constructor(t){super(),this.elements=t}}function Ni(t,e){const n=xi(e);for(const e of t.elements)n.some((t=>vs(t,e)))||n.push(e);return{arrayValue:{values:n}}}class Ai extends bi{constructor(t){super(),this.elements=t}}function Di(t,e){let n=xi(e);for(const e of t.elements)n=n.filter((t=>!vs(t,e)));return{arrayValue:{values:n}}}class Ci extends bi{constructor(t,e){super(),this.N=t,this.C=e}}function ki(t){return cs(t.integerValue||t.doubleValue)}function xi(t){return Ns(t)&&t.arrayValue.values?t.arrayValue.values.slice():[]}class Li{constructor(t,e){this.field=t,this.transform=e}}class Ri{constructor(t,e){this.version=t,this.transformResults=e}}class Oi{constructor(t,e){this.updateTime=t,this.exists=e}static none(){return new Oi}static exists(t){return new Oi(void 0,t)}static updateTime(t){return new Oi(t)}get isNone(){return void 0===this.updateTime&&void 0===this.exists}isEqual(t){return this.exists===t.exists&&(this.updateTime?!!t.updateTime&&this.updateTime.isEqual(t.updateTime):!t.updateTime)}}function Mi(t,e){return void 0!==t.updateTime?e.isFoundDocument()&&e.version.isEqual(t.updateTime):void 0===t.exists||t.exists===e.isFoundDocument()}class Pi{}function Fi(t,e,n){t instanceof ji?function(t,e,n){const r=t.value.clone(),s=$i(t.fieldTransforms,e,n.transformResults);r.setAll(s),e.convertToFoundDocument(n.version,r).setHasCommittedMutations()}(t,e,n):t instanceof Ki?function(t,e,n){if(!Mi(t.precondition,e))return void e.convertToUnknownDocument(n.version);const r=$i(t.fieldTransforms,e,n.transformResults),s=e.data;s.setAll(zi(t)),s.setAll(r),e.convertToFoundDocument(n.version,s).setHasCommittedMutations()}(t,e,n):function(t,e,n){e.convertToNoDocument(n.version).setHasCommittedMutations()}(0,e,n)}function Vi(t,e,n){t instanceof ji?function(t,e,n){if(!Mi(t.precondition,e))return;const r=t.value.clone(),s=Gi(t.fieldTransforms,n,e);r.setAll(s),e.convertToFoundDocument(Bi(e),r).setHasLocalMutations()}(t,e,n):t instanceof Ki?function(t,e,n){if(!Mi(t.precondition,e))return;const r=Gi(t.fieldTransforms,n,e),s=e.data;s.setAll(zi(t)),s.setAll(r),e.convertToFoundDocument(Bi(e),s).setHasLocalMutations()}(t,e,n):function(t,e){Mi(t.precondition,e)&&e.convertToNoDocument(Wr.min())}(t,e)}function Ui(t,e){let n=null;for(const r of t.fieldTransforms){const t=e.data.field(r.field),s=Ti(r.transform,t||null);null!=s&&(null==n&&(n=xs.empty()),n.set(r.field,s))}return n||null}function qi(t,e){return t.type===e.type&&!!t.key.isEqual(e.key)&&!!t.precondition.isEqual(e.precondition)&&!!function(t,e){return void 0===t&&void 0===e||!(!t||!e)&&Gr(t,e,((t,e)=>function(t,e){return t.field.isEqual(e.field)&&function(t,e){return t instanceof _i&&e instanceof _i||t instanceof Ai&&e instanceof Ai?Gr(t.elements,e.elements,vs):t instanceof Ci&&e instanceof Ci?vs(t.C,e.C):t instanceof Si&&e instanceof Si}(t.transform,e.transform)}(t,e)))}(t.fieldTransforms,e.fieldTransforms)&&(0===t.type?t.value.isEqual(e.value):1!==t.type||t.data.isEqual(e.data)&&t.fieldMask.isEqual(e.fieldMask))}function Bi(t){return t.isFoundDocument()?t.version:Wr.min()}class ji extends Pi{constructor(t,e,n,r=[]){super(),this.key=t,this.value=e,this.precondition=n,this.fieldTransforms=r,this.type=0}}class Ki extends Pi{constructor(t,e,n,r,s=[]){super(),this.key=t,this.data=e,this.fieldMask=n,this.precondition=r,this.fieldTransforms=s,this.type=1}}function zi(t){const e=new Map;return t.fieldMask.fields.forEach((n=>{if(!n.isEmpty()){const r=t.data.field(n);e.set(n,r)}})),e}function $i(t,e,n){const r=new Map;kr(t.length===n.length);for(let s=0;s<n.length;s++){const i=t[s],o=i.transform,a=e.data.field(i.field);r.set(i.field,Ei(o,a,n[s]))}return r}function Gi(t,e,n){const r=new Map;for(const s of t){const t=s.transform,i=n.data.field(s.field);r.set(s.field,Ii(t,i,e))}return r}class Hi extends Pi{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=2,this.fieldTransforms=[]}}class Qi extends Pi{constructor(t,e){super(),this.key=t,this.precondition=e,this.type=3,this.fieldTransforms=[]}}class Wi{constructor(t){this.count=t}}var Yi,Ji;function Xi(t){switch(t){case Rr.OK:return Cr();case Rr.CANCELLED:case Rr.UNKNOWN:case Rr.DEADLINE_EXCEEDED:case Rr.RESOURCE_EXHAUSTED:case Rr.INTERNAL:case Rr.UNAVAILABLE:case Rr.UNAUTHENTICATED:return!1;case Rr.INVALID_ARGUMENT:case Rr.NOT_FOUND:case Rr.ALREADY_EXISTS:case Rr.PERMISSION_DENIED:case Rr.FAILED_PRECONDITION:case Rr.ABORTED:case Rr.OUT_OF_RANGE:case Rr.UNIMPLEMENTED:case Rr.DATA_LOSS:return!0;default:return Cr()}}function Zi(t){if(void 0===t)return Nr("GRPC error has no .code"),Rr.UNKNOWN;switch(t){case Yi.OK:return Rr.OK;case Yi.CANCELLED:return Rr.CANCELLED;case Yi.UNKNOWN:return Rr.UNKNOWN;case Yi.DEADLINE_EXCEEDED:return Rr.DEADLINE_EXCEEDED;case Yi.RESOURCE_EXHAUSTED:return Rr.RESOURCE_EXHAUSTED;case Yi.INTERNAL:return Rr.INTERNAL;case Yi.UNAVAILABLE:return Rr.UNAVAILABLE;case Yi.UNAUTHENTICATED:return Rr.UNAUTHENTICATED;case Yi.INVALID_ARGUMENT:return Rr.INVALID_ARGUMENT;case Yi.NOT_FOUND:return Rr.NOT_FOUND;case Yi.ALREADY_EXISTS:return Rr.ALREADY_EXISTS;case Yi.PERMISSION_DENIED:return Rr.PERMISSION_DENIED;case Yi.FAILED_PRECONDITION:return Rr.FAILED_PRECONDITION;case Yi.ABORTED:return Rr.ABORTED;case Yi.OUT_OF_RANGE:return Rr.OUT_OF_RANGE;case Yi.UNIMPLEMENTED:return Rr.UNIMPLEMENTED;case Yi.DATA_LOSS:return Rr.DATA_LOSS;default:return Cr()}}(Ji=Yi||(Yi={}))[Ji.OK=0]="OK",Ji[Ji.CANCELLED=1]="CANCELLED",Ji[Ji.UNKNOWN=2]="UNKNOWN",Ji[Ji.INVALID_ARGUMENT=3]="INVALID_ARGUMENT",Ji[Ji.DEADLINE_EXCEEDED=4]="DEADLINE_EXCEEDED",Ji[Ji.NOT_FOUND=5]="NOT_FOUND",Ji[Ji.ALREADY_EXISTS=6]="ALREADY_EXISTS",Ji[Ji.PERMISSION_DENIED=7]="PERMISSION_DENIED",Ji[Ji.UNAUTHENTICATED=16]="UNAUTHENTICATED",Ji[Ji.RESOURCE_EXHAUSTED=8]="RESOURCE_EXHAUSTED",Ji[Ji.FAILED_PRECONDITION=9]="FAILED_PRECONDITION",Ji[Ji.ABORTED=10]="ABORTED",Ji[Ji.OUT_OF_RANGE=11]="OUT_OF_RANGE",Ji[Ji.UNIMPLEMENTED=12]="UNIMPLEMENTED",Ji[Ji.INTERNAL=13]="INTERNAL",Ji[Ji.UNAVAILABLE=14]="UNAVAILABLE",Ji[Ji.DATA_LOSS=15]="DATA_LOSS";class to{constructor(t,e){this.comparator=t,this.root=e||no.EMPTY}insert(t,e){return new to(this.comparator,this.root.insert(t,e,this.comparator).copy(null,null,no.BLACK,null,null))}remove(t){return new to(this.comparator,this.root.remove(t,this.comparator).copy(null,null,no.BLACK,null,null))}get(t){let e=this.root;for(;!e.isEmpty();){const n=this.comparator(t,e.key);if(0===n)return e.value;n<0?e=e.left:n>0&&(e=e.right)}return null}indexOf(t){let e=0,n=this.root;for(;!n.isEmpty();){const r=this.comparator(t,n.key);if(0===r)return e+n.left.size;r<0?n=n.left:(e+=n.left.size+1,n=n.right)}return-1}isEmpty(){return this.root.isEmpty()}get size(){return this.root.size}minKey(){return this.root.minKey()}maxKey(){return this.root.maxKey()}inorderTraversal(t){return this.root.inorderTraversal(t)}forEach(t){this.inorderTraversal(((e,n)=>(t(e,n),!1)))}toString(){const t=[];return this.inorderTraversal(((e,n)=>(t.push(`${e}:${n}`),!1))),`{${t.join(", ")}}`}reverseTraversal(t){return this.root.reverseTraversal(t)}getIterator(){return new eo(this.root,null,this.comparator,!1)}getIteratorFrom(t){return new eo(this.root,t,this.comparator,!1)}getReverseIterator(){return new eo(this.root,null,this.comparator,!0)}getReverseIteratorFrom(t){return new eo(this.root,t,this.comparator,!0)}}class eo{constructor(t,e,n,r){this.isReverse=r,this.nodeStack=[];let s=1;for(;!t.isEmpty();)if(s=e?n(t.key,e):1,r&&(s*=-1),s<0)t=this.isReverse?t.left:t.right;else{if(0===s){this.nodeStack.push(t);break}this.nodeStack.push(t),t=this.isReverse?t.right:t.left}}getNext(){let t=this.nodeStack.pop();const e={key:t.key,value:t.value};if(this.isReverse)for(t=t.left;!t.isEmpty();)this.nodeStack.push(t),t=t.right;else for(t=t.right;!t.isEmpty();)this.nodeStack.push(t),t=t.left;return e}hasNext(){return this.nodeStack.length>0}peek(){if(0===this.nodeStack.length)return null;const t=this.nodeStack[this.nodeStack.length-1];return{key:t.key,value:t.value}}}class no{constructor(t,e,n,r,s){this.key=t,this.value=e,this.color=null!=n?n:no.RED,this.left=null!=r?r:no.EMPTY,this.right=null!=s?s:no.EMPTY,this.size=this.left.size+1+this.right.size}copy(t,e,n,r,s){return new no(null!=t?t:this.key,null!=e?e:this.value,null!=n?n:this.color,null!=r?r:this.left,null!=s?s:this.right)}isEmpty(){return!1}inorderTraversal(t){return this.left.inorderTraversal(t)||t(this.key,this.value)||this.right.inorderTraversal(t)}reverseTraversal(t){return this.right.reverseTraversal(t)||t(this.key,this.value)||this.left.reverseTraversal(t)}min(){return this.left.isEmpty()?this:this.left.min()}minKey(){return this.min().key}maxKey(){return this.right.isEmpty()?this.key:this.right.maxKey()}insert(t,e,n){let r=this;const s=n(t,r.key);return r=s<0?r.copy(null,null,null,r.left.insert(t,e,n),null):0===s?r.copy(null,e,null,null,null):r.copy(null,null,null,null,r.right.insert(t,e,n)),r.fixUp()}removeMin(){if(this.left.isEmpty())return no.EMPTY;let t=this;return t.left.isRed()||t.left.left.isRed()||(t=t.moveRedLeft()),t=t.copy(null,null,null,t.left.removeMin(),null),t.fixUp()}remove(t,e){let n,r=this;if(e(t,r.key)<0)r.left.isEmpty()||r.left.isRed()||r.left.left.isRed()||(r=r.moveRedLeft()),r=r.copy(null,null,null,r.left.remove(t,e),null);else{if(r.left.isRed()&&(r=r.rotateRight()),r.right.isEmpty()||r.right.isRed()||r.right.left.isRed()||(r=r.moveRedRight()),0===e(t,r.key)){if(r.right.isEmpty())return no.EMPTY;n=r.right.min(),r=r.copy(n.key,n.value,null,null,r.right.removeMin())}r=r.copy(null,null,null,null,r.right.remove(t,e))}return r.fixUp()}isRed(){return this.color}fixUp(){let t=this;return t.right.isRed()&&!t.left.isRed()&&(t=t.rotateLeft()),t.left.isRed()&&t.left.left.isRed()&&(t=t.rotateRight()),t.left.isRed()&&t.right.isRed()&&(t=t.colorFlip()),t}moveRedLeft(){let t=this.colorFlip();return t.right.left.isRed()&&(t=t.copy(null,null,null,null,t.right.rotateRight()),t=t.rotateLeft(),t=t.colorFlip()),t}moveRedRight(){let t=this.colorFlip();return t.left.left.isRed()&&(t=t.rotateRight(),t=t.colorFlip()),t}rotateLeft(){const t=this.copy(null,null,no.RED,null,this.right.left);return this.right.copy(null,null,this.color,t,null)}rotateRight(){const t=this.copy(null,null,no.RED,this.left.right,null);return this.left.copy(null,null,this.color,null,t)}colorFlip(){const t=this.left.copy(null,null,!this.left.color,null,null),e=this.right.copy(null,null,!this.right.color,null,null);return this.copy(null,null,!this.color,t,e)}checkMaxDepth(){const t=this.check();return Math.pow(2,t)<=this.size+1}check(){if(this.isRed()&&this.left.isRed())throw Cr();if(this.right.isRed())throw Cr();const t=this.left.check();if(t!==this.right.check())throw Cr();return t+(this.isRed()?0:1)}}no.EMPTY=null,no.RED=!0,no.BLACK=!1,no.EMPTY=new class{constructor(){this.size=0}get key(){throw Cr()}get value(){throw Cr()}get color(){throw Cr()}get left(){throw Cr()}get right(){throw Cr()}copy(t,e,n,r,s){return this}insert(t,e,n){return new no(t,e)}remove(t,e){return this}isEmpty(){return!0}inorderTraversal(t){return!1}reverseTraversal(t){return!1}minKey(){return null}maxKey(){return null}isRed(){return!1}checkMaxDepth(){return!0}check(){return 0}};class ro{constructor(t){this.comparator=t,this.data=new to(this.comparator)}has(t){return null!==this.data.get(t)}first(){return this.data.minKey()}last(){return this.data.maxKey()}get size(){return this.data.size}indexOf(t){return this.data.indexOf(t)}forEach(t){this.data.inorderTraversal(((e,n)=>(t(e),!1)))}forEachInRange(t,e){const n=this.data.getIteratorFrom(t[0]);for(;n.hasNext();){const r=n.getNext();if(this.comparator(r.key,t[1])>=0)return;e(r.key)}}forEachWhile(t,e){let n;for(n=void 0!==e?this.data.getIteratorFrom(e):this.data.getIterator();n.hasNext();)if(!t(n.getNext().key))return}firstAfterOrEqual(t){const e=this.data.getIteratorFrom(t);return e.hasNext()?e.getNext().key:null}getIterator(){return new so(this.data.getIterator())}getIteratorFrom(t){return new so(this.data.getIteratorFrom(t))}add(t){return this.copy(this.data.remove(t).insert(t,!0))}delete(t){return this.has(t)?this.copy(this.data.remove(t)):this}isEmpty(){return this.data.isEmpty()}unionWith(t){let e=this;return e.size<t.size&&(e=t,t=this),t.forEach((t=>{e=e.add(t)})),e}isEqual(t){if(!(t instanceof ro))return!1;if(this.size!==t.size)return!1;const e=this.data.getIterator(),n=t.data.getIterator();for(;e.hasNext();){const t=e.getNext().key,r=n.getNext().key;if(0!==this.comparator(t,r))return!1}return!0}toArray(){const t=[];return this.forEach((e=>{t.push(e)})),t}toString(){const t=[];return this.forEach((e=>t.push(e))),"SortedSet("+t.toString()+")"}copy(t){const e=new ro(this.comparator);return e.data=t,e}}class so{constructor(t){this.iter=t}getNext(){return this.iter.getNext().key}hasNext(){return this.iter.hasNext()}}const io=new to(gs.comparator);function oo(){return io}const ao=new to(gs.comparator);function co(){return ao}const uo=new to(gs.comparator);function ho(){return uo}const lo=new ro(gs.comparator);function fo(...t){let e=lo;for(const n of t)e=e.add(n);return e}const po=new ro($r);function mo(){return po}class go{constructor(t,e,n,r,s){this.snapshotVersion=t,this.targetChanges=e,this.targetMismatches=n,this.documentUpdates=r,this.resolvedLimboDocuments=s}static createSynthesizedRemoteEventForCurrentChange(t,e){const n=new Map;return n.set(t,yo.createSynthesizedTargetChangeForCurrentChange(t,e)),new go(Wr.min(),n,mo(),oo(),fo())}}class yo{constructor(t,e,n,r,s){this.resumeToken=t,this.current=e,this.addedDocuments=n,this.modifiedDocuments=r,this.removedDocuments=s}static createSynthesizedTargetChangeForCurrentChange(t,e){return new yo(is.EMPTY_BYTE_STRING,e,fo(),fo(),fo())}}class vo{constructor(t,e,n,r){this.k=t,this.removedTargetIds=e,this.key=n,this.$=r}}class wo{constructor(t,e){this.targetId=t,this.O=e}}class bo{constructor(t,e,n=is.EMPTY_BYTE_STRING,r=null){this.state=t,this.targetIds=e,this.resumeToken=n,this.cause=r}}class Io{constructor(){this.F=0,this.M=So(),this.L=is.EMPTY_BYTE_STRING,this.B=!1,this.U=!0}get current(){return this.B}get resumeToken(){return this.L}get q(){return 0!==this.F}get K(){return this.U}j(t){t.approximateByteSize()>0&&(this.U=!0,this.L=t)}W(){let t=fo(),e=fo(),n=fo();return this.M.forEach(((r,s)=>{switch(s){case 0:t=t.add(r);break;case 2:e=e.add(r);break;case 1:n=n.add(r);break;default:Cr()}})),new yo(this.L,this.B,t,e,n)}G(){this.U=!1,this.M=So()}H(t,e){this.U=!0,this.M=this.M.insert(t,e)}J(t){this.U=!0,this.M=this.M.remove(t)}Y(){this.F+=1}X(){this.F-=1}Z(){this.U=!0,this.B=!0}}class Eo{constructor(t){this.tt=t,this.et=new Map,this.nt=oo(),this.st=To(),this.it=new ro($r)}rt(t){for(const e of t.k)t.$&&t.$.isFoundDocument()?this.ot(e,t.$):this.at(e,t.key,t.$);for(const e of t.removedTargetIds)this.at(e,t.key,t.$)}ct(t){this.forEachTarget(t,(e=>{const n=this.ut(e);switch(t.state){case 0:this.ht(e)&&n.j(t.resumeToken);break;case 1:n.X(),n.q||n.G(),n.j(t.resumeToken);break;case 2:n.X(),n.q||this.removeTarget(e);break;case 3:this.ht(e)&&(n.Z(),n.j(t.resumeToken));break;case 4:this.ht(e)&&(this.lt(e),n.j(t.resumeToken));break;default:Cr()}}))}forEachTarget(t,e){t.targetIds.length>0?t.targetIds.forEach(e):this.et.forEach(((t,n)=>{this.ht(n)&&e(n)}))}ft(t){const e=t.targetId,n=t.O.count,r=this.dt(e);if(r){const t=r.target;if(Vs(t))if(0===n){const n=new gs(t.path);this.at(e,n,Rs.newNoDocument(n,Wr.min()))}else kr(1===n);else this.wt(e)!==n&&(this.lt(e),this.it=this.it.add(e))}}_t(t){const e=new Map;this.et.forEach(((n,r)=>{const s=this.dt(r);if(s){if(n.current&&Vs(s.target)){const e=new gs(s.target.path);null!==this.nt.get(e)||this.gt(r,e)||this.at(r,e,Rs.newNoDocument(e,t))}n.K&&(e.set(r,n.W()),n.G())}}));let n=fo();this.st.forEach(((t,e)=>{let r=!0;e.forEachWhile((t=>{const e=this.dt(t);return!e||2===e.purpose||(r=!1,!1)})),r&&(n=n.add(t))}));const r=new go(t,e,this.it,this.nt,n);return this.nt=oo(),this.st=To(),this.it=new ro($r),r}ot(t,e){if(!this.ht(t))return;const n=this.gt(t,e.key)?2:0;this.ut(t).H(e.key,n),this.nt=this.nt.insert(e.key,e),this.st=this.st.insert(e.key,this.yt(e.key).add(t))}at(t,e,n){if(!this.ht(t))return;const r=this.ut(t);this.gt(t,e)?r.H(e,1):r.J(e),this.st=this.st.insert(e,this.yt(e).delete(t)),n&&(this.nt=this.nt.insert(e,n))}removeTarget(t){this.et.delete(t)}wt(t){const e=this.ut(t).W();return this.tt.getRemoteKeysForTarget(t).size+e.addedDocuments.size-e.removedDocuments.size}Y(t){this.ut(t).Y()}ut(t){let e=this.et.get(t);return e||(e=new Io,this.et.set(t,e)),e}yt(t){let e=this.st.get(t);return e||(e=new ro($r),this.st=this.st.insert(t,e)),e}ht(t){const e=null!==this.dt(t);return e||_r("WatchChangeAggregator","Detected inactive target",t),e}dt(t){const e=this.et.get(t);return e&&e.q?null:this.tt.Et(t)}lt(t){this.et.set(t,new Io),this.tt.getRemoteKeysForTarget(t).forEach((e=>{this.at(t,e,null)}))}gt(t,e){return this.tt.getRemoteKeysForTarget(t).has(e)}}function To(){return new to(gs.comparator)}function So(){return new to(gs.comparator)}const _o={asc:"ASCENDING",desc:"DESCENDING"},No={"<":"LESS_THAN","<=":"LESS_THAN_OR_EQUAL",">":"GREATER_THAN",">=":"GREATER_THAN_OR_EQUAL","==":"EQUAL","!=":"NOT_EQUAL","array-contains":"ARRAY_CONTAINS",in:"IN","not-in":"NOT_IN","array-contains-any":"ARRAY_CONTAINS_ANY"};class Ao{constructor(t,e){this.databaseId=t,this.D=e}}function Do(t,e){return t.D?`${new Date(1e3*e.seconds).toISOString().replace(/\.\d*/,"").replace("Z","")}.${("000000000"+e.nanoseconds).slice(-9)}Z`:{seconds:""+e.seconds,nanos:e.nanoseconds}}function Co(t,e){return t.D?e.toBase64():e.toUint8Array()}function ko(t,e){return Do(t,e.toTimestamp())}function xo(t){return kr(!!t),Wr.fromTimestamp(function(t){const e=as(t);return new Qr(e.seconds,e.nanos)}(t))}function Lo(t,e){return function(t){return new ts(["projects",t.projectId,"databases",t.database])}(t).child("documents").child(e).canonicalString()}function Ro(t){const e=ts.fromString(t);return kr(ra(e)),e}function Oo(t,e){return Lo(t.databaseId,e.path)}function Mo(t,e){const n=Ro(e);if(n.get(1)!==t.databaseId.projectId)throw new Or(Rr.INVALID_ARGUMENT,"Tried to deserialize key from different project: "+n.get(1)+" vs "+t.databaseId.projectId);if(n.get(3)!==t.databaseId.database)throw new Or(Rr.INVALID_ARGUMENT,"Tried to deserialize key from different database: "+n.get(3)+" vs "+t.databaseId.database);return new gs(Uo(n))}function Po(t,e){return Lo(t.databaseId,e)}function Fo(t){const e=Ro(t);return 4===e.length?ts.emptyPath():Uo(e)}function Vo(t){return new ts(["projects",t.databaseId.projectId,"databases",t.databaseId.database]).canonicalString()}function Uo(t){return kr(t.length>4&&"documents"===t.get(4)),t.popFirst(5)}function qo(t,e,n){return{name:Oo(t,e),fields:n.value.mapValue.fields}}function Bo(t,e,n){const r=Mo(t,e.name),s=xo(e.updateTime),i=new xs({mapValue:{fields:e.fields}}),o=Rs.newFoundDocument(r,s,i);return n&&o.setHasCommittedMutations(),n?o.setHasCommittedMutations():o}function jo(t,e){let n;if(e instanceof ji)n={update:qo(t,e.key,e.value)};else if(e instanceof Hi)n={delete:Oo(t,e.key)};else if(e instanceof Ki)n={update:qo(t,e.key,e.data),updateMask:na(e.fieldMask)};else{if(!(e instanceof Qi))return Cr();n={verify:Oo(t,e.key)}}return e.fieldTransforms.length>0&&(n.updateTransforms=e.fieldTransforms.map((t=>function(t,e){const n=e.transform;if(n instanceof Si)return{fieldPath:e.field.canonicalString(),setToServerValue:"REQUEST_TIME"};if(n instanceof _i)return{fieldPath:e.field.canonicalString(),appendMissingElements:{values:n.elements}};if(n instanceof Ai)return{fieldPath:e.field.canonicalString(),removeAllFromArray:{values:n.elements}};if(n instanceof Ci)return{fieldPath:e.field.canonicalString(),increment:n.C};throw Cr()}(0,t)))),e.precondition.isNone||(n.currentDocument=function(t,e){return void 0!==e.updateTime?{updateTime:ko(t,e.updateTime)}:void 0!==e.exists?{exists:e.exists}:Cr()}(t,e.precondition)),n}function Ko(t,e){const n=e.currentDocument?function(t){return void 0!==t.updateTime?Oi.updateTime(xo(t.updateTime)):void 0!==t.exists?Oi.exists(t.exists):Oi.none()}(e.currentDocument):Oi.none(),r=e.updateTransforms?e.updateTransforms.map((e=>function(t,e){let n=null;if("setToServerValue"in e)kr("REQUEST_TIME"===e.setToServerValue),n=new Si;else if("appendMissingElements"in e){const t=e.appendMissingElements.values||[];n=new _i(t)}else if("removeAllFromArray"in e){const t=e.removeAllFromArray.values||[];n=new Ai(t)}else"increment"in e?n=new Ci(t,e.increment):Cr();const r=ns.fromServerFormat(e.fieldPath);return new Li(r,n)}(t,e))):[];if(e.update){e.update.name;const s=Mo(t,e.update.name),i=new xs({mapValue:{fields:e.update.fields}});if(e.updateMask){const t=function(t){const e=t.fieldPaths||[];return new rs(e.map((t=>ns.fromServerFormat(t))))}(e.updateMask);return new Ki(s,i,t,n,r)}return new ji(s,i,n,r)}if(e.delete){const r=Mo(t,e.delete);return new Hi(r,n)}if(e.verify){const r=Mo(t,e.verify);return new Qi(r,n)}return Cr()}function zo(t,e){return{documents:[Po(t,e.path)]}}function $o(t,e){const n={structuredQuery:{}},r=e.path;null!==e.collectionGroup?(n.parent=Po(t,r),n.structuredQuery.from=[{collectionId:e.collectionGroup,allDescendants:!0}]):(n.parent=Po(t,r.popLast()),n.structuredQuery.from=[{collectionId:r.lastSegment()}]);const s=function(t){if(0===t.length)return;const e=t.map((t=>function(t){if("=="===t.op){if(Ds(t.value))return{unaryFilter:{field:Xo(t.field),op:"IS_NAN"}};if(As(t.value))return{unaryFilter:{field:Xo(t.field),op:"IS_NULL"}}}else if("!="===t.op){if(Ds(t.value))return{unaryFilter:{field:Xo(t.field),op:"IS_NOT_NAN"}};if(As(t.value))return{unaryFilter:{field:Xo(t.field),op:"IS_NOT_NULL"}}}return{fieldFilter:{field:Xo(t.field),op:Jo(t.op),value:t.value}}}(t)));return 1===e.length?e[0]:{compositeFilter:{op:"AND",filters:e}}}(e.filters);s&&(n.structuredQuery.where=s);const i=function(t){if(0!==t.length)return t.map((t=>function(t){return{field:Xo(t.field),direction:Yo(t.dir)}}(t)))}(e.orderBy);i&&(n.structuredQuery.orderBy=i);const o=function(t,e){return t.D||fs(e)?e:{value:e}}(t,e.limit);return null!==o&&(n.structuredQuery.limit=o),e.startAt&&(n.structuredQuery.startAt=Qo(e.startAt)),e.endAt&&(n.structuredQuery.endAt=Qo(e.endAt)),n}function Go(t){let e=Fo(t.parent);const n=t.structuredQuery,r=n.from?n.from.length:0;let s=null;if(r>0){kr(1===r);const t=n.from[0];t.allDescendants?s=t.collectionId:e=e.child(t.collectionId)}let i=[];n.where&&(i=Ho(n.where));let o=[];n.orderBy&&(o=n.orderBy.map((t=>function(t){return new Ys(Zo(t.field),function(t){switch(t){case"ASCENDING":return"asc";case"DESCENDING":return"desc";default:return}}(t.direction))}(t))));let a=null;n.limit&&(a=function(t){let e;return e="object"==typeof t?t.value:t,fs(e)?null:e}(n.limit));let c=null;n.startAt&&(c=Wo(n.startAt));let u=null;return n.endAt&&(u=Wo(n.endAt)),ei(e,s,o,i,a,"F",c,u)}function Ho(t){return t?void 0!==t.unaryFilter?[ea(t)]:void 0!==t.fieldFilter?[ta(t)]:void 0!==t.compositeFilter?t.compositeFilter.filters.map((t=>Ho(t))).reduce(((t,e)=>t.concat(e))):Cr():[]}function Qo(t){return{before:t.before,values:t.position}}function Wo(t){const e=!!t.before,n=t.values||[];return new Qs(n,e)}function Yo(t){return _o[t]}function Jo(t){return No[t]}function Xo(t){return{fieldPath:t.canonicalString()}}function Zo(t){return ns.fromServerFormat(t.fieldPath)}function ta(t){return Us.create(Zo(t.fieldFilter.field),function(t){switch(t){case"EQUAL":return"==";case"NOT_EQUAL":return"!=";case"GREATER_THAN":return">";case"GREATER_THAN_OR_EQUAL":return">=";case"LESS_THAN":return"<";case"LESS_THAN_OR_EQUAL":return"<=";case"ARRAY_CONTAINS":return"array-contains";case"IN":return"in";case"NOT_IN":return"not-in";case"ARRAY_CONTAINS_ANY":return"array-contains-any";default:return Cr()}}(t.fieldFilter.op),t.fieldFilter.value)}function ea(t){switch(t.unaryFilter.op){case"IS_NAN":const e=Zo(t.unaryFilter.field);return Us.create(e,"==",{doubleValue:NaN});case"IS_NULL":const n=Zo(t.unaryFilter.field);return Us.create(n,"==",{nullValue:"NULL_VALUE"});case"IS_NOT_NAN":const r=Zo(t.unaryFilter.field);return Us.create(r,"!=",{doubleValue:NaN});case"IS_NOT_NULL":const s=Zo(t.unaryFilter.field);return Us.create(s,"!=",{nullValue:"NULL_VALUE"});default:return Cr()}}function na(t){const e=[];return t.fields.forEach((t=>e.push(t.canonicalString()))),{fieldPaths:e}}function ra(t){return t.length>=4&&"projects"===t.get(0)&&"databases"===t.get(2)}function sa(t){let e="";for(let n=0;n<t.length;n++)e.length>0&&(e=oa(e)),e=ia(t.get(n),e);return oa(e)}function ia(t,e){let n=e;const r=t.length;for(let e=0;e<r;e++){const r=t.charAt(e);switch(r){case"\0":n+="";break;case"":n+="";break;default:n+=r}}return n}function oa(t){return t+""}function aa(t){const e=t.length;if(kr(e>=2),2===e)return kr(""===t.charAt(0)&&""===t.charAt(1)),ts.emptyPath();const n=e-2,r=[];let s="";for(let i=0;i<e;){const e=t.indexOf("",i);switch((e<0||e>n)&&Cr(),t.charAt(e+1)){case"":const n=t.substring(i,e);let o;0===s.length?o=n:(s+=n,o=s,s=""),r.push(o);break;case"":s+=t.substring(i,e),s+="\0";break;case"":s+=t.substring(i,e+1);break;default:Cr()}i=e+2}return new ts(r)}class ca{constructor(t,e){this.seconds=t,this.nanoseconds=e}}class ua{constructor(t,e,n){this.ownerId=t,this.allowTabSynchronization=e,this.leaseTimestampMs=n}}ua.store="owner",ua.key="owner";class ha{constructor(t,e,n){this.userId=t,this.lastAcknowledgedBatchId=e,this.lastStreamToken=n}}ha.store="mutationQueues",ha.keyPath="userId";class la{constructor(t,e,n,r,s){this.userId=t,this.batchId=e,this.localWriteTimeMs=n,this.baseMutations=r,this.mutations=s}}la.store="mutations",la.keyPath="batchId",la.userMutationsIndex="userMutationsIndex",la.userMutationsKeyPath=["userId","batchId"];class da{constructor(){}static prefixForUser(t){return[t]}static prefixForPath(t,e){return[t,sa(e)]}static key(t,e,n){return[t,sa(e),n]}}da.store="documentMutations",da.PLACEHOLDER=new da;class fa{constructor(t,e){this.path=t,this.readTime=e}}class pa{constructor(t,e){this.path=t,this.version=e}}class ma{constructor(t,e,n,r,s,i){this.unknownDocument=t,this.noDocument=e,this.document=n,this.hasCommittedMutations=r,this.readTime=s,this.parentPath=i}}ma.store="remoteDocuments",ma.readTimeIndex="readTimeIndex",ma.readTimeIndexPath="readTime",ma.collectionReadTimeIndex="collectionReadTimeIndex",ma.collectionReadTimeIndexPath=["parentPath","readTime"];class ga{constructor(t){this.byteSize=t}}ga.store="remoteDocumentGlobal",ga.key="remoteDocumentGlobalKey";class ya{constructor(t,e,n,r,s,i,o){this.targetId=t,this.canonicalId=e,this.readTime=n,this.resumeToken=r,this.lastListenSequenceNumber=s,this.lastLimboFreeSnapshotVersion=i,this.query=o}}ya.store="targets",ya.keyPath="targetId",ya.queryTargetsIndexName="queryTargetsIndex",ya.queryTargetsKeyPath=["canonicalId","targetId"];class va{constructor(t,e,n){this.targetId=t,this.path=e,this.sequenceNumber=n}}va.store="targetDocuments",va.keyPath=["targetId","path"],va.documentTargetsIndex="documentTargetsIndex",va.documentTargetsKeyPath=["path","targetId"];class wa{constructor(t,e,n,r){this.highestTargetId=t,this.highestListenSequenceNumber=e,this.lastRemoteSnapshotVersion=n,this.targetCount=r}}wa.key="targetGlobalKey",wa.store="targetGlobal";class ba{constructor(t,e){this.collectionId=t,this.parent=e}}ba.store="collectionParents",ba.keyPath=["collectionId","parent"];class Ia{constructor(t,e,n,r){this.clientId=t,this.updateTimeMs=e,this.networkEnabled=n,this.inForeground=r}}Ia.store="clientMetadata",Ia.keyPath="clientId";class Ea{constructor(t,e,n){this.bundleId=t,this.createTime=e,this.version=n}}Ea.store="bundles",Ea.keyPath="bundleId";class Ta{constructor(t,e,n){this.name=t,this.readTime=e,this.bundledQuery=n}}Ta.store="namedQueries",Ta.keyPath="name";const Sa=[ha.store,la.store,da.store,ma.store,ya.store,ua.store,wa.store,va.store,Ia.store,ga.store,ba.store,Ea.store,Ta.store],_a="The current tab is not in the required state to perform this operation. It might be necessary to refresh the browser tab.";class Na{constructor(){this.onCommittedListeners=[]}addOnCommittedListener(t){this.onCommittedListeners.push(t)}raiseOnCommittedEvent(){this.onCommittedListeners.forEach((t=>t()))}}class Aa{constructor(t){this.nextCallback=null,this.catchCallback=null,this.result=void 0,this.error=void 0,this.isDone=!1,this.callbackAttached=!1,t((t=>{this.isDone=!0,this.result=t,this.nextCallback&&this.nextCallback(t)}),(t=>{this.isDone=!0,this.error=t,this.catchCallback&&this.catchCallback(t)}))}catch(t){return this.next(void 0,t)}next(t,e){return this.callbackAttached&&Cr(),this.callbackAttached=!0,this.isDone?this.error?this.wrapFailure(e,this.error):this.wrapSuccess(t,this.result):new Aa(((n,r)=>{this.nextCallback=e=>{this.wrapSuccess(t,e).next(n,r)},this.catchCallback=t=>{this.wrapFailure(e,t).next(n,r)}}))}toPromise(){return new Promise(((t,e)=>{this.next(t,e)}))}wrapUserFunction(t){try{const e=t();return e instanceof Aa?e:Aa.resolve(e)}catch(t){return Aa.reject(t)}}wrapSuccess(t,e){return t?this.wrapUserFunction((()=>t(e))):Aa.resolve(e)}wrapFailure(t,e){return t?this.wrapUserFunction((()=>t(e))):Aa.reject(e)}static resolve(t){return new Aa(((e,n)=>{e(t)}))}static reject(t){return new Aa(((e,n)=>{n(t)}))}static waitFor(t){return new Aa(((e,n)=>{let r=0,s=0,i=!1;t.forEach((t=>{++r,t.next((()=>{++s,i&&s===r&&e()}),(t=>n(t)))})),i=!0,s===r&&e()}))}static or(t){let e=Aa.resolve(!1);for(const n of t)e=e.next((t=>t?Aa.resolve(t):n()));return e}static forEach(t,e){const n=[];return t.forEach(((t,r)=>{n.push(e.call(this,t,r))})),this.waitFor(n)}}class Da{constructor(t,e){this.action=t,this.transaction=e,this.aborted=!1,this.Tt=new Mr,this.transaction.oncomplete=()=>{this.Tt.resolve()},this.transaction.onabort=()=>{e.error?this.Tt.reject(new xa(t,e.error)):this.Tt.resolve()},this.transaction.onerror=e=>{const n=Pa(e.target.error);this.Tt.reject(new xa(t,n))}}static open(t,e,n,r){try{return new Da(e,t.transaction(r,n))}catch(t){throw new xa(e,t)}}get It(){return this.Tt.promise}abort(t){t&&this.Tt.reject(t),this.aborted||(_r("SimpleDb","Aborting transaction:",t?t.message:"Client-initiated abort"),this.aborted=!0,this.transaction.abort())}store(t){const e=this.transaction.objectStore(t);return new Ra(e)}}class Ca{constructor(t,e,n){this.name=t,this.version=e,this.At=n,12.2===Ca.Rt((0,o.z$)())&&Nr("Firestore persistence suffers from a bug in iOS 12.2 Safari that may cause your app to stop working. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.")}static delete(t){return _r("SimpleDb","Removing database:",t),Oa(window.indexedDB.deleteDatabase(t)).toPromise()}static bt(){if("undefined"==typeof indexedDB)return!1;if(Ca.Pt())return!0;const t=(0,o.z$)(),e=Ca.Rt(t),n=0<e&&e<10,r=Ca.vt(t),s=0<r&&r<4.5;return!(t.indexOf("MSIE ")>0||t.indexOf("Trident/")>0||t.indexOf("Edge/")>0||n||s)}static Pt(){var t;return"undefined"!=typeof process&&"YES"===(null===(t=process.env)||void 0===t?void 0:t.Vt)}static St(t,e){return t.store(e)}static Rt(t){const e=t.match(/i(?:phone|pad|pod) os ([\d_]+)/i),n=e?e[1].split("_").slice(0,2).join("."):"-1";return Number(n)}static vt(t){const e=t.match(/Android ([\d.]+)/i),n=e?e[1].split(".").slice(0,2).join("."):"-1";return Number(n)}async Dt(t){return this.db||(_r("SimpleDb","Opening database:",this.name),this.db=await new Promise(((e,n)=>{const r=indexedDB.open(this.name,this.version);r.onsuccess=t=>{const n=t.target.result;e(n)},r.onblocked=()=>{n(new xa(t,"Cannot upgrade IndexedDB schema while another tab is open. Close all tabs that access Firestore and reload this page to proceed."))},r.onerror=e=>{const r=e.target.error;"VersionError"===r.name?n(new Or(Rr.FAILED_PRECONDITION,"A newer version of the Firestore SDK was previously used and so the persisted data is not compatible with the version of the SDK you are now using. The SDK will operate with persistence disabled. If you need persistence, please re-upgrade to a newer version of the SDK or else clear the persisted IndexedDB data for your app to start fresh.")):"InvalidStateError"===r.name?n(new Or(Rr.FAILED_PRECONDITION,"Unable to open an IndexedDB connection. This could be due to running in a private browsing session on a browser whose private browsing sessions do not support IndexedDB: "+r)):n(new xa(t,r))},r.onupgradeneeded=t=>{_r("SimpleDb",'Database "'+this.name+'" requires upgrade from version:',t.oldVersion);const e=t.target.result;this.At.Ct(e,r.transaction,t.oldVersion,this.version).next((()=>{_r("SimpleDb","Database upgrade to version "+this.version+" complete")}))}}))),this.Nt&&(this.db.onversionchange=t=>this.Nt(t)),this.db}xt(t){this.Nt=t,this.db&&(this.db.onversionchange=e=>t(e))}async runTransaction(t,e,n,r){const s="readonly"===e;let i=0;for(;;){++i;try{this.db=await this.Dt(t);const e=Da.open(this.db,t,s?"readonly":"readwrite",n),i=r(e).catch((t=>(e.abort(t),Aa.reject(t)))).toPromise();return i.catch((()=>{})),await e.It,i}catch(t){const e="FirebaseError"!==t.name&&i<3;if(_r("SimpleDb","Transaction failed with error:",t.message,"Retrying:",e),this.close(),!e)return Promise.reject(t)}}}close(){this.db&&this.db.close(),this.db=void 0}}class ka{constructor(t){this.kt=t,this.$t=!1,this.Ot=null}get isDone(){return this.$t}get Ft(){return this.Ot}set cursor(t){this.kt=t}done(){this.$t=!0}Mt(t){this.Ot=t}delete(){return Oa(this.kt.delete())}}class xa extends Or{constructor(t,e){super(Rr.UNAVAILABLE,`IndexedDB transaction '${t}' failed: ${e}`),this.name="IndexedDbTransactionError"}}function La(t){return"IndexedDbTransactionError"===t.name}class Ra{constructor(t){this.store=t}put(t,e){let n;return void 0!==e?(_r("SimpleDb","PUT",this.store.name,t,e),n=this.store.put(e,t)):(_r("SimpleDb","PUT",this.store.name,"<auto-key>",t),n=this.store.put(t)),Oa(n)}add(t){return _r("SimpleDb","ADD",this.store.name,t,t),Oa(this.store.add(t))}get(t){return Oa(this.store.get(t)).next((e=>(void 0===e&&(e=null),_r("SimpleDb","GET",this.store.name,t,e),e)))}delete(t){return _r("SimpleDb","DELETE",this.store.name,t),Oa(this.store.delete(t))}count(){return _r("SimpleDb","COUNT",this.store.name),Oa(this.store.count())}Lt(t,e){const n=this.cursor(this.options(t,e)),r=[];return this.Bt(n,((t,e)=>{r.push(e)})).next((()=>r))}Ut(t,e){_r("SimpleDb","DELETE ALL",this.store.name);const n=this.options(t,e);n.qt=!1;const r=this.cursor(n);return this.Bt(r,((t,e,n)=>n.delete()))}Kt(t,e){let n;e?n=t:(n={},e=t);const r=this.cursor(n);return this.Bt(r,e)}jt(t){const e=this.cursor({});return new Aa(((n,r)=>{e.onerror=t=>{const e=Pa(t.target.error);r(e)},e.onsuccess=e=>{const r=e.target.result;r?t(r.primaryKey,r.value).next((t=>{t?r.continue():n()})):n()}}))}Bt(t,e){const n=[];return new Aa(((r,s)=>{t.onerror=t=>{s(t.target.error)},t.onsuccess=t=>{const s=t.target.result;if(!s)return void r();const i=new ka(s),o=e(s.primaryKey,s.value,i);if(o instanceof Aa){const t=o.catch((t=>(i.done(),Aa.reject(t))));n.push(t)}i.isDone?r():null===i.Ft?s.continue():s.continue(i.Ft)}})).next((()=>Aa.waitFor(n)))}options(t,e){let n;return void 0!==t&&("string"==typeof t?n=t:e=t),{index:n,range:e}}cursor(t){let e="next";if(t.reverse&&(e="prev"),t.index){const n=this.store.index(t.index);return t.qt?n.openKeyCursor(t.range,e):n.openCursor(t.range,e)}return this.store.openCursor(t.range,e)}}function Oa(t){return new Aa(((e,n)=>{t.onsuccess=t=>{const n=t.target.result;e(n)},t.onerror=t=>{const e=Pa(t.target.error);n(e)}}))}let Ma=!1;function Pa(t){const e=Ca.Rt((0,o.z$)());if(e>=12.2&&e<13){const e="An internal error was encountered in the Indexed Database server";if(t.message.indexOf(e)>=0){const t=new Or("internal",`IOS_INDEXEDDB_BUG1: IndexedDb has thrown '${e}'. This is likely due to an unavoidable bug in iOS. See https://stackoverflow.com/q/56496296/110915 for details and a potential workaround.`);return Ma||(Ma=!0,setTimeout((()=>{throw t}),0)),t}}return t}class Fa extends Na{constructor(t,e){super(),this.Qt=t,this.currentSequenceNumber=e}}function Va(t,e){const n=Lr(t);return Ca.St(n.Qt,e)}class Ua{constructor(t,e,n,r){this.batchId=t,this.localWriteTime=e,this.baseMutations=n,this.mutations=r}applyToRemoteDocument(t,e){const n=e.mutationResults;for(let e=0;e<this.mutations.length;e++){const r=this.mutations[e];r.key.isEqual(t.key)&&Fi(r,t,n[e])}}applyToLocalView(t){for(const e of this.baseMutations)e.key.isEqual(t.key)&&Vi(e,t,this.localWriteTime);for(const e of this.mutations)e.key.isEqual(t.key)&&Vi(e,t,this.localWriteTime)}applyToLocalDocumentSet(t){this.mutations.forEach((e=>{const n=t.get(e.key),r=n;this.applyToLocalView(r),n.isValidDocument()||r.convertToNoDocument(Wr.min())}))}keys(){return this.mutations.reduce(((t,e)=>t.add(e.key)),fo())}isEqual(t){return this.batchId===t.batchId&&Gr(this.mutations,t.mutations,((t,e)=>qi(t,e)))&&Gr(this.baseMutations,t.baseMutations,((t,e)=>qi(t,e)))}}class qa{constructor(t,e,n,r){this.batch=t,this.commitVersion=e,this.mutationResults=n,this.docVersions=r}static from(t,e,n){kr(t.mutations.length===n.length);let r=ho();const s=t.mutations;for(let t=0;t<s.length;t++)r=r.insert(s[t].key,n[t].version);return new qa(t,e,n,r)}}class Ba{constructor(t,e,n,r,s=Wr.min(),i=Wr.min(),o=is.EMPTY_BYTE_STRING){this.target=t,this.targetId=e,this.purpose=n,this.sequenceNumber=r,this.snapshotVersion=s,this.lastLimboFreeSnapshotVersion=i,this.resumeToken=o}withSequenceNumber(t){return new Ba(this.target,this.targetId,this.purpose,t,this.snapshotVersion,this.lastLimboFreeSnapshotVersion,this.resumeToken)}withResumeToken(t,e){return new Ba(this.target,this.targetId,this.purpose,this.sequenceNumber,e,this.lastLimboFreeSnapshotVersion,t)}withLastLimboFreeSnapshotVersion(t){return new Ba(this.target,this.targetId,this.purpose,this.sequenceNumber,this.snapshotVersion,t,this.resumeToken)}}class ja{constructor(t){this.Wt=t}}function Ka(t,e){if(e.document)return Bo(t.Wt,e.document,!!e.hasCommittedMutations);if(e.noDocument){const t=gs.fromSegments(e.noDocument.path),n=Qa(e.noDocument.readTime),r=Rs.newNoDocument(t,n);return e.hasCommittedMutations?r.setHasCommittedMutations():r}if(e.unknownDocument){const t=gs.fromSegments(e.unknownDocument.path),n=Qa(e.unknownDocument.version);return Rs.newUnknownDocument(t,n)}return Cr()}function za(t,e,n){const r=$a(n),s=e.key.path.popLast().toArray();if(e.isFoundDocument()){const n=function(t,e){return{name:Oo(t,e.key),fields:e.data.value.mapValue.fields,updateTime:Do(t,e.version.toTimestamp())}}(t.Wt,e),i=e.hasCommittedMutations;return new ma(null,null,n,i,r,s)}if(e.isNoDocument()){const t=e.key.path.toArray(),n=Ha(e.version),i=e.hasCommittedMutations;return new ma(null,new fa(t,n),null,i,r,s)}if(e.isUnknownDocument()){const t=e.key.path.toArray(),n=Ha(e.version);return new ma(new pa(t,n),null,null,!0,r,s)}return Cr()}function $a(t){const e=t.toTimestamp();return[e.seconds,e.nanoseconds]}function Ga(t){const e=new Qr(t[0],t[1]);return Wr.fromTimestamp(e)}function Ha(t){const e=t.toTimestamp();return new ca(e.seconds,e.nanoseconds)}function Qa(t){const e=new Qr(t.seconds,t.nanoseconds);return Wr.fromTimestamp(e)}function Wa(t,e){const n=(e.baseMutations||[]).map((e=>Ko(t.Wt,e)));for(let t=0;t<e.mutations.length-1;++t){const n=e.mutations[t];if(t+1<e.mutations.length&&void 0!==e.mutations[t+1].transform){const r=e.mutations[t+1];n.updateTransforms=r.transform.fieldTransforms,e.mutations.splice(t+1,1),++t}}const r=e.mutations.map((e=>Ko(t.Wt,e))),s=Qr.fromMillis(e.localWriteTimeMs);return new Ua(e.batchId,s,n,r)}function Ya(t){const e=Qa(t.readTime),n=void 0!==t.lastLimboFreeSnapshotVersion?Qa(t.lastLimboFreeSnapshotVersion):Wr.min();let r;var s;return void 0!==t.query.documents?(kr(1===(s=t.query).documents.length),r=ui(ni(Fo(s.documents[0])))):r=function(t){return ui(Go(t))}(t.query),new Ba(r,t.targetId,0,t.lastListenSequenceNumber,e,n,is.fromBase64String(t.resumeToken))}function Ja(t,e){const n=Ha(e.snapshotVersion),r=Ha(e.lastLimboFreeSnapshotVersion);let s;s=Vs(e.target)?zo(t.Wt,e.target):$o(t.Wt,e.target);const i=e.resumeToken.toBase64();return new ya(e.targetId,Ps(e.target),n,i,e.sequenceNumber,r,s)}function Xa(t){const e=Go({parent:t.parent,structuredQuery:t.structuredQuery});return"LAST"===t.limitType?hi(e,e.limit,"L"):e}class Za{getBundleMetadata(t,e){return tc(t).get(e).next((t=>{if(t)return{id:(e=t).bundleId,createTime:Qa(e.createTime),version:e.version};var e}))}saveBundleMetadata(t,e){return tc(t).put({bundleId:(n=e).id,createTime:Ha(xo(n.createTime)),version:n.version});var n}getNamedQuery(t,e){return ec(t).get(e).next((t=>{if(t)return{name:(e=t).name,query:Xa(e.bundledQuery),readTime:Qa(e.readTime)};var e}))}saveNamedQuery(t,e){return ec(t).put(function(t){return{name:t.name,readTime:Ha(xo(t.readTime)),bundledQuery:t.bundledQuery}}(e))}}function tc(t){return Va(t,Ea.store)}function ec(t){return Va(t,Ta.store)}class nc{constructor(){this.Gt=new rc}addToCollectionParentIndex(t,e){return this.Gt.add(e),Aa.resolve()}getCollectionParents(t,e){return Aa.resolve(this.Gt.getEntries(e))}}class rc{constructor(){this.index={}}add(t){const e=t.lastSegment(),n=t.popLast(),r=this.index[e]||new ro(ts.comparator),s=!r.has(n);return this.index[e]=r.add(n),s}has(t){const e=t.lastSegment(),n=t.popLast(),r=this.index[e];return r&&r.has(n)}getEntries(t){return(this.index[t]||new ro(ts.comparator)).toArray()}}class sc{constructor(){this.zt=new rc}addToCollectionParentIndex(t,e){if(!this.zt.has(e)){const n=e.lastSegment(),r=e.popLast();t.addOnCommittedListener((()=>{this.zt.add(e)}));const s={collectionId:n,parent:sa(r)};return ic(t).put(s)}return Aa.resolve()}getCollectionParents(t,e){const n=[],r=IDBKeyRange.bound([e,""],[Hr(e),""],!1,!0);return ic(t).Lt(r).next((t=>{for(const r of t){if(r.collectionId!==e)break;n.push(aa(r.parent))}return n}))}}function ic(t){return Va(t,ba.store)}const oc={didRun:!1,sequenceNumbersCollected:0,targetsRemoved:0,documentsRemoved:0};class ac{constructor(t,e,n){this.cacheSizeCollectionThreshold=t,this.percentileToCollect=e,this.maximumSequenceNumbersToCollect=n}static withCacheSize(t){return new ac(t,ac.DEFAULT_COLLECTION_PERCENTILE,ac.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT)}}function cc(t,e,n){const r=t.store(la.store),s=t.store(da.store),i=[],o=IDBKeyRange.only(n.batchId);let a=0;const c=r.Kt({range:o},((t,e,n)=>(a++,n.delete())));i.push(c.next((()=>{kr(1===a)})));const u=[];for(const t of n.mutations){const r=da.key(e,t.key.path,n.batchId);i.push(s.delete(r)),u.push(t.key)}return Aa.waitFor(i).next((()=>u))}function uc(t){if(!t)return 0;let e;if(t.document)e=t.document;else if(t.unknownDocument)e=t.unknownDocument;else{if(!t.noDocument)throw Cr();e=t.noDocument}return JSON.stringify(e).length}ac.DEFAULT_COLLECTION_PERCENTILE=10,ac.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT=1e3,ac.DEFAULT=new ac(41943040,ac.DEFAULT_COLLECTION_PERCENTILE,ac.DEFAULT_MAX_SEQUENCE_NUMBERS_TO_COLLECT),ac.DISABLED=new ac(-1,0,0);class hc{constructor(t,e,n,r){this.userId=t,this.N=e,this.Ht=n,this.referenceDelegate=r,this.Jt={}}static Yt(t,e,n,r){kr(""!==t.uid);const s=t.isAuthenticated()?t.uid:"";return new hc(s,e,n,r)}checkEmpty(t){let e=!0;const n=IDBKeyRange.bound([this.userId,Number.NEGATIVE_INFINITY],[this.userId,Number.POSITIVE_INFINITY]);return dc(t).Kt({index:la.userMutationsIndex,range:n},((t,n,r)=>{e=!1,r.done()})).next((()=>e))}addMutationBatch(t,e,n,r){const s=fc(t),i=dc(t);return i.add({}).next((o=>{kr("number"==typeof o);const a=new Ua(o,e,n,r),c=function(t,e,n){const r=n.baseMutations.map((e=>jo(t.Wt,e))),s=n.mutations.map((e=>jo(t.Wt,e)));return new la(e,n.batchId,n.localWriteTime.toMillis(),r,s)}(this.N,this.userId,a),u=[];let h=new ro(((t,e)=>$r(t.canonicalString(),e.canonicalString())));for(const t of r){const e=da.key(this.userId,t.key.path,o);h=h.add(t.key.path.popLast()),u.push(i.put(c)),u.push(s.put(e,da.PLACEHOLDER))}return h.forEach((e=>{u.push(this.Ht.addToCollectionParentIndex(t,e))})),t.addOnCommittedListener((()=>{this.Jt[o]=a.keys()})),Aa.waitFor(u).next((()=>a))}))}lookupMutationBatch(t,e){return dc(t).get(e).next((t=>t?(kr(t.userId===this.userId),Wa(this.N,t)):null))}Xt(t,e){return this.Jt[e]?Aa.resolve(this.Jt[e]):this.lookupMutationBatch(t,e).next((t=>{if(t){const n=t.keys();return this.Jt[e]=n,n}return null}))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,r=IDBKeyRange.lowerBound([this.userId,n]);let s=null;return dc(t).Kt({index:la.userMutationsIndex,range:r},((t,e,r)=>{e.userId===this.userId&&(kr(e.batchId>=n),s=Wa(this.N,e)),r.done()})).next((()=>s))}getHighestUnacknowledgedBatchId(t){const e=IDBKeyRange.upperBound([this.userId,Number.POSITIVE_INFINITY]);let n=-1;return dc(t).Kt({index:la.userMutationsIndex,range:e,reverse:!0},((t,e,r)=>{n=e.batchId,r.done()})).next((()=>n))}getAllMutationBatches(t){const e=IDBKeyRange.bound([this.userId,-1],[this.userId,Number.POSITIVE_INFINITY]);return dc(t).Lt(la.userMutationsIndex,e).next((t=>t.map((t=>Wa(this.N,t)))))}getAllMutationBatchesAffectingDocumentKey(t,e){const n=da.prefixForPath(this.userId,e.path),r=IDBKeyRange.lowerBound(n),s=[];return fc(t).Kt({range:r},((n,r,i)=>{const[o,a,c]=n,u=aa(a);if(o===this.userId&&e.path.isEqual(u))return dc(t).get(c).next((t=>{if(!t)throw Cr();kr(t.userId===this.userId),s.push(Wa(this.N,t))}));i.done()})).next((()=>s))}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new ro($r);const r=[];return e.forEach((e=>{const s=da.prefixForPath(this.userId,e.path),i=IDBKeyRange.lowerBound(s),o=fc(t).Kt({range:i},((t,r,s)=>{const[i,o,a]=t,c=aa(o);i===this.userId&&e.path.isEqual(c)?n=n.add(a):s.done()}));r.push(o)})),Aa.waitFor(r).next((()=>this.Zt(t,n)))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,r=n.length+1,s=da.prefixForPath(this.userId,n),i=IDBKeyRange.lowerBound(s);let o=new ro($r);return fc(t).Kt({range:i},((t,e,s)=>{const[i,a,c]=t,u=aa(a);i===this.userId&&n.isPrefixOf(u)?u.length===r&&(o=o.add(c)):s.done()})).next((()=>this.Zt(t,o)))}Zt(t,e){const n=[],r=[];return e.forEach((e=>{r.push(dc(t).get(e).next((t=>{if(null===t)throw Cr();kr(t.userId===this.userId),n.push(Wa(this.N,t))})))})),Aa.waitFor(r).next((()=>n))}removeMutationBatch(t,e){return cc(t.Qt,this.userId,e).next((n=>(t.addOnCommittedListener((()=>{this.te(e.batchId)})),Aa.forEach(n,(e=>this.referenceDelegate.markPotentiallyOrphaned(t,e))))))}te(t){delete this.Jt[t]}performConsistencyCheck(t){return this.checkEmpty(t).next((e=>{if(!e)return Aa.resolve();const n=IDBKeyRange.lowerBound(da.prefixForUser(this.userId)),r=[];return fc(t).Kt({range:n},((t,e,n)=>{if(t[0]===this.userId){const e=aa(t[1]);r.push(e)}else n.done()})).next((()=>{kr(0===r.length)}))}))}containsKey(t,e){return lc(t,this.userId,e)}ee(t){return pc(t).get(this.userId).next((t=>t||new ha(this.userId,-1,"")))}}function lc(t,e,n){const r=da.prefixForPath(e,n.path),s=r[1],i=IDBKeyRange.lowerBound(r);let o=!1;return fc(t).Kt({range:i,qt:!0},((t,n,r)=>{const[i,a,c]=t;i===e&&a===s&&(o=!0),r.done()})).next((()=>o))}function dc(t){return Va(t,la.store)}function fc(t){return Va(t,da.store)}function pc(t){return Va(t,ha.store)}class mc{constructor(t){this.ne=t}next(){return this.ne+=2,this.ne}static se(){return new mc(0)}static ie(){return new mc(-1)}}class gc{constructor(t,e){this.referenceDelegate=t,this.N=e}allocateTargetId(t){return this.re(t).next((e=>{const n=new mc(e.highestTargetId);return e.highestTargetId=n.next(),this.oe(t,e).next((()=>e.highestTargetId))}))}getLastRemoteSnapshotVersion(t){return this.re(t).next((t=>Wr.fromTimestamp(new Qr(t.lastRemoteSnapshotVersion.seconds,t.lastRemoteSnapshotVersion.nanoseconds))))}getHighestSequenceNumber(t){return this.re(t).next((t=>t.highestListenSequenceNumber))}setTargetsMetadata(t,e,n){return this.re(t).next((r=>(r.highestListenSequenceNumber=e,n&&(r.lastRemoteSnapshotVersion=n.toTimestamp()),e>r.highestListenSequenceNumber&&(r.highestListenSequenceNumber=e),this.oe(t,r))))}addTargetData(t,e){return this.ae(t,e).next((()=>this.re(t).next((n=>(n.targetCount+=1,this.ce(e,n),this.oe(t,n))))))}updateTargetData(t,e){return this.ae(t,e)}removeTargetData(t,e){return this.removeMatchingKeysForTargetId(t,e.targetId).next((()=>yc(t).delete(e.targetId))).next((()=>this.re(t))).next((e=>(kr(e.targetCount>0),e.targetCount-=1,this.oe(t,e))))}removeTargets(t,e,n){let r=0;const s=[];return yc(t).Kt(((i,o)=>{const a=Ya(o);a.sequenceNumber<=e&&null===n.get(a.targetId)&&(r++,s.push(this.removeTargetData(t,a)))})).next((()=>Aa.waitFor(s))).next((()=>r))}forEachTarget(t,e){return yc(t).Kt(((t,n)=>{const r=Ya(n);e(r)}))}re(t){return vc(t).get(wa.key).next((t=>(kr(null!==t),t)))}oe(t,e){return vc(t).put(wa.key,e)}ae(t,e){return yc(t).put(Ja(this.N,e))}ce(t,e){let n=!1;return t.targetId>e.highestTargetId&&(e.highestTargetId=t.targetId,n=!0),t.sequenceNumber>e.highestListenSequenceNumber&&(e.highestListenSequenceNumber=t.sequenceNumber,n=!0),n}getTargetCount(t){return this.re(t).next((t=>t.targetCount))}getTargetData(t,e){const n=Ps(e),r=IDBKeyRange.bound([n,Number.NEGATIVE_INFINITY],[n,Number.POSITIVE_INFINITY]);let s=null;return yc(t).Kt({range:r,index:ya.queryTargetsIndexName},((t,n,r)=>{const i=Ya(n);Fs(e,i.target)&&(s=i,r.done())})).next((()=>s))}addMatchingKeys(t,e,n){const r=[],s=wc(t);return e.forEach((e=>{const i=sa(e.path);r.push(s.put(new va(n,i))),r.push(this.referenceDelegate.addReference(t,n,e))})),Aa.waitFor(r)}removeMatchingKeys(t,e,n){const r=wc(t);return Aa.forEach(e,(e=>{const s=sa(e.path);return Aa.waitFor([r.delete([n,s]),this.referenceDelegate.removeReference(t,n,e)])}))}removeMatchingKeysForTargetId(t,e){const n=wc(t),r=IDBKeyRange.bound([e],[e+1],!1,!0);return n.delete(r)}getMatchingKeysForTargetId(t,e){const n=IDBKeyRange.bound([e],[e+1],!1,!0),r=wc(t);let s=fo();return r.Kt({range:n,qt:!0},((t,e,n)=>{const r=aa(t[1]),i=new gs(r);s=s.add(i)})).next((()=>s))}containsKey(t,e){const n=sa(e.path),r=IDBKeyRange.bound([n],[Hr(n)],!1,!0);let s=0;return wc(t).Kt({index:va.documentTargetsIndex,qt:!0,range:r},(([t,e],n,r)=>{0!==t&&(s++,r.done())})).next((()=>s>0))}Et(t,e){return yc(t).get(e).next((t=>t?Ya(t):null))}}function yc(t){return Va(t,ya.store)}function vc(t){return Va(t,wa.store)}function wc(t){return Va(t,va.store)}async function bc(t){if(t.code!==Rr.FAILED_PRECONDITION||t.message!==_a)throw t;_r("LocalStore","Unexpectedly lost primary lease")}function Ic([t,e],[n,r]){const s=$r(t,n);return 0===s?$r(e,r):s}class Ec{constructor(t){this.ue=t,this.buffer=new ro(Ic),this.he=0}le(){return++this.he}fe(t){const e=[t,this.le()];if(this.buffer.size<this.ue)this.buffer=this.buffer.add(e);else{const t=this.buffer.last();Ic(e,t)<0&&(this.buffer=this.buffer.delete(t).add(e))}}get maxValue(){return this.buffer.last()[0]}}class Tc{constructor(t,e){this.garbageCollector=t,this.asyncQueue=e,this.de=!1,this.we=null}start(t){-1!==this.garbageCollector.params.cacheSizeCollectionThreshold&&this._e(t)}stop(){this.we&&(this.we.cancel(),this.we=null)}get started(){return null!==this.we}_e(t){const e=this.de?3e5:6e4;_r("LruGarbageCollector",`Garbage collection scheduled in ${e}ms`),this.we=this.asyncQueue.enqueueAfterDelay("lru_garbage_collection",e,(async()=>{this.we=null,this.de=!0;try{await t.collectGarbage(this.garbageCollector)}catch(t){La(t)?_r("LruGarbageCollector","Ignoring IndexedDB error during garbage collection: ",t):await bc(t)}await this._e(t)}))}}class Sc{constructor(t,e){this.me=t,this.params=e}calculateTargetCount(t,e){return this.me.ge(t).next((t=>Math.floor(e/100*t)))}nthSequenceNumber(t,e){if(0===e)return Aa.resolve(jr.T);const n=new Ec(e);return this.me.forEachTarget(t,(t=>n.fe(t.sequenceNumber))).next((()=>this.me.ye(t,(t=>n.fe(t))))).next((()=>n.maxValue))}removeTargets(t,e,n){return this.me.removeTargets(t,e,n)}removeOrphanedDocuments(t,e){return this.me.removeOrphanedDocuments(t,e)}collect(t,e){return-1===this.params.cacheSizeCollectionThreshold?(_r("LruGarbageCollector","Garbage collection skipped; disabled"),Aa.resolve(oc)):this.getCacheSize(t).next((n=>n<this.params.cacheSizeCollectionThreshold?(_r("LruGarbageCollector",`Garbage collection skipped; Cache size ${n} is lower than threshold ${this.params.cacheSizeCollectionThreshold}`),oc):this.pe(t,e)))}getCacheSize(t){return this.me.getCacheSize(t)}pe(t,e){let n,r,s,o,a,c,u;const h=Date.now();return this.calculateTargetCount(t,this.params.percentileToCollect).next((e=>(e>this.params.maximumSequenceNumbersToCollect?(_r("LruGarbageCollector",`Capping sequence numbers to collect down to the maximum of ${this.params.maximumSequenceNumbersToCollect} from ${e}`),r=this.params.maximumSequenceNumbersToCollect):r=e,o=Date.now(),this.nthSequenceNumber(t,r)))).next((r=>(n=r,a=Date.now(),this.removeTargets(t,n,e)))).next((e=>(s=e,c=Date.now(),this.removeOrphanedDocuments(t,n)))).next((t=>(u=Date.now(),Tr()<=i.in.DEBUG&&_r("LruGarbageCollector",`LRU Garbage Collection\n\tCounted targets in ${o-h}ms\n\tDetermined least recently used ${r} in `+(a-o)+"ms\n"+`\tRemoved ${s} targets in `+(c-a)+"ms\n"+`\tRemoved ${t} documents in `+(u-c)+"ms\n"+`Total Duration: ${u-h}ms`),Aa.resolve({didRun:!0,sequenceNumbersCollected:r,targetsRemoved:s,documentsRemoved:t}))))}}class _c{constructor(t,e){this.db=t,this.garbageCollector=function(t,e){return new Sc(t,e)}(this,e)}ge(t){const e=this.Ee(t);return this.db.getTargetCache().getTargetCount(t).next((t=>e.next((e=>t+e))))}Ee(t){let e=0;return this.ye(t,(t=>{e++})).next((()=>e))}forEachTarget(t,e){return this.db.getTargetCache().forEachTarget(t,e)}ye(t,e){return this.Te(t,((t,n)=>e(n)))}addReference(t,e,n){return Nc(t,n)}removeReference(t,e,n){return Nc(t,n)}removeTargets(t,e,n){return this.db.getTargetCache().removeTargets(t,e,n)}markPotentiallyOrphaned(t,e){return Nc(t,e)}Ie(t,e){return function(t,e){let n=!1;return pc(t).jt((r=>lc(t,r,e).next((t=>(t&&(n=!0),Aa.resolve(!t)))))).next((()=>n))}(t,e)}removeOrphanedDocuments(t,e){const n=this.db.getRemoteDocumentCache().newChangeBuffer(),r=[];let s=0;return this.Te(t,((i,o)=>{if(o<=e){const e=this.Ie(t,i).next((e=>{if(!e)return s++,n.getEntry(t,i).next((()=>(n.removeEntry(i),wc(t).delete([0,sa(i.path)]))))}));r.push(e)}})).next((()=>Aa.waitFor(r))).next((()=>n.apply(t))).next((()=>s))}removeTarget(t,e){const n=e.withSequenceNumber(t.currentSequenceNumber);return this.db.getTargetCache().updateTargetData(t,n)}updateLimboDocument(t,e){return Nc(t,e)}Te(t,e){const n=wc(t);let r,s=jr.T;return n.Kt({index:va.documentTargetsIndex},(([t,n],{path:i,sequenceNumber:o})=>{0===t?(s!==jr.T&&e(new gs(aa(r)),s),s=o,r=i):s=jr.T})).next((()=>{s!==jr.T&&e(new gs(aa(r)),s)}))}getCacheSize(t){return this.db.getRemoteDocumentCache().getSize(t)}}function Nc(t,e){return wc(t).put(function(t,e){return new va(0,sa(t.path),e)}(e,t.currentSequenceNumber))}class Ac{constructor(t,e){this.mapKeyFn=t,this.equalsFn=e,this.inner={}}get(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0!==n)for(const[e,r]of n)if(this.equalsFn(e,t))return r}has(t){return void 0!==this.get(t)}set(t,e){const n=this.mapKeyFn(t),r=this.inner[n];if(void 0!==r){for(let n=0;n<r.length;n++)if(this.equalsFn(r[n][0],t))return void(r[n]=[t,e]);r.push([t,e])}else this.inner[n]=[[t,e]]}delete(t){const e=this.mapKeyFn(t),n=this.inner[e];if(void 0===n)return!1;for(let r=0;r<n.length;r++)if(this.equalsFn(n[r][0],t))return 1===n.length?delete this.inner[e]:n.splice(r,1),!0;return!1}forEach(t){Jr(this.inner,((e,n)=>{for(const[e,r]of n)t(e,r)}))}isEmpty(){return Xr(this.inner)}}class Dc{constructor(){this.changes=new Ac((t=>t.toString()),((t,e)=>t.isEqual(e))),this.changesApplied=!1}getReadTime(t){const e=this.changes.get(t);return e?e.readTime:Wr.min()}addEntry(t,e){this.assertNotApplied(),this.changes.set(t.key,{document:t,readTime:e})}removeEntry(t,e=null){this.assertNotApplied(),this.changes.set(t,{document:Rs.newInvalidDocument(t),readTime:e})}getEntry(t,e){this.assertNotApplied();const n=this.changes.get(e);return void 0!==n?Aa.resolve(n.document):this.getFromCache(t,e)}getEntries(t,e){return this.getAllFromCache(t,e)}apply(t){return this.assertNotApplied(),this.changesApplied=!0,this.applyChanges(t)}assertNotApplied(){}}class Cc{constructor(t,e){this.N=t,this.Ht=e}addEntry(t,e,n){return Lc(t).put(Rc(e),n)}removeEntry(t,e){const n=Lc(t),r=Rc(e);return n.delete(r)}updateMetadata(t,e){return this.getMetadata(t).next((n=>(n.byteSize+=e,this.Ae(t,n))))}getEntry(t,e){return Lc(t).get(Rc(e)).next((t=>this.Re(e,t)))}be(t,e){return Lc(t).get(Rc(e)).next((t=>({document:this.Re(e,t),size:uc(t)})))}getEntries(t,e){let n=oo();return this.Pe(t,e,((t,e)=>{const r=this.Re(t,e);n=n.insert(t,r)})).next((()=>n))}ve(t,e){let n=oo(),r=new to(gs.comparator);return this.Pe(t,e,((t,e)=>{const s=this.Re(t,e);n=n.insert(t,s),r=r.insert(t,uc(e))})).next((()=>({documents:n,Ve:r})))}Pe(t,e,n){if(e.isEmpty())return Aa.resolve();const r=IDBKeyRange.bound(e.first().path.toArray(),e.last().path.toArray()),s=e.getIterator();let i=s.getNext();return Lc(t).Kt({range:r},((t,e,r)=>{const o=gs.fromSegments(t);for(;i&&gs.comparator(i,o)<0;)n(i,null),i=s.getNext();i&&i.isEqual(o)&&(n(i,e),i=s.hasNext()?s.getNext():null),i?r.Mt(i.path.toArray()):r.done()})).next((()=>{for(;i;)n(i,null),i=s.hasNext()?s.getNext():null}))}getDocumentsMatchingQuery(t,e,n){let r=oo();const s=e.path.length+1,i={};if(n.isEqual(Wr.min())){const t=e.path.toArray();i.range=IDBKeyRange.lowerBound(t)}else{const t=e.path.toArray(),r=$a(n);i.range=IDBKeyRange.lowerBound([t,r],!0),i.index=ma.collectionReadTimeIndex}return Lc(t).Kt(i,((t,n,i)=>{if(t.length!==s)return;const o=Ka(this.N,n);e.path.isPrefixOf(o.key.path)?pi(e,o)&&(r=r.insert(o.key,o)):i.done()})).next((()=>r))}newChangeBuffer(t){return new kc(this,!!t&&t.trackRemovals)}getSize(t){return this.getMetadata(t).next((t=>t.byteSize))}getMetadata(t){return xc(t).get(ga.key).next((t=>(kr(!!t),t)))}Ae(t,e){return xc(t).put(ga.key,e)}Re(t,e){if(e){const t=Ka(this.N,e);if(!t.isNoDocument()||!t.version.isEqual(Wr.min()))return t}return Rs.newInvalidDocument(t)}}class kc extends Dc{constructor(t,e){super(),this.Se=t,this.trackRemovals=e,this.De=new Ac((t=>t.toString()),((t,e)=>t.isEqual(e)))}applyChanges(t){const e=[];let n=0,r=new ro(((t,e)=>$r(t.canonicalString(),e.canonicalString())));return this.changes.forEach(((s,i)=>{const o=this.De.get(s);if(i.document.isValidDocument()){const a=za(this.Se.N,i.document,this.getReadTime(s));r=r.add(s.path.popLast());const c=uc(a);n+=c-o,e.push(this.Se.addEntry(t,s,a))}else if(n-=o,this.trackRemovals){const n=za(this.Se.N,Rs.newNoDocument(s,Wr.min()),this.getReadTime(s));e.push(this.Se.addEntry(t,s,n))}else e.push(this.Se.removeEntry(t,s))})),r.forEach((n=>{e.push(this.Se.Ht.addToCollectionParentIndex(t,n))})),e.push(this.Se.updateMetadata(t,n)),Aa.waitFor(e)}getFromCache(t,e){return this.Se.be(t,e).next((t=>(this.De.set(e,t.size),t.document)))}getAllFromCache(t,e){return this.Se.ve(t,e).next((({documents:t,Ve:e})=>(e.forEach(((t,e)=>{this.De.set(t,e)})),t)))}}function xc(t){return Va(t,ga.store)}function Lc(t){return Va(t,ma.store)}function Rc(t){return t.path.toArray()}class Oc{constructor(t){this.N=t}Ct(t,e,n,r){kr(n<r&&n>=0&&r<=11);const s=new Da("createOrUpgrade",e);n<1&&r>=1&&(function(t){t.createObjectStore(ua.store)}(t),function(t){t.createObjectStore(ha.store,{keyPath:ha.keyPath}),t.createObjectStore(la.store,{keyPath:la.keyPath,autoIncrement:!0}).createIndex(la.userMutationsIndex,la.userMutationsKeyPath,{unique:!0}),t.createObjectStore(da.store)}(t),Mc(t),function(t){t.createObjectStore(ma.store)}(t));let i=Aa.resolve();return n<3&&r>=3&&(0!==n&&(function(t){t.deleteObjectStore(va.store),t.deleteObjectStore(ya.store),t.deleteObjectStore(wa.store)}(t),Mc(t)),i=i.next((()=>function(t){const e=t.store(wa.store),n=new wa(0,0,Wr.min().toTimestamp(),0);return e.put(wa.key,n)}(s)))),n<4&&r>=4&&(0!==n&&(i=i.next((()=>function(t,e){return e.store(la.store).Lt().next((n=>{t.deleteObjectStore(la.store),t.createObjectStore(la.store,{keyPath:la.keyPath,autoIncrement:!0}).createIndex(la.userMutationsIndex,la.userMutationsKeyPath,{unique:!0});const r=e.store(la.store),s=n.map((t=>r.put(t)));return Aa.waitFor(s)}))}(t,s)))),i=i.next((()=>{!function(t){t.createObjectStore(Ia.store,{keyPath:Ia.keyPath})}(t)}))),n<5&&r>=5&&(i=i.next((()=>this.Ce(s)))),n<6&&r>=6&&(i=i.next((()=>(function(t){t.createObjectStore(ga.store)}(t),this.Ne(s))))),n<7&&r>=7&&(i=i.next((()=>this.xe(s)))),n<8&&r>=8&&(i=i.next((()=>this.ke(t,s)))),n<9&&r>=9&&(i=i.next((()=>{!function(t){t.objectStoreNames.contains("remoteDocumentChanges")&&t.deleteObjectStore("remoteDocumentChanges")}(t),function(t){const e=t.objectStore(ma.store);e.createIndex(ma.readTimeIndex,ma.readTimeIndexPath,{unique:!1}),e.createIndex(ma.collectionReadTimeIndex,ma.collectionReadTimeIndexPath,{unique:!1})}(e)}))),n<10&&r>=10&&(i=i.next((()=>this.$e(s)))),n<11&&r>=11&&(i=i.next((()=>{!function(t){t.createObjectStore(Ea.store,{keyPath:Ea.keyPath})}(t),function(t){t.createObjectStore(Ta.store,{keyPath:Ta.keyPath})}(t)}))),i}Ne(t){let e=0;return t.store(ma.store).Kt(((t,n)=>{e+=uc(n)})).next((()=>{const n=new ga(e);return t.store(ga.store).put(ga.key,n)}))}Ce(t){const e=t.store(ha.store),n=t.store(la.store);return e.Lt().next((e=>Aa.forEach(e,(e=>{const r=IDBKeyRange.bound([e.userId,-1],[e.userId,e.lastAcknowledgedBatchId]);return n.Lt(la.userMutationsIndex,r).next((n=>Aa.forEach(n,(n=>{kr(n.userId===e.userId);const r=Wa(this.N,n);return cc(t,e.userId,r).next((()=>{}))}))))}))))}xe(t){const e=t.store(va.store),n=t.store(ma.store);return t.store(wa.store).get(wa.key).next((t=>{const r=[];return n.Kt(((n,s)=>{const i=new ts(n),o=function(t){return[0,sa(t)]}(i);r.push(e.get(o).next((n=>n?Aa.resolve():(n=>e.put(new va(0,sa(n),t.highestListenSequenceNumber)))(i))))})).next((()=>Aa.waitFor(r)))}))}ke(t,e){t.createObjectStore(ba.store,{keyPath:ba.keyPath});const n=e.store(ba.store),r=new rc,s=t=>{if(r.add(t)){const e=t.lastSegment(),r=t.popLast();return n.put({collectionId:e,parent:sa(r)})}};return e.store(ma.store).Kt({qt:!0},((t,e)=>{const n=new ts(t);return s(n.popLast())})).next((()=>e.store(da.store).Kt({qt:!0},(([t,e,n],r)=>{const i=aa(e);return s(i.popLast())}))))}$e(t){const e=t.store(ya.store);return e.Kt(((t,n)=>{const r=Ya(n),s=Ja(this.N,r);return e.put(s)}))}}function Mc(t){t.createObjectStore(va.store,{keyPath:va.keyPath}).createIndex(va.documentTargetsIndex,va.documentTargetsKeyPath,{unique:!0}),t.createObjectStore(ya.store,{keyPath:ya.keyPath}).createIndex(ya.queryTargetsIndexName,ya.queryTargetsKeyPath,{unique:!0}),t.createObjectStore(wa.store)}const Pc="Failed to obtain exclusive access to the persistence layer. To allow shared access, multi-tab synchronization has to be enabled in all tabs. If you are using `experimentalForceOwningTab:true`, make sure that only one tab has persistence enabled at any given time.";class Fc{constructor(t,e,n,r,s,i,o,a,c,u){if(this.allowTabSynchronization=t,this.persistenceKey=e,this.clientId=n,this.Oe=s,this.window=i,this.document=o,this.Fe=c,this.Me=u,this.Le=null,this.Be=!1,this.isPrimary=!1,this.networkEnabled=!0,this.Ue=null,this.inForeground=!1,this.qe=null,this.Ke=null,this.je=Number.NEGATIVE_INFINITY,this.Qe=t=>Promise.resolve(),!Fc.bt())throw new Or(Rr.UNIMPLEMENTED,"This platform is either missing IndexedDB or is known to have an incomplete implementation. Offline persistence has been disabled.");this.referenceDelegate=new _c(this,r),this.We=e+"main",this.N=new ja(a),this.Ge=new Ca(this.We,11,new Oc(this.N)),this.ze=new gc(this.referenceDelegate,this.N),this.Ht=new sc,this.He=function(t,e){return new Cc(t,e)}(this.N,this.Ht),this.Je=new Za,this.window&&this.window.localStorage?this.Ye=this.window.localStorage:(this.Ye=null,!1===u&&Nr("IndexedDbPersistence","LocalStorage is unavailable. As a result, persistence may not work reliably. In particular enablePersistence() could fail immediately after refreshing the page."))}start(){return this.Xe().then((()=>{if(!this.isPrimary&&!this.allowTabSynchronization)throw new Or(Rr.FAILED_PRECONDITION,Pc);return this.Ze(),this.tn(),this.en(),this.runTransaction("getHighestListenSequenceNumber","readonly",(t=>this.ze.getHighestSequenceNumber(t)))})).then((t=>{this.Le=new jr(t,this.Fe)})).then((()=>{this.Be=!0})).catch((t=>(this.Ge&&this.Ge.close(),Promise.reject(t))))}nn(t){return this.Qe=async e=>{if(this.started)return t(e)},t(this.isPrimary)}setDatabaseDeletedListener(t){this.Ge.xt((async e=>{null===e.newVersion&&await t()}))}setNetworkEnabled(t){this.networkEnabled!==t&&(this.networkEnabled=t,this.Oe.enqueueAndForget((async()=>{this.started&&await this.Xe()})))}Xe(){return this.runTransaction("updateClientMetadataAndTryBecomePrimary","readwrite",(t=>Uc(t).put(new Ia(this.clientId,Date.now(),this.networkEnabled,this.inForeground)).next((()=>{if(this.isPrimary)return this.sn(t).next((t=>{t||(this.isPrimary=!1,this.Oe.enqueueRetryable((()=>this.Qe(!1))))}))})).next((()=>this.rn(t))).next((e=>this.isPrimary&&!e?this.on(t).next((()=>!1)):!!e&&this.an(t).next((()=>!0)))))).catch((t=>{if(La(t))return _r("IndexedDbPersistence","Failed to extend owner lease: ",t),this.isPrimary;if(!this.allowTabSynchronization)throw t;return _r("IndexedDbPersistence","Releasing owner lease after error during lease refresh",t),!1})).then((t=>{this.isPrimary!==t&&this.Oe.enqueueRetryable((()=>this.Qe(t))),this.isPrimary=t}))}sn(t){return Vc(t).get(ua.key).next((t=>Aa.resolve(this.cn(t))))}un(t){return Uc(t).delete(this.clientId)}async hn(){if(this.isPrimary&&!this.ln(this.je,18e5)){this.je=Date.now();const t=await this.runTransaction("maybeGarbageCollectMultiClientState","readwrite-primary",(t=>{const e=Va(t,Ia.store);return e.Lt().next((t=>{const n=this.fn(t,18e5),r=t.filter((t=>-1===n.indexOf(t)));return Aa.forEach(r,(t=>e.delete(t.clientId))).next((()=>r))}))})).catch((()=>[]));if(this.Ye)for(const e of t)this.Ye.removeItem(this.dn(e.clientId))}}en(){this.Ke=this.Oe.enqueueAfterDelay("client_metadata_refresh",4e3,(()=>this.Xe().then((()=>this.hn())).then((()=>this.en()))))}cn(t){return!!t&&t.ownerId===this.clientId}rn(t){return this.Me?Aa.resolve(!0):Vc(t).get(ua.key).next((e=>{if(null!==e&&this.ln(e.leaseTimestampMs,5e3)&&!this.wn(e.ownerId)){if(this.cn(e)&&this.networkEnabled)return!0;if(!this.cn(e)){if(!e.allowTabSynchronization)throw new Or(Rr.FAILED_PRECONDITION,Pc);return!1}}return!(!this.networkEnabled||!this.inForeground)||Uc(t).Lt().next((t=>void 0===this.fn(t,5e3).find((t=>{if(this.clientId!==t.clientId){const e=!this.networkEnabled&&t.networkEnabled,n=!this.inForeground&&t.inForeground,r=this.networkEnabled===t.networkEnabled;if(e||n&&r)return!0}return!1}))))})).next((t=>(this.isPrimary!==t&&_r("IndexedDbPersistence",`Client ${t?"is":"is not"} eligible for a primary lease.`),t)))}async shutdown(){this.Be=!1,this._n(),this.Ke&&(this.Ke.cancel(),this.Ke=null),this.mn(),this.gn(),await this.Ge.runTransaction("shutdown","readwrite",[ua.store,Ia.store],(t=>{const e=new Fa(t,jr.T);return this.on(e).next((()=>this.un(e)))})),this.Ge.close(),this.yn()}fn(t,e){return t.filter((t=>this.ln(t.updateTimeMs,e)&&!this.wn(t.clientId)))}pn(){return this.runTransaction("getActiveClients","readonly",(t=>Uc(t).Lt().next((t=>this.fn(t,18e5).map((t=>t.clientId))))))}get started(){return this.Be}getMutationQueue(t){return hc.Yt(t,this.N,this.Ht,this.referenceDelegate)}getTargetCache(){return this.ze}getRemoteDocumentCache(){return this.He}getIndexManager(){return this.Ht}getBundleCache(){return this.Je}runTransaction(t,e,n){_r("IndexedDbPersistence","Starting transaction:",t);const r="readonly"===e?"readonly":"readwrite";let s;return this.Ge.runTransaction(t,r,Sa,(r=>(s=new Fa(r,this.Le?this.Le.next():jr.T),"readwrite-primary"===e?this.sn(s).next((t=>!!t||this.rn(s))).next((e=>{if(!e)throw Nr(`Failed to obtain primary lease for action '${t}'.`),this.isPrimary=!1,this.Oe.enqueueRetryable((()=>this.Qe(!1))),new Or(Rr.FAILED_PRECONDITION,_a);return n(s)})).next((t=>this.an(s).next((()=>t)))):this.En(s).next((()=>n(s)))))).then((t=>(s.raiseOnCommittedEvent(),t)))}En(t){return Vc(t).get(ua.key).next((t=>{if(null!==t&&this.ln(t.leaseTimestampMs,5e3)&&!this.wn(t.ownerId)&&!this.cn(t)&&!(this.Me||this.allowTabSynchronization&&t.allowTabSynchronization))throw new Or(Rr.FAILED_PRECONDITION,Pc)}))}an(t){const e=new ua(this.clientId,this.allowTabSynchronization,Date.now());return Vc(t).put(ua.key,e)}static bt(){return Ca.bt()}on(t){const e=Vc(t);return e.get(ua.key).next((t=>this.cn(t)?(_r("IndexedDbPersistence","Releasing primary lease."),e.delete(ua.key)):Aa.resolve()))}ln(t,e){const n=Date.now();return!(t<n-e||t>n&&(Nr(`Detected an update time that is in the future: ${t} > ${n}`),1))}Ze(){null!==this.document&&"function"==typeof this.document.addEventListener&&(this.qe=()=>{this.Oe.enqueueAndForget((()=>(this.inForeground="visible"===this.document.visibilityState,this.Xe())))},this.document.addEventListener("visibilitychange",this.qe),this.inForeground="visible"===this.document.visibilityState)}mn(){this.qe&&(this.document.removeEventListener("visibilitychange",this.qe),this.qe=null)}tn(){var t;"function"==typeof(null===(t=this.window)||void 0===t?void 0:t.addEventListener)&&(this.Ue=()=>{this._n(),(0,o.G6)()&&navigator.appVersion.match("Version/14")&&this.Oe.enterRestrictedMode(!0),this.Oe.enqueueAndForget((()=>this.shutdown()))},this.window.addEventListener("pagehide",this.Ue))}gn(){this.Ue&&(this.window.removeEventListener("pagehide",this.Ue),this.Ue=null)}wn(t){var e;try{const n=null!==(null===(e=this.Ye)||void 0===e?void 0:e.getItem(this.dn(t)));return _r("IndexedDbPersistence",`Client '${t}' ${n?"is":"is not"} zombied in LocalStorage`),n}catch(t){return Nr("IndexedDbPersistence","Failed to get zombied client id.",t),!1}}_n(){if(this.Ye)try{this.Ye.setItem(this.dn(this.clientId),String(Date.now()))}catch(t){Nr("Failed to set zombie client id.",t)}}yn(){if(this.Ye)try{this.Ye.removeItem(this.dn(this.clientId))}catch(t){}}dn(t){return`firestore_zombie_${this.persistenceKey}_${t}`}}function Vc(t){return Va(t,ua.store)}function Uc(t){return Va(t,Ia.store)}function qc(t,e){let n=t.projectId;return t.isDefaultDatabase||(n+="."+t.database),"firestore/"+e+"/"+n+"/"}class Bc{constructor(t,e){this.progress=t,this.Tn=e}}class jc{constructor(t,e,n){this.He=t,this.In=e,this.Ht=n}An(t,e){return this.In.getAllMutationBatchesAffectingDocumentKey(t,e).next((n=>this.Rn(t,e,n)))}Rn(t,e,n){return this.He.getEntry(t,e).next((t=>{for(const e of n)e.applyToLocalView(t);return t}))}bn(t,e){t.forEach(((t,n)=>{for(const t of e)t.applyToLocalView(n)}))}Pn(t,e){return this.He.getEntries(t,e).next((e=>this.vn(t,e).next((()=>e))))}vn(t,e){return this.In.getAllMutationBatchesAffectingDocumentKeys(t,e).next((t=>this.bn(e,t)))}getDocumentsMatchingQuery(t,e,n){return function(t){return gs.isDocumentKey(t.path)&&null===t.collectionGroup&&0===t.filters.length}(e)?this.Vn(t,e.path):ai(e)?this.Sn(t,e,n):this.Dn(t,e,n)}Vn(t,e){return this.An(t,new gs(e)).next((t=>{let e=co();return t.isFoundDocument()&&(e=e.insert(t.key,t)),e}))}Sn(t,e,n){const r=e.collectionGroup;let s=co();return this.Ht.getCollectionParents(t,r).next((i=>Aa.forEach(i,(i=>{const o=function(t,e){return new ti(e,null,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(e,i.child(r));return this.Dn(t,o,n).next((t=>{t.forEach(((t,e)=>{s=s.insert(t,e)}))}))})).next((()=>s))))}Dn(t,e,n){let r,s;return this.He.getDocumentsMatchingQuery(t,e,n).next((n=>(r=n,this.In.getAllMutationBatchesAffectingQuery(t,e)))).next((e=>(s=e,this.Cn(t,s,r).next((t=>{r=t;for(const t of s)for(const e of t.mutations){const n=e.key;let s=r.get(n);null==s&&(s=Rs.newInvalidDocument(n),r=r.insert(n,s)),Vi(e,s,t.localWriteTime),s.isFoundDocument()||(r=r.remove(n))}}))))).next((()=>(r.forEach(((t,n)=>{pi(e,n)||(r=r.remove(t))})),r)))}Cn(t,e,n){let r=fo();for(const t of e)for(const e of t.mutations)e instanceof Ki&&null===n.get(e.key)&&(r=r.add(e.key));let s=n;return this.He.getEntries(t,r).next((t=>(t.forEach(((t,e)=>{e.isFoundDocument()&&(s=s.insert(t,e))})),s)))}}class Kc{constructor(t,e,n,r){this.targetId=t,this.fromCache=e,this.Nn=n,this.xn=r}static kn(t,e){let n=fo(),r=fo();for(const t of e.docChanges)switch(t.type){case 0:n=n.add(t.doc.key);break;case 1:r=r.add(t.doc.key)}return new Kc(t,e.fromCache,n,r)}}class zc{$n(t){this.On=t}getDocumentsMatchingQuery(t,e,n,r){return function(t){return 0===t.filters.length&&null===t.limit&&null==t.startAt&&null==t.endAt&&(0===t.explicitOrderBy.length||1===t.explicitOrderBy.length&&t.explicitOrderBy[0].field.isKeyField())}(e)||n.isEqual(Wr.min())?this.Fn(t,e):this.On.Pn(t,r).next((s=>{const o=this.Mn(e,s);return(ri(e)||si(e))&&this.Ln(e.limitType,o,r,n)?this.Fn(t,e):(Tr()<=i.in.DEBUG&&_r("QueryEngine","Re-using previous result from %s to execute query: %s",n.toString(),fi(e)),this.On.getDocumentsMatchingQuery(t,e,n).next((t=>(o.forEach((e=>{t=t.insert(e.key,e)})),t))))}))}Mn(t,e){let n=new ro(mi(t));return e.forEach(((e,r)=>{pi(t,r)&&(n=n.add(r))})),n}Ln(t,e,n,r){if(n.size!==e.size)return!0;const s="F"===t?e.last():e.first();return!!s&&(s.hasPendingWrites||s.version.compareTo(r)>0)}Fn(t,e){return Tr()<=i.in.DEBUG&&_r("QueryEngine","Using full collection scan to execute query:",fi(e)),this.On.getDocumentsMatchingQuery(t,e,Wr.min())}}class $c{constructor(t,e,n,r){this.persistence=t,this.Bn=e,this.N=r,this.Un=new to($r),this.qn=new Ac((t=>Ps(t)),Fs),this.Kn=Wr.min(),this.In=t.getMutationQueue(n),this.jn=t.getRemoteDocumentCache(),this.ze=t.getTargetCache(),this.Qn=new jc(this.jn,this.In,this.persistence.getIndexManager()),this.Je=t.getBundleCache(),this.Bn.$n(this.Qn)}collectGarbage(t){return this.persistence.runTransaction("Collect garbage","readwrite-primary",(e=>t.collect(e,this.Un)))}}function Gc(t,e,n,r){return new $c(t,e,n,r)}async function Hc(t,e){const n=Lr(t);let r=n.In,s=n.Qn;const i=await n.persistence.runTransaction("Handle user change","readonly",(t=>{let i;return n.In.getAllMutationBatches(t).next((o=>(i=o,r=n.persistence.getMutationQueue(e),s=new jc(n.jn,r,n.persistence.getIndexManager()),r.getAllMutationBatches(t)))).next((e=>{const n=[],r=[];let o=fo();for(const t of i){n.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}for(const t of e){r.push(t.batchId);for(const e of t.mutations)o=o.add(e.key)}return s.Pn(t,o).next((t=>({Wn:t,removedBatchIds:n,addedBatchIds:r})))}))}));return n.In=r,n.Qn=s,n.Bn.$n(n.Qn),i}function Qc(t){const e=Lr(t);return e.persistence.runTransaction("Get last remote snapshot version","readonly",(t=>e.ze.getLastRemoteSnapshotVersion(t)))}function Wc(t,e,n,r,s){let i=fo();return n.forEach((t=>i=i.add(t))),e.getEntries(t,i).next((t=>{let i=oo();return n.forEach(((n,o)=>{const a=t.get(n),c=(null==s?void 0:s.get(n))||r;o.isNoDocument()&&o.version.isEqual(Wr.min())?(e.removeEntry(n,c),i=i.insert(n,o)):!a.isValidDocument()||o.version.compareTo(a.version)>0||0===o.version.compareTo(a.version)&&a.hasPendingWrites?(e.addEntry(o,c),i=i.insert(n,o)):_r("LocalStore","Ignoring outdated watch update for ",n,". Current version:",a.version," Watch version:",o.version)})),i}))}function Yc(t,e){const n=Lr(t);return n.persistence.runTransaction("Get next mutation batch","readonly",(t=>(void 0===e&&(e=-1),n.In.getNextMutationBatchAfterBatchId(t,e))))}function Jc(t,e){const n=Lr(t);return n.persistence.runTransaction("Allocate target","readwrite",(t=>{let r;return n.ze.getTargetData(t,e).next((s=>s?(r=s,Aa.resolve(r)):n.ze.allocateTargetId(t).next((s=>(r=new Ba(e,s,0,t.currentSequenceNumber),n.ze.addTargetData(t,r).next((()=>r)))))))})).then((t=>{const r=n.Un.get(t.targetId);return(null===r||t.snapshotVersion.compareTo(r.snapshotVersion)>0)&&(n.Un=n.Un.insert(t.targetId,t),n.qn.set(e,t.targetId)),t}))}async function Xc(t,e,n){const r=Lr(t),s=r.Un.get(e),i=n?"readwrite":"readwrite-primary";try{n||await r.persistence.runTransaction("Release target",i,(t=>r.persistence.referenceDelegate.removeTarget(t,s)))}catch(t){if(!La(t))throw t;_r("LocalStore",`Failed to update sequence numbers for target ${e}: ${t}`)}r.Un=r.Un.remove(e),r.qn.delete(s.target)}function Zc(t,e,n){const r=Lr(t);let s=Wr.min(),i=fo();return r.persistence.runTransaction("Execute query","readonly",(t=>function(t,e,n){const r=Lr(t),s=r.qn.get(n);return void 0!==s?Aa.resolve(r.Un.get(s)):r.ze.getTargetData(e,n)}(r,t,ui(e)).next((e=>{if(e)return s=e.lastLimboFreeSnapshotVersion,r.ze.getMatchingKeysForTargetId(t,e.targetId).next((t=>{i=t}))})).next((()=>r.Bn.getDocumentsMatchingQuery(t,e,n?s:Wr.min(),n?i:fo()))).next((t=>({documents:t,Gn:i})))))}function tu(t,e){const n=Lr(t),r=Lr(n.ze),s=n.Un.get(e);return s?Promise.resolve(s.target):n.persistence.runTransaction("Get target data","readonly",(t=>r.Et(t,e).next((t=>t?t.target:null))))}function eu(t){const e=Lr(t);return e.persistence.runTransaction("Get new document changes","readonly",(t=>function(t,e,n){const r=Lr(t);let s=oo(),i=$a(n);const o=Lc(e),a=IDBKeyRange.lowerBound(i,!0);return o.Kt({index:ma.readTimeIndex,range:a},((t,e)=>{const n=Ka(r.N,e);s=s.insert(n.key,n),i=e.readTime})).next((()=>({Tn:s,readTime:Ga(i)})))}(e.jn,t,e.Kn))).then((({Tn:t,readTime:n})=>(e.Kn=n,t)))}async function nu(t,e,n=fo()){const r=await Jc(t,ui(Xa(e.bundledQuery))),s=Lr(t);return s.persistence.runTransaction("Save named query","readwrite",(t=>{const i=xo(e.readTime);if(r.snapshotVersion.compareTo(i)>=0)return s.Je.saveNamedQuery(t,e);const o=r.withResumeToken(is.EMPTY_BYTE_STRING,i);return s.Un=s.Un.insert(o.targetId,o),s.ze.updateTargetData(t,o).next((()=>s.ze.removeMatchingKeysForTargetId(t,r.targetId))).next((()=>s.ze.addMatchingKeys(t,n,r.targetId))).next((()=>s.Je.saveNamedQuery(t,e)))}))}class ru{constructor(t){this.N=t,this.Yn=new Map,this.Xn=new Map}getBundleMetadata(t,e){return Aa.resolve(this.Yn.get(e))}saveBundleMetadata(t,e){var n;return this.Yn.set(e.id,{id:(n=e).id,version:n.version,createTime:xo(n.createTime)}),Aa.resolve()}getNamedQuery(t,e){return Aa.resolve(this.Xn.get(e))}saveNamedQuery(t,e){return this.Xn.set(e.name,function(t){return{name:t.name,query:Xa(t.bundledQuery),readTime:xo(t.readTime)}}(e)),Aa.resolve()}}class su{constructor(){this.Zn=new ro(iu.ts),this.es=new ro(iu.ns)}isEmpty(){return this.Zn.isEmpty()}addReference(t,e){const n=new iu(t,e);this.Zn=this.Zn.add(n),this.es=this.es.add(n)}ss(t,e){t.forEach((t=>this.addReference(t,e)))}removeReference(t,e){this.rs(new iu(t,e))}os(t,e){t.forEach((t=>this.removeReference(t,e)))}cs(t){const e=new gs(new ts([])),n=new iu(e,t),r=new iu(e,t+1),s=[];return this.es.forEachInRange([n,r],(t=>{this.rs(t),s.push(t.key)})),s}us(){this.Zn.forEach((t=>this.rs(t)))}rs(t){this.Zn=this.Zn.delete(t),this.es=this.es.delete(t)}hs(t){const e=new gs(new ts([])),n=new iu(e,t),r=new iu(e,t+1);let s=fo();return this.es.forEachInRange([n,r],(t=>{s=s.add(t.key)})),s}containsKey(t){const e=new iu(t,0),n=this.Zn.firstAfterOrEqual(e);return null!==n&&t.isEqual(n.key)}}class iu{constructor(t,e){this.key=t,this.ls=e}static ts(t,e){return gs.comparator(t.key,e.key)||$r(t.ls,e.ls)}static ns(t,e){return $r(t.ls,e.ls)||gs.comparator(t.key,e.key)}}class ou{constructor(t,e){this.Ht=t,this.referenceDelegate=e,this.In=[],this.fs=1,this.ds=new ro(iu.ts)}checkEmpty(t){return Aa.resolve(0===this.In.length)}addMutationBatch(t,e,n,r){const s=this.fs;this.fs++,this.In.length>0&&this.In[this.In.length-1];const i=new Ua(s,e,n,r);this.In.push(i);for(const e of r)this.ds=this.ds.add(new iu(e.key,s)),this.Ht.addToCollectionParentIndex(t,e.key.path.popLast());return Aa.resolve(i)}lookupMutationBatch(t,e){return Aa.resolve(this.ws(e))}getNextMutationBatchAfterBatchId(t,e){const n=e+1,r=this._s(n),s=r<0?0:r;return Aa.resolve(this.In.length>s?this.In[s]:null)}getHighestUnacknowledgedBatchId(){return Aa.resolve(0===this.In.length?-1:this.fs-1)}getAllMutationBatches(t){return Aa.resolve(this.In.slice())}getAllMutationBatchesAffectingDocumentKey(t,e){const n=new iu(e,0),r=new iu(e,Number.POSITIVE_INFINITY),s=[];return this.ds.forEachInRange([n,r],(t=>{const e=this.ws(t.ls);s.push(e)})),Aa.resolve(s)}getAllMutationBatchesAffectingDocumentKeys(t,e){let n=new ro($r);return e.forEach((t=>{const e=new iu(t,0),r=new iu(t,Number.POSITIVE_INFINITY);this.ds.forEachInRange([e,r],(t=>{n=n.add(t.ls)}))})),Aa.resolve(this.gs(n))}getAllMutationBatchesAffectingQuery(t,e){const n=e.path,r=n.length+1;let s=n;gs.isDocumentKey(s)||(s=s.child(""));const i=new iu(new gs(s),0);let o=new ro($r);return this.ds.forEachWhile((t=>{const e=t.key.path;return!!n.isPrefixOf(e)&&(e.length===r&&(o=o.add(t.ls)),!0)}),i),Aa.resolve(this.gs(o))}gs(t){const e=[];return t.forEach((t=>{const n=this.ws(t);null!==n&&e.push(n)})),e}removeMutationBatch(t,e){kr(0===this.ys(e.batchId,"removed")),this.In.shift();let n=this.ds;return Aa.forEach(e.mutations,(r=>{const s=new iu(r.key,e.batchId);return n=n.delete(s),this.referenceDelegate.markPotentiallyOrphaned(t,r.key)})).next((()=>{this.ds=n}))}te(t){}containsKey(t,e){const n=new iu(e,0),r=this.ds.firstAfterOrEqual(n);return Aa.resolve(e.isEqual(r&&r.key))}performConsistencyCheck(t){return this.In.length,Aa.resolve()}ys(t,e){return this._s(t)}_s(t){return 0===this.In.length?0:t-this.In[0].batchId}ws(t){const e=this._s(t);return e<0||e>=this.In.length?null:this.In[e]}}class au{constructor(t,e){this.Ht=t,this.ps=e,this.docs=new to(gs.comparator),this.size=0}addEntry(t,e,n){const r=e.key,s=this.docs.get(r),i=s?s.size:0,o=this.ps(e);return this.docs=this.docs.insert(r,{document:e.clone(),size:o,readTime:n}),this.size+=o-i,this.Ht.addToCollectionParentIndex(t,r.path.popLast())}removeEntry(t){const e=this.docs.get(t);e&&(this.docs=this.docs.remove(t),this.size-=e.size)}getEntry(t,e){const n=this.docs.get(e);return Aa.resolve(n?n.document.clone():Rs.newInvalidDocument(e))}getEntries(t,e){let n=oo();return e.forEach((t=>{const e=this.docs.get(t);n=n.insert(t,e?e.document.clone():Rs.newInvalidDocument(t))})),Aa.resolve(n)}getDocumentsMatchingQuery(t,e,n){let r=oo();const s=new gs(e.path.child("")),i=this.docs.getIteratorFrom(s);for(;i.hasNext();){const{key:t,value:{document:s,readTime:o}}=i.getNext();if(!e.path.isPrefixOf(t.path))break;o.compareTo(n)<=0||pi(e,s)&&(r=r.insert(s.key,s.clone()))}return Aa.resolve(r)}Es(t,e){return Aa.forEach(this.docs,(t=>e(t)))}newChangeBuffer(t){return new cu(this)}getSize(t){return Aa.resolve(this.size)}}class cu extends Dc{constructor(t){super(),this.Se=t}applyChanges(t){const e=[];return this.changes.forEach(((n,r)=>{r.document.isValidDocument()?e.push(this.Se.addEntry(t,r.document,this.getReadTime(n))):this.Se.removeEntry(n)})),Aa.waitFor(e)}getFromCache(t,e){return this.Se.getEntry(t,e)}getAllFromCache(t,e){return this.Se.getEntries(t,e)}}class uu{constructor(t){this.persistence=t,this.Ts=new Ac((t=>Ps(t)),Fs),this.lastRemoteSnapshotVersion=Wr.min(),this.highestTargetId=0,this.Is=0,this.As=new su,this.targetCount=0,this.Rs=mc.se()}forEachTarget(t,e){return this.Ts.forEach(((t,n)=>e(n))),Aa.resolve()}getLastRemoteSnapshotVersion(t){return Aa.resolve(this.lastRemoteSnapshotVersion)}getHighestSequenceNumber(t){return Aa.resolve(this.Is)}allocateTargetId(t){return this.highestTargetId=this.Rs.next(),Aa.resolve(this.highestTargetId)}setTargetsMetadata(t,e,n){return n&&(this.lastRemoteSnapshotVersion=n),e>this.Is&&(this.Is=e),Aa.resolve()}ae(t){this.Ts.set(t.target,t);const e=t.targetId;e>this.highestTargetId&&(this.Rs=new mc(e),this.highestTargetId=e),t.sequenceNumber>this.Is&&(this.Is=t.sequenceNumber)}addTargetData(t,e){return this.ae(e),this.targetCount+=1,Aa.resolve()}updateTargetData(t,e){return this.ae(e),Aa.resolve()}removeTargetData(t,e){return this.Ts.delete(e.target),this.As.cs(e.targetId),this.targetCount-=1,Aa.resolve()}removeTargets(t,e,n){let r=0;const s=[];return this.Ts.forEach(((i,o)=>{o.sequenceNumber<=e&&null===n.get(o.targetId)&&(this.Ts.delete(i),s.push(this.removeMatchingKeysForTargetId(t,o.targetId)),r++)})),Aa.waitFor(s).next((()=>r))}getTargetCount(t){return Aa.resolve(this.targetCount)}getTargetData(t,e){const n=this.Ts.get(e)||null;return Aa.resolve(n)}addMatchingKeys(t,e,n){return this.As.ss(e,n),Aa.resolve()}removeMatchingKeys(t,e,n){this.As.os(e,n);const r=this.persistence.referenceDelegate,s=[];return r&&e.forEach((e=>{s.push(r.markPotentiallyOrphaned(t,e))})),Aa.waitFor(s)}removeMatchingKeysForTargetId(t,e){return this.As.cs(e),Aa.resolve()}getMatchingKeysForTargetId(t,e){const n=this.As.hs(e);return Aa.resolve(n)}containsKey(t,e){return Aa.resolve(this.As.containsKey(e))}}class hu{constructor(t,e){this.bs={},this.Le=new jr(0),this.Be=!1,this.Be=!0,this.referenceDelegate=t(this),this.ze=new uu(this),this.Ht=new nc,this.He=function(t,e){return new au(t,e)}(this.Ht,(t=>this.referenceDelegate.Ps(t))),this.N=new ja(e),this.Je=new ru(this.N)}start(){return Promise.resolve()}shutdown(){return this.Be=!1,Promise.resolve()}get started(){return this.Be}setDatabaseDeletedListener(){}setNetworkEnabled(){}getIndexManager(){return this.Ht}getMutationQueue(t){let e=this.bs[t.toKey()];return e||(e=new ou(this.Ht,this.referenceDelegate),this.bs[t.toKey()]=e),e}getTargetCache(){return this.ze}getRemoteDocumentCache(){return this.He}getBundleCache(){return this.Je}runTransaction(t,e,n){_r("MemoryPersistence","Starting transaction:",t);const r=new lu(this.Le.next());return this.referenceDelegate.vs(),n(r).next((t=>this.referenceDelegate.Vs(r).next((()=>t)))).toPromise().then((t=>(r.raiseOnCommittedEvent(),t)))}Ss(t,e){return Aa.or(Object.values(this.bs).map((n=>()=>n.containsKey(t,e))))}}class lu extends Na{constructor(t){super(),this.currentSequenceNumber=t}}class du{constructor(t){this.persistence=t,this.Ds=new su,this.Cs=null}static Ns(t){return new du(t)}get xs(){if(this.Cs)return this.Cs;throw Cr()}addReference(t,e,n){return this.Ds.addReference(n,e),this.xs.delete(n.toString()),Aa.resolve()}removeReference(t,e,n){return this.Ds.removeReference(n,e),this.xs.add(n.toString()),Aa.resolve()}markPotentiallyOrphaned(t,e){return this.xs.add(e.toString()),Aa.resolve()}removeTarget(t,e){this.Ds.cs(e.targetId).forEach((t=>this.xs.add(t.toString())));const n=this.persistence.getTargetCache();return n.getMatchingKeysForTargetId(t,e.targetId).next((t=>{t.forEach((t=>this.xs.add(t.toString())))})).next((()=>n.removeTargetData(t,e)))}vs(){this.Cs=new Set}Vs(t){const e=this.persistence.getRemoteDocumentCache().newChangeBuffer();return Aa.forEach(this.xs,(n=>{const r=gs.fromPath(n);return this.ks(t,r).next((t=>{t||e.removeEntry(r)}))})).next((()=>(this.Cs=null,e.apply(t))))}updateLimboDocument(t,e){return this.ks(t,e).next((t=>{t?this.xs.delete(e.toString()):this.xs.add(e.toString())}))}Ps(t){return 0}ks(t,e){return Aa.or([()=>Aa.resolve(this.Ds.containsKey(e)),()=>this.persistence.getTargetCache().containsKey(t,e),()=>this.persistence.Ss(t,e)])}}function fu(t,e){return`firestore_clients_${t}_${e}`}function pu(t,e,n){let r=`firestore_mutations_${t}_${n}`;return e.isAuthenticated()&&(r+=`_${e.uid}`),r}function mu(t,e){return`firestore_targets_${t}_${e}`}class gu{constructor(t,e,n,r){this.user=t,this.batchId=e,this.state=n,this.error=r}static $s(t,e,n){const r=JSON.parse(n);let s,i="object"==typeof r&&-1!==["pending","acknowledged","rejected"].indexOf(r.state)&&(void 0===r.error||"object"==typeof r.error);return i&&r.error&&(i="string"==typeof r.error.message&&"string"==typeof r.error.code,i&&(s=new Or(r.error.code,r.error.message))),i?new gu(t,e,r.state,s):(Nr("SharedClientState",`Failed to parse mutation state for ID '${e}': ${n}`),null)}Os(){const t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)}}class yu{constructor(t,e,n){this.targetId=t,this.state=e,this.error=n}static $s(t,e){const n=JSON.parse(e);let r,s="object"==typeof n&&-1!==["not-current","current","rejected"].indexOf(n.state)&&(void 0===n.error||"object"==typeof n.error);return s&&n.error&&(s="string"==typeof n.error.message&&"string"==typeof n.error.code,s&&(r=new Or(n.error.code,n.error.message))),s?new yu(t,n.state,r):(Nr("SharedClientState",`Failed to parse target state for ID '${t}': ${e}`),null)}Os(){const t={state:this.state,updateTimeMs:Date.now()};return this.error&&(t.error={code:this.error.code,message:this.error.message}),JSON.stringify(t)}}class vu{constructor(t,e){this.clientId=t,this.activeTargetIds=e}static $s(t,e){const n=JSON.parse(e);let r="object"==typeof n&&n.activeTargetIds instanceof Array,s=mo();for(let t=0;r&&t<n.activeTargetIds.length;++t)r=ms(n.activeTargetIds[t]),s=s.add(n.activeTargetIds[t]);return r?new vu(t,s):(Nr("SharedClientState",`Failed to parse client data for instance '${t}': ${e}`),null)}}class wu{constructor(t,e){this.clientId=t,this.onlineState=e}static $s(t){const e=JSON.parse(t);return"object"==typeof e&&-1!==["Unknown","Online","Offline"].indexOf(e.onlineState)&&"string"==typeof e.clientId?new wu(e.clientId,e.onlineState):(Nr("SharedClientState",`Failed to parse online state: ${t}`),null)}}class bu{constructor(){this.activeTargetIds=mo()}Fs(t){this.activeTargetIds=this.activeTargetIds.add(t)}Ms(t){this.activeTargetIds=this.activeTargetIds.delete(t)}Os(){const t={activeTargetIds:this.activeTargetIds.toArray(),updateTimeMs:Date.now()};return JSON.stringify(t)}}class Iu{constructor(t,e,n,r,s){this.window=t,this.Oe=e,this.persistenceKey=n,this.Ls=r,this.syncEngine=null,this.onlineStateHandler=null,this.sequenceNumberHandler=null,this.Bs=this.Us.bind(this),this.qs=new to($r),this.started=!1,this.Ks=[];const i=n.replace(/[.*+?^${}()|[\]\\]/g,"\\$&");this.storage=this.window.localStorage,this.currentUser=s,this.js=fu(this.persistenceKey,this.Ls),this.Qs=function(t){return`firestore_sequence_number_${t}`}(this.persistenceKey),this.qs=this.qs.insert(this.Ls,new bu),this.Ws=new RegExp(`^firestore_clients_${i}_([^_]*)$`),this.Gs=new RegExp(`^firestore_mutations_${i}_(\\d+)(?:_(.*))?$`),this.zs=new RegExp(`^firestore_targets_${i}_(\\d+)$`),this.Hs=function(t){return`firestore_online_state_${t}`}(this.persistenceKey),this.Js=function(t){return`firestore_bundle_loaded_${t}`}(this.persistenceKey),this.window.addEventListener("storage",this.Bs)}static bt(t){return!(!t||!t.localStorage)}async start(){const t=await this.syncEngine.pn();for(const e of t){if(e===this.Ls)continue;const t=this.getItem(fu(this.persistenceKey,e));if(t){const n=vu.$s(e,t);n&&(this.qs=this.qs.insert(n.clientId,n))}}this.Ys();const e=this.storage.getItem(this.Hs);if(e){const t=this.Xs(e);t&&this.Zs(t)}for(const t of this.Ks)this.Us(t);this.Ks=[],this.window.addEventListener("pagehide",(()=>this.shutdown())),this.started=!0}writeSequenceNumber(t){this.setItem(this.Qs,JSON.stringify(t))}getAllActiveQueryTargets(){return this.ti(this.qs)}isActiveQueryTarget(t){let e=!1;return this.qs.forEach(((n,r)=>{r.activeTargetIds.has(t)&&(e=!0)})),e}addPendingMutation(t){this.ei(t,"pending")}updateMutationState(t,e,n){this.ei(t,e,n),this.ni(t)}addLocalQueryTarget(t){let e="not-current";if(this.isActiveQueryTarget(t)){const n=this.storage.getItem(mu(this.persistenceKey,t));if(n){const r=yu.$s(t,n);r&&(e=r.state)}}return this.si.Fs(t),this.Ys(),e}removeLocalQueryTarget(t){this.si.Ms(t),this.Ys()}isLocalQueryTarget(t){return this.si.activeTargetIds.has(t)}clearQueryState(t){this.removeItem(mu(this.persistenceKey,t))}updateQueryState(t,e,n){this.ii(t,e,n)}handleUserChange(t,e,n){e.forEach((t=>{this.ni(t)})),this.currentUser=t,n.forEach((t=>{this.addPendingMutation(t)}))}setOnlineState(t){this.ri(t)}notifyBundleLoaded(){this.oi()}shutdown(){this.started&&(this.window.removeEventListener("storage",this.Bs),this.removeItem(this.js),this.started=!1)}getItem(t){const e=this.storage.getItem(t);return _r("SharedClientState","READ",t,e),e}setItem(t,e){_r("SharedClientState","SET",t,e),this.storage.setItem(t,e)}removeItem(t){_r("SharedClientState","REMOVE",t),this.storage.removeItem(t)}Us(t){const e=t;if(e.storageArea===this.storage){if(_r("SharedClientState","EVENT",e.key,e.newValue),e.key===this.js)return void Nr("Received WebStorage notification for local change. Another client might have garbage-collected our state");this.Oe.enqueueRetryable((async()=>{if(this.started){if(null!==e.key)if(this.Ws.test(e.key)){if(null==e.newValue){const t=this.ai(e.key);return this.ci(t,null)}{const t=this.ui(e.key,e.newValue);if(t)return this.ci(t.clientId,t)}}else if(this.Gs.test(e.key)){if(null!==e.newValue){const t=this.hi(e.key,e.newValue);if(t)return this.li(t)}}else if(this.zs.test(e.key)){if(null!==e.newValue){const t=this.fi(e.key,e.newValue);if(t)return this.di(t)}}else if(e.key===this.Hs){if(null!==e.newValue){const t=this.Xs(e.newValue);if(t)return this.Zs(t)}}else if(e.key===this.Qs){const t=function(t){let e=jr.T;if(null!=t)try{const n=JSON.parse(t);kr("number"==typeof n),e=n}catch(t){Nr("SharedClientState","Failed to read sequence number from WebStorage",t)}return e}(e.newValue);t!==jr.T&&this.sequenceNumberHandler(t)}else if(e.key===this.Js)return this.syncEngine.wi()}else this.Ks.push(e)}))}}get si(){return this.qs.get(this.Ls)}Ys(){this.setItem(this.js,this.si.Os())}ei(t,e,n){const r=new gu(this.currentUser,t,e,n),s=pu(this.persistenceKey,this.currentUser,t);this.setItem(s,r.Os())}ni(t){const e=pu(this.persistenceKey,this.currentUser,t);this.removeItem(e)}ri(t){const e={clientId:this.Ls,onlineState:t};this.storage.setItem(this.Hs,JSON.stringify(e))}ii(t,e,n){const r=mu(this.persistenceKey,t),s=new yu(t,e,n);this.setItem(r,s.Os())}oi(){this.setItem(this.Js,"value-not-used")}ai(t){const e=this.Ws.exec(t);return e?e[1]:null}ui(t,e){const n=this.ai(t);return vu.$s(n,e)}hi(t,e){const n=this.Gs.exec(t),r=Number(n[1]),s=void 0!==n[2]?n[2]:null;return gu.$s(new br(s),r,e)}fi(t,e){const n=this.zs.exec(t),r=Number(n[1]);return yu.$s(r,e)}Xs(t){return wu.$s(t)}async li(t){if(t.user.uid===this.currentUser.uid)return this.syncEngine._i(t.batchId,t.state,t.error);_r("SharedClientState",`Ignoring mutation for non-active user ${t.user.uid}`)}di(t){return this.syncEngine.mi(t.targetId,t.state,t.error)}ci(t,e){const n=e?this.qs.insert(t,e):this.qs.remove(t),r=this.ti(this.qs),s=this.ti(n),i=[],o=[];return s.forEach((t=>{r.has(t)||i.push(t)})),r.forEach((t=>{s.has(t)||o.push(t)})),this.syncEngine.gi(i,o).then((()=>{this.qs=n}))}Zs(t){this.qs.get(t.clientId)&&this.onlineStateHandler(t.onlineState)}ti(t){let e=mo();return t.forEach(((t,n)=>{e=e.unionWith(n.activeTargetIds)})),e}}class Eu{constructor(){this.yi=new bu,this.pi={},this.onlineStateHandler=null,this.sequenceNumberHandler=null}addPendingMutation(t){}updateMutationState(t,e,n){}addLocalQueryTarget(t){return this.yi.Fs(t),this.pi[t]||"not-current"}updateQueryState(t,e,n){this.pi[t]=e}removeLocalQueryTarget(t){this.yi.Ms(t)}isLocalQueryTarget(t){return this.yi.activeTargetIds.has(t)}clearQueryState(t){delete this.pi[t]}getAllActiveQueryTargets(){return this.yi.activeTargetIds}isActiveQueryTarget(t){return this.yi.activeTargetIds.has(t)}start(){return this.yi=new bu,Promise.resolve()}handleUserChange(t,e,n){}setOnlineState(t){}shutdown(){}writeSequenceNumber(t){}notifyBundleLoaded(){}}class Tu{Ei(t){}shutdown(){}}class Su{constructor(){this.Ti=()=>this.Ii(),this.Ai=()=>this.Ri(),this.bi=[],this.Pi()}Ei(t){this.bi.push(t)}shutdown(){window.removeEventListener("online",this.Ti),window.removeEventListener("offline",this.Ai)}Pi(){window.addEventListener("online",this.Ti),window.addEventListener("offline",this.Ai)}Ii(){_r("ConnectivityMonitor","Network connectivity changed: AVAILABLE");for(const t of this.bi)t(0)}Ri(){_r("ConnectivityMonitor","Network connectivity changed: UNAVAILABLE");for(const t of this.bi)t(1)}static bt(){return"undefined"!=typeof window&&void 0!==window.addEventListener&&void 0!==window.removeEventListener}}const _u={BatchGetDocuments:"batchGet",Commit:"commit",RunQuery:"runQuery"};class Nu{constructor(t){this.vi=t.vi,this.Vi=t.Vi}Si(t){this.Di=t}Ci(t){this.Ni=t}onMessage(t){this.xi=t}close(){this.Vi()}send(t){this.vi(t)}ki(){this.Di()}$i(t){this.Ni(t)}Oi(t){this.xi(t)}}class Au extends class{constructor(t){this.databaseInfo=t,this.databaseId=t.databaseId;const e=t.ssl?"https":"http";this.Fi=e+"://"+t.host,this.Mi="projects/"+this.databaseId.projectId+"/databases/"+this.databaseId.database+"/documents"}Li(t,e,n,r){const s=this.Bi(t,e);_r("RestConnection","Sending: ",s,n);const i={};return this.Ui(i,r),this.qi(t,s,i,n).then((t=>(_r("RestConnection","Received: ",t),t)),(e=>{throw Ar("RestConnection",`${t} failed with error: `,e,"url: ",s,"request:",n),e}))}Ki(t,e,n,r){return this.Li(t,e,n,r)}Ui(t,e){if(t["X-Goog-Api-Client"]="gl-js/ fire/"+Ir,t["Content-Type"]="text/plain",this.databaseInfo.appId&&(t["X-Firebase-GMPID"]=this.databaseInfo.appId),e)for(const n in e.authHeaders)e.authHeaders.hasOwnProperty(n)&&(t[n]=e.authHeaders[n])}Bi(t,e){const n=_u[t];return`${this.Fi}/v1/${e}:${n}`}}{constructor(t){super(t),this.forceLongPolling=t.forceLongPolling,this.autoDetectLongPolling=t.autoDetectLongPolling,this.useFetchStreams=t.useFetchStreams}qi(t,e,n,r){return new Promise(((s,i)=>{const o=new wr;o.listenOnce(fr.COMPLETE,(()=>{try{switch(o.getLastErrorCode()){case dr.NO_ERROR:const e=o.getResponseJson();_r("Connection","XHR received:",JSON.stringify(e)),s(e);break;case dr.TIMEOUT:_r("Connection",'RPC "'+t+'" timed out'),i(new Or(Rr.DEADLINE_EXCEEDED,"Request time out"));break;case dr.HTTP_ERROR:const n=o.getStatus();if(_r("Connection",'RPC "'+t+'" failed with status:',n,"response text:",o.getResponseText()),n>0){const t=o.getResponseJson().error;if(t&&t.status&&t.message){const e=function(t){const e=t.toLowerCase().replace(/_/g,"-");return Object.values(Rr).indexOf(e)>=0?e:Rr.UNKNOWN}(t.status);i(new Or(e,t.message))}else i(new Or(Rr.UNKNOWN,"Server responded with status "+o.getStatus()))}else i(new Or(Rr.UNAVAILABLE,"Connection failed."));break;default:Cr()}}finally{_r("Connection",'RPC "'+t+'" completed.')}}));const a=JSON.stringify(r);o.send(e,"POST",a,n,15)}))}ji(t,e){const n=[this.Fi,"/","google.firestore.v1.Firestore","/",t,"/channel"],r=new ar,s=Zt(),i={httpSessionIdParam:"gsessionid",initMessageHeaders:{},messageUrlParams:{database:`projects/${this.databaseId.projectId}/databases/${this.databaseId.database}`},sendRawJson:!0,supportsCrossDomainXhr:!0,internalChannelParams:{forwardChannelRequestTimeoutMs:6e5},forceLongPolling:this.forceLongPolling,detectBufferingProxy:this.autoDetectLongPolling};this.useFetchStreams&&(i.xmlHttpFactory=new yr({})),this.Ui(i.initMessageHeaders,e),(0,o.uI)()||(0,o.b$)()||(0,o.d)()||(0,o.w1)()||(0,o.Mn)()||(0,o.ru)()||(i.httpHeadersOverwriteParam="$httpHeaders");const a=n.join("");_r("Connection","Creating WebChannel: "+a,i);const c=r.createWebChannel(a,i);let u=!1,h=!1;const l=new Nu({vi:t=>{h?_r("Connection","Not sending because WebChannel is closed:",t):(u||(_r("Connection","Opening WebChannel transport."),c.open(),u=!0),_r("Connection","WebChannel sending:",t),c.send(t))},Vi:()=>c.close()}),d=(t,e,n)=>{t.listen(e,(t=>{try{n(t)}catch(t){setTimeout((()=>{throw t}),0)}}))};return d(c,vr.EventType.OPEN,(()=>{h||_r("Connection","WebChannel transport opened.")})),d(c,vr.EventType.CLOSE,(()=>{h||(h=!0,_r("Connection","WebChannel transport closed"),l.$i())})),d(c,vr.EventType.ERROR,(t=>{h||(h=!0,Ar("Connection","WebChannel transport errored:",t),l.$i(new Or(Rr.UNAVAILABLE,"The operation could not be completed")))})),d(c,vr.EventType.MESSAGE,(t=>{var e;if(!h){const n=t.data[0];kr(!!n);const r=n,s=r.error||(null===(e=r[0])||void 0===e?void 0:e.error);if(s){_r("Connection","WebChannel received error:",s);const t=s.status;let e=function(t){const e=Yi[t];if(void 0!==e)return Zi(e)}(t),n=s.message;void 0===e&&(e=Rr.INTERNAL,n="Unknown error status: "+t+" with message "+s.message),h=!0,l.$i(new Or(e,n)),c.close()}else _r("Connection","WebChannel received:",n),l.Oi(n)}})),d(s,pr.STAT_EVENT,(t=>{t.stat===mr?_r("Connection","Detected buffering proxy"):t.stat===gr&&_r("Connection","Detected no buffering proxy")})),setTimeout((()=>{l.ki()}),0),l}}function Du(){return"undefined"!=typeof window?window:null}function Cu(){return"undefined"!=typeof document?document:null}function ku(t){return new Ao(t,!0)}class xu{constructor(t,e,n=1e3,r=1.5,s=6e4){this.Oe=t,this.timerId=e,this.Qi=n,this.Wi=r,this.Gi=s,this.zi=0,this.Hi=null,this.Ji=Date.now(),this.reset()}reset(){this.zi=0}Yi(){this.zi=this.Gi}Xi(t){this.cancel();const e=Math.floor(this.zi+this.Zi()),n=Math.max(0,Date.now()-this.Ji),r=Math.max(0,e-n);r>0&&_r("ExponentialBackoff",`Backing off for ${r} ms (base delay: ${this.zi} ms, delay with jitter: ${e} ms, last attempt: ${n} ms ago)`),this.Hi=this.Oe.enqueueAfterDelay(this.timerId,r,(()=>(this.Ji=Date.now(),t()))),this.zi*=this.Wi,this.zi<this.Qi&&(this.zi=this.Qi),this.zi>this.Gi&&(this.zi=this.Gi)}tr(){null!==this.Hi&&(this.Hi.skipDelay(),this.Hi=null)}cancel(){null!==this.Hi&&(this.Hi.cancel(),this.Hi=null)}Zi(){return(Math.random()-.5)*this.zi}}class Lu{constructor(t,e,n,r,s,i){this.Oe=t,this.er=n,this.nr=r,this.credentialsProvider=s,this.listener=i,this.state=0,this.sr=0,this.ir=null,this.stream=null,this.rr=new xu(t,e)}ar(){return 1===this.state||2===this.state||4===this.state}cr(){return 2===this.state}start(){3!==this.state?this.auth():this.ur()}async stop(){this.ar()&&await this.close(0)}hr(){this.state=0,this.rr.reset()}lr(){this.cr()&&null===this.ir&&(this.ir=this.Oe.enqueueAfterDelay(this.er,6e4,(()=>this.dr())))}wr(t){this._r(),this.stream.send(t)}async dr(){if(this.cr())return this.close(0)}_r(){this.ir&&(this.ir.cancel(),this.ir=null)}async close(t,e){this._r(),this.rr.cancel(),this.sr++,3!==t?this.rr.reset():e&&e.code===Rr.RESOURCE_EXHAUSTED?(Nr(e.toString()),Nr("Using maximum backoff delay to prevent overloading the backend."),this.rr.Yi()):e&&e.code===Rr.UNAUTHENTICATED&&this.credentialsProvider.invalidateToken(),null!==this.stream&&(this.mr(),this.stream.close(),this.stream=null),this.state=t,await this.listener.Ci(e)}mr(){}auth(){this.state=1;const t=this.gr(this.sr),e=this.sr;this.credentialsProvider.getToken().then((t=>{this.sr===e&&this.yr(t)}),(e=>{t((()=>{const t=new Or(Rr.UNKNOWN,"Fetching auth token failed: "+e.message);return this.pr(t)}))}))}yr(t){const e=this.gr(this.sr);this.stream=this.Er(t),this.stream.Si((()=>{e((()=>(this.state=2,this.listener.Si())))})),this.stream.Ci((t=>{e((()=>this.pr(t)))})),this.stream.onMessage((t=>{e((()=>this.onMessage(t)))}))}ur(){this.state=4,this.rr.Xi((async()=>{this.state=0,this.start()}))}pr(t){return _r("PersistentStream",`close with error: ${t}`),this.stream=null,this.close(3,t)}gr(t){return e=>{this.Oe.enqueueAndForget((()=>this.sr===t?e():(_r("PersistentStream","stream callback skipped by getCloseGuardedDispatcher."),Promise.resolve())))}}}class Ru extends Lu{constructor(t,e,n,r,s){super(t,"listen_stream_connection_backoff","listen_stream_idle",e,n,s),this.N=r}Er(t){return this.nr.ji("Listen",t)}onMessage(t){this.rr.reset();const e=function(t,e){let n;if("targetChange"in e){e.targetChange;const r=function(t){return"NO_CHANGE"===t?0:"ADD"===t?1:"REMOVE"===t?2:"CURRENT"===t?3:"RESET"===t?4:Cr()}(e.targetChange.targetChangeType||"NO_CHANGE"),s=e.targetChange.targetIds||[],i=function(t,e){return t.D?(kr(void 0===e||"string"==typeof e),is.fromBase64String(e||"")):(kr(void 0===e||e instanceof Uint8Array),is.fromUint8Array(e||new Uint8Array))}(t,e.targetChange.resumeToken),o=e.targetChange.cause,a=o&&function(t){const e=void 0===t.code?Rr.UNKNOWN:Zi(t.code);return new Or(e,t.message||"")}(o);n=new bo(r,s,i,a||null)}else if("documentChange"in e){e.documentChange;const r=e.documentChange;r.document,r.document.name,r.document.updateTime;const s=Mo(t,r.document.name),i=xo(r.document.updateTime),o=new xs({mapValue:{fields:r.document.fields}}),a=Rs.newFoundDocument(s,i,o),c=r.targetIds||[],u=r.removedTargetIds||[];n=new vo(c,u,a.key,a)}else if("documentDelete"in e){e.documentDelete;const r=e.documentDelete;r.document;const s=Mo(t,r.document),i=r.readTime?xo(r.readTime):Wr.min(),o=Rs.newNoDocument(s,i),a=r.removedTargetIds||[];n=new vo([],a,o.key,o)}else if("documentRemove"in e){e.documentRemove;const r=e.documentRemove;r.document;const s=Mo(t,r.document),i=r.removedTargetIds||[];n=new vo([],i,s,null)}else{if(!("filter"in e))return Cr();{e.filter;const t=e.filter;t.targetId;const r=t.count||0,s=new Wi(r),i=t.targetId;n=new wo(i,s)}}return n}(this.N,t),n=function(t){if(!("targetChange"in t))return Wr.min();const e=t.targetChange;return e.targetIds&&e.targetIds.length?Wr.min():e.readTime?xo(e.readTime):Wr.min()}(t);return this.listener.Tr(e,n)}Ir(t){const e={};e.database=Vo(this.N),e.addTarget=function(t,e){let n;const r=e.target;return n=Vs(r)?{documents:zo(t,r)}:{query:$o(t,r)},n.targetId=e.targetId,e.resumeToken.approximateByteSize()>0?n.resumeToken=Co(t,e.resumeToken):e.snapshotVersion.compareTo(Wr.min())>0&&(n.readTime=Do(t,e.snapshotVersion.toTimestamp())),n}(this.N,t);const n=function(t,e){const n=function(t,e){switch(e){case 0:return null;case 1:return"existence-filter-mismatch";case 2:return"limbo-document";default:return Cr()}}(0,e.purpose);return null==n?null:{"goog-listen-tags":n}}(this.N,t);n&&(e.labels=n),this.wr(e)}Ar(t){const e={};e.database=Vo(this.N),e.removeTarget=t,this.wr(e)}}class Ou extends Lu{constructor(t,e,n,r,s){super(t,"write_stream_connection_backoff","write_stream_idle",e,n,s),this.N=r,this.Rr=!1}get br(){return this.Rr}start(){this.Rr=!1,this.lastStreamToken=void 0,super.start()}mr(){this.Rr&&this.Pr([])}Er(t){return this.nr.ji("Write",t)}onMessage(t){if(kr(!!t.streamToken),this.lastStreamToken=t.streamToken,this.Rr){this.rr.reset();const e=function(t,e){return t&&t.length>0?(kr(void 0!==e),t.map((t=>function(t,e){let n=t.updateTime?xo(t.updateTime):xo(e);return n.isEqual(Wr.min())&&(n=xo(e)),new Ri(n,t.transformResults||[])}(t,e)))):[]}(t.writeResults,t.commitTime),n=xo(t.commitTime);return this.listener.vr(n,e)}return kr(!t.writeResults||0===t.writeResults.length),this.Rr=!0,this.listener.Vr()}Sr(){const t={};t.database=Vo(this.N),this.wr(t)}Pr(t){const e={streamToken:this.lastStreamToken,writes:t.map((t=>jo(this.N,t)))};this.wr(e)}}class Mu extends class{}{constructor(t,e,n){super(),this.credentials=t,this.nr=e,this.N=n,this.Dr=!1}Cr(){if(this.Dr)throw new Or(Rr.FAILED_PRECONDITION,"The client has already been terminated.")}Li(t,e,n){return this.Cr(),this.credentials.getToken().then((r=>this.nr.Li(t,e,n,r))).catch((t=>{throw"FirebaseError"===t.name?(t.code===Rr.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new Or(Rr.UNKNOWN,t.toString())}))}Ki(t,e,n){return this.Cr(),this.credentials.getToken().then((r=>this.nr.Ki(t,e,n,r))).catch((t=>{throw"FirebaseError"===t.name?(t.code===Rr.UNAUTHENTICATED&&this.credentials.invalidateToken(),t):new Or(Rr.UNKNOWN,t.toString())}))}terminate(){this.Dr=!0}}class Pu{constructor(t,e){this.asyncQueue=t,this.onlineStateHandler=e,this.state="Unknown",this.Nr=0,this.kr=null,this.$r=!0}Or(){0===this.Nr&&(this.Fr("Unknown"),this.kr=this.asyncQueue.enqueueAfterDelay("online_state_timeout",1e4,(()=>(this.kr=null,this.Mr("Backend didn't respond within 10 seconds."),this.Fr("Offline"),Promise.resolve()))))}Lr(t){"Online"===this.state?this.Fr("Unknown"):(this.Nr++,this.Nr>=1&&(this.Br(),this.Mr(`Connection failed 1 times. Most recent error: ${t.toString()}`),this.Fr("Offline")))}set(t){this.Br(),this.Nr=0,"Online"===t&&(this.$r=!1),this.Fr(t)}Fr(t){t!==this.state&&(this.state=t,this.onlineStateHandler(t))}Mr(t){const e=`Could not reach Cloud Firestore backend. ${t}\nThis typically indicates that your device does not have a healthy Internet connection at the moment. The client will operate in offline mode until it is able to successfully connect to the backend.`;this.$r?(Nr(e),this.$r=!1):_r("OnlineStateTracker",e)}Br(){null!==this.kr&&(this.kr.cancel(),this.kr=null)}}class Fu{constructor(t,e,n,r,s){this.localStore=t,this.datastore=e,this.asyncQueue=n,this.remoteSyncer={},this.Ur=[],this.qr=new Map,this.Kr=new Set,this.jr=[],this.Qr=s,this.Qr.Ei((t=>{n.enqueueAndForget((async()=>{Gu(this)&&(_r("RemoteStore","Restarting streams for network reachability change."),await async function(t){const e=Lr(t);e.Kr.add(4),await Uu(e),e.Wr.set("Unknown"),e.Kr.delete(4),await Vu(e)}(this))}))})),this.Wr=new Pu(n,r)}}async function Vu(t){if(Gu(t))for(const e of t.jr)await e(!0)}async function Uu(t){for(const e of t.jr)await e(!1)}function qu(t,e){const n=Lr(t);n.qr.has(e.targetId)||(n.qr.set(e.targetId,e),$u(n)?zu(n):uh(n).cr()&&ju(n,e))}function Bu(t,e){const n=Lr(t),r=uh(n);n.qr.delete(e),r.cr()&&Ku(n,e),0===n.qr.size&&(r.cr()?r.lr():Gu(n)&&n.Wr.set("Unknown"))}function ju(t,e){t.Gr.Y(e.targetId),uh(t).Ir(e)}function Ku(t,e){t.Gr.Y(e),uh(t).Ar(e)}function zu(t){t.Gr=new Eo({getRemoteKeysForTarget:e=>t.remoteSyncer.getRemoteKeysForTarget(e),Et:e=>t.qr.get(e)||null}),uh(t).start(),t.Wr.Or()}function $u(t){return Gu(t)&&!uh(t).ar()&&t.qr.size>0}function Gu(t){return 0===Lr(t).Kr.size}function Hu(t){t.Gr=void 0}async function Qu(t){t.qr.forEach(((e,n)=>{ju(t,e)}))}async function Wu(t,e){Hu(t),$u(t)?(t.Wr.Lr(e),zu(t)):t.Wr.set("Unknown")}async function Yu(t,e,n){if(t.Wr.set("Online"),e instanceof bo&&2===e.state&&e.cause)try{await async function(t,e){const n=e.cause;for(const r of e.targetIds)t.qr.has(r)&&(await t.remoteSyncer.rejectListen(r,n),t.qr.delete(r),t.Gr.removeTarget(r))}(t,e)}catch(n){_r("RemoteStore","Failed to remove targets %s: %s ",e.targetIds.join(","),n),await Ju(t,n)}else if(e instanceof vo?t.Gr.rt(e):e instanceof wo?t.Gr.ft(e):t.Gr.ct(e),!n.isEqual(Wr.min()))try{const e=await Qc(t.localStore);n.compareTo(e)>=0&&await function(t,e){const n=t.Gr._t(e);return n.targetChanges.forEach(((n,r)=>{if(n.resumeToken.approximateByteSize()>0){const s=t.qr.get(r);s&&t.qr.set(r,s.withResumeToken(n.resumeToken,e))}})),n.targetMismatches.forEach((e=>{const n=t.qr.get(e);if(!n)return;t.qr.set(e,n.withResumeToken(is.EMPTY_BYTE_STRING,n.snapshotVersion)),Ku(t,e);const r=new Ba(n.target,e,1,n.sequenceNumber);ju(t,r)})),t.remoteSyncer.applyRemoteEvent(n)}(t,n)}catch(e){_r("RemoteStore","Failed to raise snapshot:",e),await Ju(t,e)}}async function Ju(t,e,n){if(!La(e))throw e;t.Kr.add(1),await Uu(t),t.Wr.set("Offline"),n||(n=()=>Qc(t.localStore)),t.asyncQueue.enqueueRetryable((async()=>{_r("RemoteStore","Retrying IndexedDB access"),await n(),t.Kr.delete(1),await Vu(t)}))}function Xu(t,e){return e().catch((n=>Ju(t,n,e)))}async function Zu(t){const e=Lr(t),n=hh(e);let r=e.Ur.length>0?e.Ur[e.Ur.length-1].batchId:-1;for(;th(e);)try{const t=await Yc(e.localStore,r);if(null===t){0===e.Ur.length&&n.lr();break}r=t.batchId,eh(e,t)}catch(t){await Ju(e,t)}nh(e)&&rh(e)}function th(t){return Gu(t)&&t.Ur.length<10}function eh(t,e){t.Ur.push(e);const n=hh(t);n.cr()&&n.br&&n.Pr(e.mutations)}function nh(t){return Gu(t)&&!hh(t).ar()&&t.Ur.length>0}function rh(t){hh(t).start()}async function sh(t){hh(t).Sr()}async function ih(t){const e=hh(t);for(const n of t.Ur)e.Pr(n.mutations)}async function oh(t,e,n){const r=t.Ur.shift(),s=qa.from(r,e,n);await Xu(t,(()=>t.remoteSyncer.applySuccessfulWrite(s))),await Zu(t)}async function ah(t,e){e&&hh(t).br&&await async function(t,e){if(Xi(n=e.code)&&n!==Rr.ABORTED){const n=t.Ur.shift();hh(t).hr(),await Xu(t,(()=>t.remoteSyncer.rejectFailedWrite(n.batchId,e))),await Zu(t)}var n}(t,e),nh(t)&&rh(t)}async function ch(t,e){const n=Lr(t);e?(n.Kr.delete(2),await Vu(n)):e||(n.Kr.add(2),await Uu(n),n.Wr.set("Unknown"))}function uh(t){return t.zr||(t.zr=function(t,e,n){const r=Lr(t);return r.Cr(),new Ru(e,r.nr,r.credentials,r.N,n)}(t.datastore,t.asyncQueue,{Si:Qu.bind(null,t),Ci:Wu.bind(null,t),Tr:Yu.bind(null,t)}),t.jr.push((async e=>{e?(t.zr.hr(),$u(t)?zu(t):t.Wr.set("Unknown")):(await t.zr.stop(),Hu(t))}))),t.zr}function hh(t){return t.Hr||(t.Hr=function(t,e,n){const r=Lr(t);return r.Cr(),new Ou(e,r.nr,r.credentials,r.N,n)}(t.datastore,t.asyncQueue,{Si:sh.bind(null,t),Ci:ah.bind(null,t),Vr:ih.bind(null,t),vr:oh.bind(null,t)}),t.jr.push((async e=>{e?(t.Hr.hr(),await Zu(t)):(await t.Hr.stop(),t.Ur.length>0&&(_r("RemoteStore",`Stopping write stream with ${t.Ur.length} pending writes`),t.Ur=[]))}))),t.Hr}class lh{constructor(t,e,n,r,s){this.asyncQueue=t,this.timerId=e,this.targetTimeMs=n,this.op=r,this.removalCallback=s,this.deferred=new Mr,this.then=this.deferred.promise.then.bind(this.deferred.promise),this.deferred.promise.catch((t=>{}))}static createAndSchedule(t,e,n,r,s){const i=Date.now()+n,o=new lh(t,e,i,r,s);return o.start(n),o}start(t){this.timerHandle=setTimeout((()=>this.handleDelayElapsed()),t)}skipDelay(){return this.handleDelayElapsed()}cancel(t){null!==this.timerHandle&&(this.clearTimeout(),this.deferred.reject(new Or(Rr.CANCELLED,"Operation cancelled"+(t?": "+t:""))))}handleDelayElapsed(){this.asyncQueue.enqueueAndForget((()=>null!==this.timerHandle?(this.clearTimeout(),this.op().then((t=>this.deferred.resolve(t)))):Promise.resolve()))}clearTimeout(){null!==this.timerHandle&&(this.removalCallback(this),clearTimeout(this.timerHandle),this.timerHandle=null)}}function dh(t,e){if(Nr("AsyncQueue",`${e}: ${t}`),La(t))return new Or(Rr.UNAVAILABLE,`${e}: ${t}`);throw t}class fh{constructor(t){this.comparator=t?(e,n)=>t(e,n)||gs.comparator(e.key,n.key):(t,e)=>gs.comparator(t.key,e.key),this.keyedMap=co(),this.sortedSet=new to(this.comparator)}static emptySet(t){return new fh(t.comparator)}has(t){return null!=this.keyedMap.get(t)}get(t){return this.keyedMap.get(t)}first(){return this.sortedSet.minKey()}last(){return this.sortedSet.maxKey()}isEmpty(){return this.sortedSet.isEmpty()}indexOf(t){const e=this.keyedMap.get(t);return e?this.sortedSet.indexOf(e):-1}get size(){return this.sortedSet.size}forEach(t){this.sortedSet.inorderTraversal(((e,n)=>(t(e),!1)))}add(t){const e=this.delete(t.key);return e.copy(e.keyedMap.insert(t.key,t),e.sortedSet.insert(t,null))}delete(t){const e=this.get(t);return e?this.copy(this.keyedMap.remove(t),this.sortedSet.remove(e)):this}isEqual(t){if(!(t instanceof fh))return!1;if(this.size!==t.size)return!1;const e=this.sortedSet.getIterator(),n=t.sortedSet.getIterator();for(;e.hasNext();){const t=e.getNext().key,r=n.getNext().key;if(!t.isEqual(r))return!1}return!0}toString(){const t=[];return this.forEach((e=>{t.push(e.toString())})),0===t.length?"DocumentSet ()":"DocumentSet (\n  "+t.join("  \n")+"\n)"}copy(t,e){const n=new fh;return n.comparator=this.comparator,n.keyedMap=t,n.sortedSet=e,n}}class ph{constructor(){this.Jr=new to(gs.comparator)}track(t){const e=t.doc.key,n=this.Jr.get(e);n?0!==t.type&&3===n.type?this.Jr=this.Jr.insert(e,t):3===t.type&&1!==n.type?this.Jr=this.Jr.insert(e,{type:n.type,doc:t.doc}):2===t.type&&2===n.type?this.Jr=this.Jr.insert(e,{type:2,doc:t.doc}):2===t.type&&0===n.type?this.Jr=this.Jr.insert(e,{type:0,doc:t.doc}):1===t.type&&0===n.type?this.Jr=this.Jr.remove(e):1===t.type&&2===n.type?this.Jr=this.Jr.insert(e,{type:1,doc:n.doc}):0===t.type&&1===n.type?this.Jr=this.Jr.insert(e,{type:2,doc:t.doc}):Cr():this.Jr=this.Jr.insert(e,t)}Yr(){const t=[];return this.Jr.inorderTraversal(((e,n)=>{t.push(n)})),t}}class mh{constructor(t,e,n,r,s,i,o,a){this.query=t,this.docs=e,this.oldDocs=n,this.docChanges=r,this.mutatedKeys=s,this.fromCache=i,this.syncStateChanged=o,this.excludesMetadataChanges=a}static fromInitialDocuments(t,e,n,r){const s=[];return e.forEach((t=>{s.push({type:0,doc:t})})),new mh(t,e,fh.emptySet(e),s,n,r,!0,!1)}get hasPendingWrites(){return!this.mutatedKeys.isEmpty()}isEqual(t){if(!(this.fromCache===t.fromCache&&this.syncStateChanged===t.syncStateChanged&&this.mutatedKeys.isEqual(t.mutatedKeys)&&li(this.query,t.query)&&this.docs.isEqual(t.docs)&&this.oldDocs.isEqual(t.oldDocs)))return!1;const e=this.docChanges,n=t.docChanges;if(e.length!==n.length)return!1;for(let t=0;t<e.length;t++)if(e[t].type!==n[t].type||!e[t].doc.isEqual(n[t].doc))return!1;return!0}}class gh{constructor(){this.Xr=void 0,this.listeners=[]}}class yh{constructor(){this.queries=new Ac((t=>di(t)),li),this.onlineState="Unknown",this.Zr=new Set}}async function vh(t,e){const n=Lr(t),r=e.query;let s=!1,i=n.queries.get(r);if(i||(s=!0,i=new gh),s)try{i.Xr=await n.onListen(r)}catch(t){const n=dh(t,`Initialization of query '${fi(e.query)}' failed`);return void e.onError(n)}n.queries.set(r,i),i.listeners.push(e),e.eo(n.onlineState),i.Xr&&e.no(i.Xr)&&Eh(n)}async function wh(t,e){const n=Lr(t),r=e.query;let s=!1;const i=n.queries.get(r);if(i){const t=i.listeners.indexOf(e);t>=0&&(i.listeners.splice(t,1),s=0===i.listeners.length)}if(s)return n.queries.delete(r),n.onUnlisten(r)}function bh(t,e){const n=Lr(t);let r=!1;for(const t of e){const e=t.query,s=n.queries.get(e);if(s){for(const e of s.listeners)e.no(t)&&(r=!0);s.Xr=t}}r&&Eh(n)}function Ih(t,e,n){const r=Lr(t),s=r.queries.get(e);if(s)for(const t of s.listeners)t.onError(n);r.queries.delete(e)}function Eh(t){t.Zr.forEach((t=>{t.next()}))}class Th{constructor(t,e,n){this.query=t,this.so=e,this.io=!1,this.ro=null,this.onlineState="Unknown",this.options=n||{}}no(t){if(!this.options.includeMetadataChanges){const e=[];for(const n of t.docChanges)3!==n.type&&e.push(n);t=new mh(t.query,t.docs,t.oldDocs,e,t.mutatedKeys,t.fromCache,t.syncStateChanged,!0)}let e=!1;return this.io?this.oo(t)&&(this.so.next(t),e=!0):this.ao(t,this.onlineState)&&(this.co(t),e=!0),this.ro=t,e}onError(t){this.so.error(t)}eo(t){this.onlineState=t;let e=!1;return this.ro&&!this.io&&this.ao(this.ro,t)&&(this.co(this.ro),e=!0),e}ao(t,e){if(!t.fromCache)return!0;const n="Offline"!==e;return!(this.options.uo&&n||t.docs.isEmpty()&&"Offline"!==e)}oo(t){if(t.docChanges.length>0)return!0;const e=this.ro&&this.ro.hasPendingWrites!==t.hasPendingWrites;return!(!t.syncStateChanged&&!e)&&!0===this.options.includeMetadataChanges}co(t){t=mh.fromInitialDocuments(t.query,t.docs,t.mutatedKeys,t.fromCache),this.io=!0,this.so.next(t)}}class Sh{constructor(t,e){this.payload=t,this.byteLength=e}ho(){return"metadata"in this.payload}}class _h{constructor(t){this.N=t}zn(t){return Mo(this.N,t)}Hn(t){return t.metadata.exists?Bo(this.N,t.document,!1):Rs.newNoDocument(this.zn(t.metadata.name),this.Jn(t.metadata.readTime))}Jn(t){return xo(t)}}class Nh{constructor(t,e,n){this.lo=t,this.localStore=e,this.N=n,this.queries=[],this.documents=[],this.progress=Ah(t)}fo(t){this.progress.bytesLoaded+=t.byteLength;let e=this.progress.documentsLoaded;return t.payload.namedQuery?this.queries.push(t.payload.namedQuery):t.payload.documentMetadata?(this.documents.push({metadata:t.payload.documentMetadata}),t.payload.documentMetadata.exists||++e):t.payload.document&&(this.documents[this.documents.length-1].document=t.payload.document,++e),e!==this.progress.documentsLoaded?(this.progress.documentsLoaded=e,Object.assign({},this.progress)):null}wo(t){const e=new Map,n=new _h(this.N);for(const r of t)if(r.metadata.queries){const t=n.zn(r.metadata.name);for(const n of r.metadata.queries){const r=(e.get(n)||fo()).add(t);e.set(n,r)}}return e}async complete(){const t=await async function(t,e,n,r){const s=Lr(t);let i=fo(),o=oo(),a=ho();for(const t of n){const n=e.zn(t.metadata.name);t.document&&(i=i.add(n)),o=o.insert(n,e.Hn(t)),a=a.insert(n,e.Jn(t.metadata.readTime))}const c=s.jn.newChangeBuffer({trackRemovals:!0}),u=await Jc(s,function(t){return ui(ni(ts.fromString(`__bundle__/docs/${t}`)))}(r));return s.persistence.runTransaction("Apply bundle documents","readwrite",(t=>Wc(t,c,o,Wr.min(),a).next((e=>(c.apply(t),e))).next((e=>s.ze.removeMatchingKeysForTargetId(t,u.targetId).next((()=>s.ze.addMatchingKeys(t,i,u.targetId))).next((()=>s.Qn.vn(t,e))).next((()=>e))))))}(this.localStore,new _h(this.N),this.documents,this.lo.id),e=this.wo(this.documents);for(const t of this.queries)await nu(this.localStore,t,e.get(t.name));return this.progress.taskState="Success",new Bc(Object.assign({},this.progress),t)}}function Ah(t){return{taskState:"Running",documentsLoaded:0,bytesLoaded:0,totalDocuments:t.totalDocuments,totalBytes:t.totalBytes}}class Dh{constructor(t){this.key=t}}class Ch{constructor(t){this.key=t}}class kh{constructor(t,e){this.query=t,this._o=e,this.mo=null,this.current=!1,this.yo=fo(),this.mutatedKeys=fo(),this.po=mi(t),this.Eo=new fh(this.po)}get To(){return this._o}Io(t,e){const n=e?e.Ao:new ph,r=e?e.Eo:this.Eo;let s=e?e.mutatedKeys:this.mutatedKeys,i=r,o=!1;const a=ri(this.query)&&r.size===this.query.limit?r.last():null,c=si(this.query)&&r.size===this.query.limit?r.first():null;if(t.inorderTraversal(((t,e)=>{const u=r.get(t),h=pi(this.query,e)?e:null,l=!!u&&this.mutatedKeys.has(u.key),d=!!h&&(h.hasLocalMutations||this.mutatedKeys.has(h.key)&&h.hasCommittedMutations);let f=!1;u&&h?u.data.isEqual(h.data)?l!==d&&(n.track({type:3,doc:h}),f=!0):this.Ro(u,h)||(n.track({type:2,doc:h}),f=!0,(a&&this.po(h,a)>0||c&&this.po(h,c)<0)&&(o=!0)):!u&&h?(n.track({type:0,doc:h}),f=!0):u&&!h&&(n.track({type:1,doc:u}),f=!0,(a||c)&&(o=!0)),f&&(h?(i=i.add(h),s=d?s.add(t):s.delete(t)):(i=i.delete(t),s=s.delete(t)))})),ri(this.query)||si(this.query))for(;i.size>this.query.limit;){const t=ri(this.query)?i.last():i.first();i=i.delete(t.key),s=s.delete(t.key),n.track({type:1,doc:t})}return{Eo:i,Ao:n,Ln:o,mutatedKeys:s}}Ro(t,e){return t.hasLocalMutations&&e.hasCommittedMutations&&!e.hasLocalMutations}applyChanges(t,e,n){const r=this.Eo;this.Eo=t.Eo,this.mutatedKeys=t.mutatedKeys;const s=t.Ao.Yr();s.sort(((t,e)=>function(t,e){const n=t=>{switch(t){case 0:return 1;case 2:case 3:return 2;case 1:return 0;default:return Cr()}};return n(t)-n(e)}(t.type,e.type)||this.po(t.doc,e.doc))),this.bo(n);const i=e?this.Po():[],o=0===this.yo.size&&this.current?1:0,a=o!==this.mo;return this.mo=o,0!==s.length||a?{snapshot:new mh(this.query,t.Eo,r,s,t.mutatedKeys,0===o,a,!1),vo:i}:{vo:i}}eo(t){return this.current&&"Offline"===t?(this.current=!1,this.applyChanges({Eo:this.Eo,Ao:new ph,mutatedKeys:this.mutatedKeys,Ln:!1},!1)):{vo:[]}}Vo(t){return!this._o.has(t)&&!!this.Eo.has(t)&&!this.Eo.get(t).hasLocalMutations}bo(t){t&&(t.addedDocuments.forEach((t=>this._o=this._o.add(t))),t.modifiedDocuments.forEach((t=>{})),t.removedDocuments.forEach((t=>this._o=this._o.delete(t))),this.current=t.current)}Po(){if(!this.current)return[];const t=this.yo;this.yo=fo(),this.Eo.forEach((t=>{this.Vo(t.key)&&(this.yo=this.yo.add(t.key))}));const e=[];return t.forEach((t=>{this.yo.has(t)||e.push(new Ch(t))})),this.yo.forEach((n=>{t.has(n)||e.push(new Dh(n))})),e}So(t){this._o=t.Gn,this.yo=fo();const e=this.Io(t.documents);return this.applyChanges(e,!0)}Do(){return mh.fromInitialDocuments(this.query,this.Eo,this.mutatedKeys,0===this.mo)}}class xh{constructor(t,e,n){this.query=t,this.targetId=e,this.view=n}}class Lh{constructor(t){this.key=t,this.Co=!1}}class Rh{constructor(t,e,n,r,s,i){this.localStore=t,this.remoteStore=e,this.eventManager=n,this.sharedClientState=r,this.currentUser=s,this.maxConcurrentLimboResolutions=i,this.No={},this.xo=new Ac((t=>di(t)),li),this.ko=new Map,this.$o=new Set,this.Oo=new to(gs.comparator),this.Fo=new Map,this.Mo=new su,this.Lo={},this.Bo=new Map,this.Uo=mc.ie(),this.onlineState="Unknown",this.qo=void 0}get isPrimaryClient(){return!0===this.qo}}async function Oh(t,e){const n=ol(t);let r,s;const i=n.xo.get(e);if(i)r=i.targetId,n.sharedClientState.addLocalQueryTarget(r),s=i.view.Do();else{const t=await Jc(n.localStore,ui(e)),i=n.sharedClientState.addLocalQueryTarget(t.targetId);r=t.targetId,s=await Mh(n,e,r,"current"===i),n.isPrimaryClient&&qu(n.remoteStore,t)}return s}async function Mh(t,e,n,r){t.Ko=(e,n,r)=>async function(t,e,n,r){let s=e.view.Io(n);s.Ln&&(s=await Zc(t.localStore,e.query,!1).then((({documents:t})=>e.view.Io(t,s))));const i=r&&r.targetChanges.get(e.targetId),o=e.view.applyChanges(s,t.isPrimaryClient,i);return Gh(t,e.targetId,o.vo),o.snapshot}(t,e,n,r);const s=await Zc(t.localStore,e,!0),i=new kh(e,s.Gn),o=i.Io(s.documents),a=yo.createSynthesizedTargetChangeForCurrentChange(n,r&&"Offline"!==t.onlineState),c=i.applyChanges(o,t.isPrimaryClient,a);Gh(t,n,c.vo);const u=new xh(e,n,i);return t.xo.set(e,u),t.ko.has(n)?t.ko.get(n).push(e):t.ko.set(n,[e]),c.snapshot}async function Ph(t,e){const n=Lr(t),r=n.xo.get(e),s=n.ko.get(r.targetId);if(s.length>1)return n.ko.set(r.targetId,s.filter((t=>!li(t,e)))),void n.xo.delete(e);n.isPrimaryClient?(n.sharedClientState.removeLocalQueryTarget(r.targetId),n.sharedClientState.isActiveQueryTarget(r.targetId)||await Xc(n.localStore,r.targetId,!1).then((()=>{n.sharedClientState.clearQueryState(r.targetId),Bu(n.remoteStore,r.targetId),zh(n,r.targetId)})).catch(bc)):(zh(n,r.targetId),await Xc(n.localStore,r.targetId,!0))}async function Fh(t,e){const n=Lr(t);try{const t=await function(t,e){const n=Lr(t),r=e.snapshotVersion;let s=n.Un;return n.persistence.runTransaction("Apply remote event","readwrite-primary",(t=>{const i=n.jn.newChangeBuffer({trackRemovals:!0});s=n.Un;const o=[];e.targetChanges.forEach(((e,i)=>{const a=s.get(i);if(!a)return;o.push(n.ze.removeMatchingKeys(t,e.removedDocuments,i).next((()=>n.ze.addMatchingKeys(t,e.addedDocuments,i))));const c=e.resumeToken;if(c.approximateByteSize()>0){const u=a.withResumeToken(c,r).withSequenceNumber(t.currentSequenceNumber);s=s.insert(i,u),function(t,e,n){return kr(e.resumeToken.approximateByteSize()>0),0===t.resumeToken.approximateByteSize()||e.snapshotVersion.toMicroseconds()-t.snapshotVersion.toMicroseconds()>=3e8||n.addedDocuments.size+n.modifiedDocuments.size+n.removedDocuments.size>0}(a,u,e)&&o.push(n.ze.updateTargetData(t,u))}}));let a=oo();if(e.documentUpdates.forEach(((r,s)=>{e.resolvedLimboDocuments.has(r)&&o.push(n.persistence.referenceDelegate.updateLimboDocument(t,r))})),o.push(Wc(t,i,e.documentUpdates,r,void 0).next((t=>{a=t}))),!r.isEqual(Wr.min())){const e=n.ze.getLastRemoteSnapshotVersion(t).next((e=>n.ze.setTargetsMetadata(t,t.currentSequenceNumber,r)));o.push(e)}return Aa.waitFor(o).next((()=>i.apply(t))).next((()=>n.Qn.vn(t,a))).next((()=>a))})).then((t=>(n.Un=s,t)))}(n.localStore,e);e.targetChanges.forEach(((t,e)=>{const r=n.Fo.get(e);r&&(kr(t.addedDocuments.size+t.modifiedDocuments.size+t.removedDocuments.size<=1),t.addedDocuments.size>0?r.Co=!0:t.modifiedDocuments.size>0?kr(r.Co):t.removedDocuments.size>0&&(kr(r.Co),r.Co=!1))})),await Wh(n,t,e)}catch(t){await bc(t)}}function Vh(t,e,n){const r=Lr(t);if(r.isPrimaryClient&&0===n||!r.isPrimaryClient&&1===n){const t=[];r.xo.forEach(((n,r)=>{const s=r.view.eo(e);s.snapshot&&t.push(s.snapshot)})),function(t,e){const n=Lr(t);n.onlineState=e;let r=!1;n.queries.forEach(((t,n)=>{for(const t of n.listeners)t.eo(e)&&(r=!0)})),r&&Eh(n)}(r.eventManager,e),t.length&&r.No.Tr(t),r.onlineState=e,r.isPrimaryClient&&r.sharedClientState.setOnlineState(e)}}async function Uh(t,e,n){const r=Lr(t);r.sharedClientState.updateQueryState(e,"rejected",n);const s=r.Fo.get(e),i=s&&s.key;if(i){let t=new to(gs.comparator);t=t.insert(i,Rs.newNoDocument(i,Wr.min()));const n=fo().add(i),s=new go(Wr.min(),new Map,new ro($r),t,n);await Fh(r,s),r.Oo=r.Oo.remove(i),r.Fo.delete(e),Qh(r)}else await Xc(r.localStore,e,!1).then((()=>zh(r,e,n))).catch(bc)}async function qh(t,e){const n=Lr(t),r=e.batch.batchId;try{const t=await function(t,e){const n=Lr(t);return n.persistence.runTransaction("Acknowledge batch","readwrite-primary",(t=>{const r=e.batch.keys(),s=n.jn.newChangeBuffer({trackRemovals:!0});return function(t,e,n,r){const s=n.batch,i=s.keys();let o=Aa.resolve();return i.forEach((t=>{o=o.next((()=>r.getEntry(e,t))).next((e=>{const i=n.docVersions.get(t);kr(null!==i),e.version.compareTo(i)<0&&(s.applyToRemoteDocument(e,n),e.isValidDocument()&&r.addEntry(e,n.commitVersion))}))})),o.next((()=>t.In.removeMutationBatch(e,s)))}(n,t,e,s).next((()=>s.apply(t))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.Pn(t,r)))}))}(n.localStore,e);Kh(n,r,null),jh(n,r),n.sharedClientState.updateMutationState(r,"acknowledged"),await Wh(n,t)}catch(t){await bc(t)}}async function Bh(t,e,n){const r=Lr(t);try{const t=await function(t,e){const n=Lr(t);return n.persistence.runTransaction("Reject batch","readwrite-primary",(t=>{let r;return n.In.lookupMutationBatch(t,e).next((e=>(kr(null!==e),r=e.keys(),n.In.removeMutationBatch(t,e)))).next((()=>n.In.performConsistencyCheck(t))).next((()=>n.Qn.Pn(t,r)))}))}(r.localStore,e);Kh(r,e,n),jh(r,e),r.sharedClientState.updateMutationState(e,"rejected",n),await Wh(r,t)}catch(n){await bc(n)}}function jh(t,e){(t.Bo.get(e)||[]).forEach((t=>{t.resolve()})),t.Bo.delete(e)}function Kh(t,e,n){const r=Lr(t);let s=r.Lo[r.currentUser.toKey()];if(s){const t=s.get(e);t&&(n?t.reject(n):t.resolve(),s=s.remove(e)),r.Lo[r.currentUser.toKey()]=s}}function zh(t,e,n=null){t.sharedClientState.removeLocalQueryTarget(e);for(const r of t.ko.get(e))t.xo.delete(r),n&&t.No.jo(r,n);t.ko.delete(e),t.isPrimaryClient&&t.Mo.cs(e).forEach((e=>{t.Mo.containsKey(e)||$h(t,e)}))}function $h(t,e){t.$o.delete(e.path.canonicalString());const n=t.Oo.get(e);null!==n&&(Bu(t.remoteStore,n),t.Oo=t.Oo.remove(e),t.Fo.delete(n),Qh(t))}function Gh(t,e,n){for(const r of n)r instanceof Dh?(t.Mo.addReference(r.key,e),Hh(t,r)):r instanceof Ch?(_r("SyncEngine","Document no longer in limbo: "+r.key),t.Mo.removeReference(r.key,e),t.Mo.containsKey(r.key)||$h(t,r.key)):Cr()}function Hh(t,e){const n=e.key,r=n.path.canonicalString();t.Oo.get(n)||t.$o.has(r)||(_r("SyncEngine","New document in limbo: "+n),t.$o.add(r),Qh(t))}function Qh(t){for(;t.$o.size>0&&t.Oo.size<t.maxConcurrentLimboResolutions;){const e=t.$o.values().next().value;t.$o.delete(e);const n=new gs(ts.fromString(e)),r=t.Uo.next();t.Fo.set(r,new Lh(n)),t.Oo=t.Oo.insert(n,r),qu(t.remoteStore,new Ba(ui(ni(n.path)),r,2,jr.T))}}async function Wh(t,e,n){const r=Lr(t),s=[],i=[],o=[];r.xo.isEmpty()||(r.xo.forEach(((t,a)=>{o.push(r.Ko(a,e,n).then((t=>{if(t){r.isPrimaryClient&&r.sharedClientState.updateQueryState(a.targetId,t.fromCache?"not-current":"current"),s.push(t);const e=Kc.kn(a.targetId,t);i.push(e)}})))})),await Promise.all(o),r.No.Tr(s),await async function(t,e){const n=Lr(t);try{await n.persistence.runTransaction("notifyLocalViewChanges","readwrite",(t=>Aa.forEach(e,(e=>Aa.forEach(e.Nn,(r=>n.persistence.referenceDelegate.addReference(t,e.targetId,r))).next((()=>Aa.forEach(e.xn,(r=>n.persistence.referenceDelegate.removeReference(t,e.targetId,r)))))))))}catch(t){if(!La(t))throw t;_r("LocalStore","Failed to update sequence numbers: "+t)}for(const t of e){const e=t.targetId;if(!t.fromCache){const t=n.Un.get(e),r=t.snapshotVersion,s=t.withLastLimboFreeSnapshotVersion(r);n.Un=n.Un.insert(e,s)}}}(r.localStore,i))}async function Yh(t,e){const n=Lr(t);if(!n.currentUser.isEqual(e)){_r("SyncEngine","User change. New user:",e.toKey());const t=await Hc(n.localStore,e);n.currentUser=e,function(t,e){t.Bo.forEach((t=>{t.forEach((t=>{t.reject(new Or(Rr.CANCELLED,"'waitForPendingWrites' promise is rejected due to a user change."))}))})),t.Bo.clear()}(n),n.sharedClientState.handleUserChange(e,t.removedBatchIds,t.addedBatchIds),await Wh(n,t.Wn)}}function Jh(t,e){const n=Lr(t),r=n.Fo.get(e);if(r&&r.Co)return fo().add(r.key);{let t=fo();const r=n.ko.get(e);if(!r)return t;for(const e of r){const r=n.xo.get(e);t=t.unionWith(r.view.To)}return t}}async function Xh(t,e){const n=Lr(t),r=await Zc(n.localStore,e.query,!0),s=e.view.So(r);return n.isPrimaryClient&&Gh(n,e.targetId,s.vo),s}async function Zh(t){const e=Lr(t);return eu(e.localStore).then((t=>Wh(e,t)))}async function tl(t,e,n,r){const s=Lr(t),i=await function(t,e){const n=Lr(t),r=Lr(n.In);return n.persistence.runTransaction("Lookup mutation documents","readonly",(t=>r.Xt(t,e).next((e=>e?n.Qn.Pn(t,e):Aa.resolve(null)))))}(s.localStore,e);null!==i?("pending"===n?await Zu(s.remoteStore):"acknowledged"===n||"rejected"===n?(Kh(s,e,r||null),jh(s,e),function(t,e){Lr(Lr(t).In).te(e)}(s.localStore,e)):Cr(),await Wh(s,i)):_r("SyncEngine","Cannot apply mutation batch with id: "+e)}async function el(t,e,n){const r=Lr(t),s=[],i=[];for(const t of e){let e;const n=r.ko.get(t);if(n&&0!==n.length){e=await Jc(r.localStore,ui(n[0]));for(const t of n){const e=r.xo.get(t),n=await Xh(r,e);n.snapshot&&i.push(n.snapshot)}}else{const n=await tu(r.localStore,t);e=await Jc(r.localStore,n),await Mh(r,nl(n),t,!1)}s.push(e)}return r.No.Tr(i),s}function nl(t){return ei(t.path,t.collectionGroup,t.orderBy,t.filters,t.limit,"F",t.startAt,t.endAt)}function rl(t){const e=Lr(t);return Lr(Lr(e.localStore).persistence).pn()}async function sl(t,e,n,r){const s=Lr(t);if(s.qo)_r("SyncEngine","Ignoring unexpected query state notification.");else if(s.ko.has(e))switch(n){case"current":case"not-current":{const t=await eu(s.localStore),r=go.createSynthesizedRemoteEventForCurrentChange(e,"current"===n);await Wh(s,t,r);break}case"rejected":await Xc(s.localStore,e,!0),zh(s,e,r);break;default:Cr()}}async function il(t,e,n){const r=ol(t);if(r.qo){for(const t of e){if(r.ko.has(t)){_r("SyncEngine","Adding an already active target "+t);continue}const e=await tu(r.localStore,t),n=await Jc(r.localStore,e);await Mh(r,nl(e),n.targetId,!1),qu(r.remoteStore,n)}for(const t of n)r.ko.has(t)&&await Xc(r.localStore,t,!1).then((()=>{Bu(r.remoteStore,t),zh(r,t)})).catch(bc)}}function ol(t){const e=Lr(t);return e.remoteStore.remoteSyncer.applyRemoteEvent=Fh.bind(null,e),e.remoteStore.remoteSyncer.getRemoteKeysForTarget=Jh.bind(null,e),e.remoteStore.remoteSyncer.rejectListen=Uh.bind(null,e),e.No.Tr=bh.bind(null,e.eventManager),e.No.jo=Ih.bind(null,e.eventManager),e}function al(t){const e=Lr(t);return e.remoteStore.remoteSyncer.applySuccessfulWrite=qh.bind(null,e),e.remoteStore.remoteSyncer.rejectFailedWrite=Bh.bind(null,e),e}class cl{constructor(){this.synchronizeTabs=!1}async initialize(t){this.N=ku(t.databaseInfo.databaseId),this.sharedClientState=this.Wo(t),this.persistence=this.Go(t),await this.persistence.start(),this.gcScheduler=this.zo(t),this.localStore=this.Ho(t)}zo(t){return null}Ho(t){return Gc(this.persistence,new zc,t.initialUser,this.N)}Go(t){return new hu(du.Ns,this.N)}Wo(t){return new Eu}async terminate(){this.gcScheduler&&this.gcScheduler.stop(),await this.sharedClientState.shutdown(),await this.persistence.shutdown()}}class ul extends cl{constructor(t,e,n){super(),this.Jo=t,this.cacheSizeBytes=e,this.forceOwnership=n,this.synchronizeTabs=!1}async initialize(t){await super.initialize(t),await async function(t){const e=Lr(t);return e.persistence.runTransaction("Synchronize last document change read time","readonly",(t=>function(t){const e=Lc(t);let n=Wr.min();return e.Kt({index:ma.readTimeIndex,reverse:!0},((t,e,r)=>{e.readTime&&(n=Ga(e.readTime)),r.done()})).next((()=>n))}(t))).then((t=>{e.Kn=t}))}(this.localStore),await this.Jo.initialize(this,t),await al(this.Jo.syncEngine),await Zu(this.Jo.remoteStore),await this.persistence.nn((()=>(this.gcScheduler&&!this.gcScheduler.started&&this.gcScheduler.start(this.localStore),Promise.resolve())))}Ho(t){return Gc(this.persistence,new zc,t.initialUser,this.N)}zo(t){const e=this.persistence.referenceDelegate.garbageCollector;return new Tc(e,t.asyncQueue)}Go(t){const e=qc(t.databaseInfo.databaseId,t.databaseInfo.persistenceKey),n=void 0!==this.cacheSizeBytes?ac.withCacheSize(this.cacheSizeBytes):ac.DEFAULT;return new Fc(this.synchronizeTabs,e,t.clientId,n,t.asyncQueue,Du(),Cu(),this.N,this.sharedClientState,!!this.forceOwnership)}Wo(t){return new Eu}}class hl extends ul{constructor(t,e){super(t,e,!1),this.Jo=t,this.cacheSizeBytes=e,this.synchronizeTabs=!0}async initialize(t){await super.initialize(t);const e=this.Jo.syncEngine;this.sharedClientState instanceof Iu&&(this.sharedClientState.syncEngine={_i:tl.bind(null,e),mi:sl.bind(null,e),gi:il.bind(null,e),pn:rl.bind(null,e),wi:Zh.bind(null,e)},await this.sharedClientState.start()),await this.persistence.nn((async t=>{await async function(t,e){const n=Lr(t);if(ol(n),al(n),!0===e&&!0!==n.qo){const t=n.sharedClientState.getAllActiveQueryTargets(),e=await el(n,t.toArray());n.qo=!0,await ch(n.remoteStore,!0);for(const t of e)qu(n.remoteStore,t)}else if(!1===e&&!1!==n.qo){const t=[];let e=Promise.resolve();n.ko.forEach(((r,s)=>{n.sharedClientState.isLocalQueryTarget(s)?t.push(s):e=e.then((()=>(zh(n,s),Xc(n.localStore,s,!0)))),Bu(n.remoteStore,s)})),await e,await el(n,t),function(t){const e=Lr(t);e.Fo.forEach(((t,n)=>{Bu(e.remoteStore,n)})),e.Mo.us(),e.Fo=new Map,e.Oo=new to(gs.comparator)}(n),n.qo=!1,await ch(n.remoteStore,!1)}}(this.Jo.syncEngine,t),this.gcScheduler&&(t&&!this.gcScheduler.started?this.gcScheduler.start(this.localStore):t||this.gcScheduler.stop())}))}Wo(t){const e=Du();if(!Iu.bt(e))throw new Or(Rr.UNIMPLEMENTED,"IndexedDB persistence is only available on platforms that support LocalStorage.");const n=qc(t.databaseInfo.databaseId,t.databaseInfo.persistenceKey);return new Iu(e,t.asyncQueue,n,t.clientId,t.initialUser)}}class ll{async initialize(t,e){this.localStore||(this.localStore=t.localStore,this.sharedClientState=t.sharedClientState,this.datastore=this.createDatastore(e),this.remoteStore=this.createRemoteStore(e),this.eventManager=this.createEventManager(e),this.syncEngine=this.createSyncEngine(e,!t.synchronizeTabs),this.sharedClientState.onlineStateHandler=t=>Vh(this.syncEngine,t,1),this.remoteStore.remoteSyncer.handleCredentialChange=Yh.bind(null,this.syncEngine),await ch(this.remoteStore,this.syncEngine.isPrimaryClient))}createEventManager(t){return new yh}createDatastore(t){const e=ku(t.databaseInfo.databaseId),n=(r=t.databaseInfo,new Au(r));var r;return function(t,e,n){return new Mu(t,e,n)}(t.credentials,n,e)}createRemoteStore(t){return e=this.localStore,n=this.datastore,r=t.asyncQueue,s=t=>Vh(this.syncEngine,t,0),i=Su.bt()?new Su:new Tu,new Fu(e,n,r,s,i);var e,n,r,s,i}createSyncEngine(t,e){return function(t,e,n,r,s,i,o){const a=new Rh(t,e,n,r,s,i);return o&&(a.qo=!0),a}(this.localStore,this.remoteStore,this.eventManager,this.sharedClientState,t.initialUser,t.maxConcurrentLimboResolutions,e)}terminate(){return async function(t){const e=Lr(t);_r("RemoteStore","RemoteStore shutting down."),e.Kr.add(5),await Uu(e),e.Qr.shutdown(),e.Wr.set("Unknown")}(this.remoteStore)}}function dl(t,e=10240){let n=0;return{async read(){if(n<t.byteLength){const r={value:t.slice(n,n+e),done:!1};return n+=e,r}return{done:!0}},async cancel(){},releaseLock(){},closed:Promise.reject("unimplemented")}}class fl{constructor(t){this.observer=t,this.muted=!1}next(t){this.observer.next&&this.Yo(this.observer.next,t)}error(t){this.observer.error?this.Yo(this.observer.error,t):console.error("Uncaught Error in snapshot listener:",t)}Xo(){this.muted=!0}Yo(t,e){this.muted||setTimeout((()=>{this.muted||t(e)}),0)}}class pl{constructor(t,e){this.Zo=t,this.N=e,this.metadata=new Mr,this.buffer=new Uint8Array,this.ta=new TextDecoder("utf-8"),this.ea().then((t=>{t&&t.ho()?this.metadata.resolve(t.payload.metadata):this.metadata.reject(new Error(`The first element of the bundle is not a metadata, it is\n             ${JSON.stringify(null==t?void 0:t.payload)}`))}),(t=>this.metadata.reject(t)))}close(){return this.Zo.cancel()}async getMetadata(){return this.metadata.promise}async Qo(){return await this.getMetadata(),this.ea()}async ea(){const t=await this.na();if(null===t)return null;const e=this.ta.decode(t),n=Number(e);isNaN(n)&&this.sa(`length string (${e}) is not valid number`);const r=await this.ia(n);return new Sh(JSON.parse(r),t.length+n)}ra(){return this.buffer.findIndex((t=>t==="{".charCodeAt(0)))}async na(){for(;this.ra()<0&&!await this.oa(););if(0===this.buffer.length)return null;const t=this.ra();t<0&&this.sa("Reached the end of bundle when a length string is expected.");const e=this.buffer.slice(0,t);return this.buffer=this.buffer.slice(t),e}async ia(t){for(;this.buffer.length<t;)await this.oa()&&this.sa("Reached the end of bundle when more is expected.");const e=this.ta.decode(this.buffer.slice(0,t));return this.buffer=this.buffer.slice(t),e}sa(t){throw this.Zo.cancel(),new Error(`Invalid bundle format: ${t}`)}async oa(){const t=await this.Zo.read();if(!t.done){const e=new Uint8Array(this.buffer.length+t.value.length);e.set(this.buffer),e.set(t.value,this.buffer.length),this.buffer=e}return t.done}}class ml{constructor(t){this.datastore=t,this.readVersions=new Map,this.mutations=[],this.committed=!1,this.lastWriteError=null,this.writtenDocs=new Set}async lookup(t){if(this.ensureCommitNotCalled(),this.mutations.length>0)throw new Or(Rr.INVALID_ARGUMENT,"Firestore transactions require all reads to be executed before all writes.");const e=await async function(t,e){const n=Lr(t),r=Vo(n.N)+"/documents",s={documents:e.map((t=>Oo(n.N,t)))},i=await n.Ki("BatchGetDocuments",r,s),o=new Map;i.forEach((t=>{const e=function(t,e){return"found"in e?function(t,e){kr(!!e.found),e.found.name,e.found.updateTime;const n=Mo(t,e.found.name),r=xo(e.found.updateTime),s=new xs({mapValue:{fields:e.found.fields}});return Rs.newFoundDocument(n,r,s)}(t,e):"missing"in e?function(t,e){kr(!!e.missing),kr(!!e.readTime);const n=Mo(t,e.missing),r=xo(e.readTime);return Rs.newNoDocument(n,r)}(t,e):Cr()}(n.N,t);o.set(e.key.toString(),e)}));const a=[];return e.forEach((t=>{const e=o.get(t.toString());kr(!!e),a.push(e)})),a}(this.datastore,t);return e.forEach((t=>this.recordVersion(t))),e}set(t,e){this.write(e.toMutation(t,this.precondition(t))),this.writtenDocs.add(t.toString())}update(t,e){try{this.write(e.toMutation(t,this.preconditionForUpdate(t)))}catch(t){this.lastWriteError=t}this.writtenDocs.add(t.toString())}delete(t){this.write(new Hi(t,this.precondition(t))),this.writtenDocs.add(t.toString())}async commit(){if(this.ensureCommitNotCalled(),this.lastWriteError)throw this.lastWriteError;const t=this.readVersions;this.mutations.forEach((e=>{t.delete(e.key.toString())})),t.forEach(((t,e)=>{const n=gs.fromPath(e);this.mutations.push(new Qi(n,this.precondition(n)))})),await async function(t,e){const n=Lr(t),r=Vo(n.N)+"/documents",s={writes:e.map((t=>jo(n.N,t)))};await n.Li("Commit",r,s)}(this.datastore,this.mutations),this.committed=!0}recordVersion(t){let e;if(t.isFoundDocument())e=t.version;else{if(!t.isNoDocument())throw Cr();e=Wr.min()}const n=this.readVersions.get(t.key.toString());if(n){if(!e.isEqual(n))throw new Or(Rr.ABORTED,"Document version changed between two reads.")}else this.readVersions.set(t.key.toString(),e)}precondition(t){const e=this.readVersions.get(t.toString());return!this.writtenDocs.has(t.toString())&&e?Oi.updateTime(e):Oi.none()}preconditionForUpdate(t){const e=this.readVersions.get(t.toString());if(!this.writtenDocs.has(t.toString())&&e){if(e.isEqual(Wr.min()))throw new Or(Rr.INVALID_ARGUMENT,"Can't update a document that doesn't exist.");return Oi.updateTime(e)}return Oi.exists(!0)}write(t){this.ensureCommitNotCalled(),this.mutations.push(t)}ensureCommitNotCalled(){}}class gl{constructor(t,e,n,r){this.asyncQueue=t,this.datastore=e,this.updateFunction=n,this.deferred=r,this.aa=5,this.rr=new xu(this.asyncQueue,"transaction_retry")}run(){this.aa-=1,this.ca()}ca(){this.rr.Xi((async()=>{const t=new ml(this.datastore),e=this.ua(t);e&&e.then((e=>{this.asyncQueue.enqueueAndForget((()=>t.commit().then((()=>{this.deferred.resolve(e)})).catch((t=>{this.ha(t)}))))})).catch((t=>{this.ha(t)}))}))}ua(t){try{const e=this.updateFunction(t);return!fs(e)&&e.catch&&e.then?e:(this.deferred.reject(Error("Transaction callback must return a Promise")),null)}catch(t){return this.deferred.reject(t),null}}ha(t){this.aa>0&&this.la(t)?(this.aa-=1,this.asyncQueue.enqueueAndForget((()=>(this.ca(),Promise.resolve())))):this.deferred.reject(t)}la(t){if("FirebaseError"===t.name){const e=t.code;return"aborted"===e||"failed-precondition"===e||!Xi(e)}return!1}}class yl{constructor(t,e,n){this.credentials=t,this.asyncQueue=e,this.databaseInfo=n,this.user=br.UNAUTHENTICATED,this.clientId=zr.I(),this.credentialListener=()=>Promise.resolve(),this.credentials.start(e,(async t=>{_r("FirestoreClient","Received user=",t.uid),await this.credentialListener(t),this.user=t}))}async getConfiguration(){return{asyncQueue:this.asyncQueue,databaseInfo:this.databaseInfo,clientId:this.clientId,credentials:this.credentials,initialUser:this.user,maxConcurrentLimboResolutions:100}}setCredentialChangeListener(t){this.credentialListener=t}verifyNotTerminated(){if(this.asyncQueue.isShuttingDown)throw new Or(Rr.FAILED_PRECONDITION,"The client has already been terminated.")}terminate(){this.asyncQueue.enterRestrictedMode();const t=new Mr;return this.asyncQueue.enqueueAndForgetEvenWhileRestricted((async()=>{try{this.onlineComponents&&await this.onlineComponents.terminate(),this.offlineComponents&&await this.offlineComponents.terminate(),this.credentials.shutdown(),t.resolve()}catch(e){const n=dh(e,"Failed to shutdown persistence");t.reject(n)}})),t.promise}}async function vl(t,e){t.asyncQueue.verifyOperationInProgress(),_r("FirestoreClient","Initializing OfflineComponentProvider");const n=await t.getConfiguration();await e.initialize(n);let r=n.initialUser;t.setCredentialChangeListener((async t=>{r.isEqual(t)||(await Hc(e.localStore,t),r=t)})),e.persistence.setDatabaseDeletedListener((()=>t.terminate())),t.offlineComponents=e}async function wl(t,e){t.asyncQueue.verifyOperationInProgress();const n=await bl(t);_r("FirestoreClient","Initializing OnlineComponentProvider");const r=await t.getConfiguration();await e.initialize(n,r),t.setCredentialChangeListener((t=>async function(t,e){const n=Lr(t);n.asyncQueue.verifyOperationInProgress(),_r("RemoteStore","RemoteStore received new credentials");const r=Gu(n);n.Kr.add(3),await Uu(n),r&&n.Wr.set("Unknown"),await n.remoteSyncer.handleCredentialChange(e),n.Kr.delete(3),await Vu(n)}(e.remoteStore,t))),t.onlineComponents=e}async function bl(t){return t.offlineComponents||(_r("FirestoreClient","Using default OfflineComponentProvider"),await vl(t,new cl)),t.offlineComponents}async function Il(t){return t.onlineComponents||(_r("FirestoreClient","Using default OnlineComponentProvider"),await wl(t,new ll)),t.onlineComponents}function El(t){return bl(t).then((t=>t.persistence))}function Tl(t){return bl(t).then((t=>t.localStore))}function Sl(t){return Il(t).then((t=>t.remoteStore))}function _l(t){return Il(t).then((t=>t.syncEngine))}async function Nl(t){const e=await Il(t),n=e.eventManager;return n.onListen=Oh.bind(null,e.syncEngine),n.onUnlisten=Ph.bind(null,e.syncEngine),n}function Al(t,e,n={}){const r=new Mr;return t.asyncQueue.enqueueAndForget((async()=>function(t,e,n,r,s){const i=new fl({next:i=>{e.enqueueAndForget((()=>wh(t,o)));const a=i.docs.has(n);!a&&i.fromCache?s.reject(new Or(Rr.UNAVAILABLE,"Failed to get document because the client is offline.")):a&&i.fromCache&&r&&"server"===r.source?s.reject(new Or(Rr.UNAVAILABLE,'Failed to get document from server. (However, this document does exist in the local cache. Run again without setting source to "server" to retrieve the cached document.)')):s.resolve(i)},error:t=>s.reject(t)}),o=new Th(ni(n.path),i,{includeMetadataChanges:!0,uo:!0});return vh(t,o)}(await Nl(t),t.asyncQueue,e,n,r))),r.promise}function Dl(t,e,n={}){const r=new Mr;return t.asyncQueue.enqueueAndForget((async()=>function(t,e,n,r,s){const i=new fl({next:n=>{e.enqueueAndForget((()=>wh(t,o))),n.fromCache&&"server"===r.source?s.reject(new Or(Rr.UNAVAILABLE,'Failed to get documents from server. (However, these documents may exist in the local cache. Run again without setting source to "server" to retrieve the cached documents.)')):s.resolve(n)},error:t=>s.reject(t)}),o=new Th(n,i,{includeMetadataChanges:!0,uo:!0});return vh(t,o)}(await Nl(t),t.asyncQueue,e,n,r))),r.promise}class Cl{constructor(t,e,n,r,s,i,o,a){this.databaseId=t,this.appId=e,this.persistenceKey=n,this.host=r,this.ssl=s,this.forceLongPolling=i,this.autoDetectLongPolling=o,this.useFetchStreams=a}}class kl{constructor(t,e){this.projectId=t,this.database=e||"(default)"}get isDefaultDatabase(){return"(default)"===this.database}isEqual(t){return t instanceof kl&&t.projectId===this.projectId&&t.database===this.database}}const xl=new Map;function Ll(t,e,n){if(!n)throw new Or(Rr.INVALID_ARGUMENT,`Function ${t}() cannot be called with an empty ${e}.`)}function Rl(t,e,n,r){if(!0===e&&!0===r)throw new Or(Rr.INVALID_ARGUMENT,`${t} and ${n} cannot be used together.`)}function Ol(t){if(!gs.isDocumentKey(t))throw new Or(Rr.INVALID_ARGUMENT,`Invalid document reference. Document references must have an even number of segments, but ${t} has ${t.length}.`)}function Ml(t){if(gs.isDocumentKey(t))throw new Or(Rr.INVALID_ARGUMENT,`Invalid collection reference. Collection references must have an odd number of segments, but ${t} has ${t.length}.`)}function Pl(t){if(void 0===t)return"undefined";if(null===t)return"null";if("string"==typeof t)return t.length>20&&(t=`${t.substring(0,20)}...`),JSON.stringify(t);if("number"==typeof t||"boolean"==typeof t)return""+t;if("object"==typeof t){if(t instanceof Array)return"an array";{const e=function(t){if(t.constructor){const e=/function\s+([^\s(]+)\s*\(/.exec(t.constructor.toString());if(e&&e.length>1)return e[1]}return null}(t);return e?`a custom ${e} object`:"an object"}}return"function"==typeof t?"a function":Cr()}function Fl(t,e){if("_delegate"in t&&(t=t._delegate),!(t instanceof e)){if(e.name===t.constructor.name)throw new Or(Rr.INVALID_ARGUMENT,"Type does not match the expected instance. Did you pass a reference from a different Firestore SDK?");{const n=Pl(t);throw new Or(Rr.INVALID_ARGUMENT,`Expected type '${e.name}', but it was: ${n}`)}}return t}function Vl(t,e){if(e<=0)throw new Or(Rr.INVALID_ARGUMENT,`Function ${t}() requires a positive number, but it was: ${e}.`)}class Ul{constructor(t){var e;if(void 0===t.host){if(void 0!==t.ssl)throw new Or(Rr.INVALID_ARGUMENT,"Can't provide ssl option if host option is not set");this.host="firestore.googleapis.com",this.ssl=!0}else this.host=t.host,this.ssl=null===(e=t.ssl)||void 0===e||e;if(this.credentials=t.credentials,this.ignoreUndefinedProperties=!!t.ignoreUndefinedProperties,void 0===t.cacheSizeBytes)this.cacheSizeBytes=41943040;else{if(-1!==t.cacheSizeBytes&&t.cacheSizeBytes<1048576)throw new Or(Rr.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");this.cacheSizeBytes=t.cacheSizeBytes}this.experimentalForceLongPolling=!!t.experimentalForceLongPolling,this.experimentalAutoDetectLongPolling=!!t.experimentalAutoDetectLongPolling,this.useFetchStreams=!!t.useFetchStreams,Rl("experimentalForceLongPolling",t.experimentalForceLongPolling,"experimentalAutoDetectLongPolling",t.experimentalAutoDetectLongPolling)}isEqual(t){return this.host===t.host&&this.ssl===t.ssl&&this.credentials===t.credentials&&this.cacheSizeBytes===t.cacheSizeBytes&&this.experimentalForceLongPolling===t.experimentalForceLongPolling&&this.experimentalAutoDetectLongPolling===t.experimentalAutoDetectLongPolling&&this.ignoreUndefinedProperties===t.ignoreUndefinedProperties&&this.useFetchStreams===t.useFetchStreams}}class ql{constructor(t,e){this._credentials=e,this.type="firestore-lite",this._persistenceKey="(lite)",this._settings=new Ul({}),this._settingsFrozen=!1,t instanceof kl?this._databaseId=t:(this._app=t,this._databaseId=function(t){if(!Object.prototype.hasOwnProperty.apply(t.options,["projectId"]))throw new Or(Rr.INVALID_ARGUMENT,'"projectId" not provided in firebase.initializeApp.');return new kl(t.options.projectId)}(t))}get app(){if(!this._app)throw new Or(Rr.FAILED_PRECONDITION,"Firestore was not initialized using the Firebase SDK. 'app' is not available");return this._app}get _initialized(){return this._settingsFrozen}get _terminated(){return void 0!==this._terminateTask}_setSettings(t){if(this._settingsFrozen)throw new Or(Rr.FAILED_PRECONDITION,"Firestore has already been started and its settings can no longer be changed. You can only modify settings before calling any other methods on a Firestore object.");this._settings=new Ul(t),void 0!==t.credentials&&(this._credentials=function(t){if(!t)return new Fr;switch(t.type){case"gapi":const e=t.client;return kr(!("object"!=typeof e||null===e||!e.auth||!e.auth.getAuthHeaderValueForFirstParty)),new Br(e,t.sessionIndex||"0",t.iamToken||null);case"provider":return t.client;default:throw new Or(Rr.INVALID_ARGUMENT,"makeCredentialsProvider failed due to invalid credential type")}}(t.credentials))}_getSettings(){return this._settings}_freezeSettings(){return this._settingsFrozen=!0,this._settings}_delete(){return this._terminateTask||(this._terminateTask=this._terminate()),this._terminateTask}toJSON(){return{app:this._app,databaseId:this._databaseId,settings:this._settings}}_terminate(){return function(t){const e=xl.get(t);e&&(_r("ComponentProvider","Removing Datastore"),xl.delete(t),e.terminate())}(this),Promise.resolve()}}function Bl(t,e,n,r={}){var s;const i=(t=Fl(t,ql))._getSettings();if("firestore.googleapis.com"!==i.host&&i.host!==e&&Ar("Host has been set in both settings() and useEmulator(), emulator host will be used"),t._setSettings(Object.assign(Object.assign({},i),{host:`${e}:${n}`,ssl:!1})),r.mockUserToken){let e,n;if("string"==typeof r.mockUserToken)e=r.mockUserToken,n=br.MOCK_USER;else{e=(0,o.Sg)(r.mockUserToken,null===(s=t._app)||void 0===s?void 0:s.options.projectId);const i=r.mockUserToken.sub||r.mockUserToken.user_id;if(!i)throw new Or(Rr.INVALID_ARGUMENT,"mockUserToken must contain 'sub' or 'user_id' field!");n=new br(i)}t._credentials=new Vr(new Pr(e,n))}}class jl{constructor(t,e,n){this.converter=e,this._key=n,this.type="document",this.firestore=t}get _path(){return this._key.path}get id(){return this._key.path.lastSegment()}get path(){return this._key.path.canonicalString()}get parent(){return new zl(this.firestore,this.converter,this._key.path.popLast())}withConverter(t){return new jl(this.firestore,t,this._key)}}class Kl{constructor(t,e,n){this.converter=e,this._query=n,this.type="query",this.firestore=t}withConverter(t){return new Kl(this.firestore,t,this._query)}}class zl extends Kl{constructor(t,e,n){super(t,e,ni(n)),this._path=n,this.type="collection"}get id(){return this._query.path.lastSegment()}get path(){return this._query.path.canonicalString()}get parent(){const t=this._path.popLast();return t.isEmpty()?null:new jl(this.firestore,null,new gs(t))}withConverter(t){return new zl(this.firestore,t,this._path)}}function $l(t,e,...n){if(t=(0,o.m9)(t),Ll("collection","path",e),t instanceof ql){const r=ts.fromString(e,...n);return Ml(r),new zl(t,null,r)}{if(!(t instanceof jl||t instanceof zl))throw new Or(Rr.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=t._path.child(ts.fromString(e,...n));return Ml(r),new zl(t.firestore,null,r)}}function Gl(t,e){if(t=Fl(t,ql),Ll("collectionGroup","collection id",e),e.indexOf("/")>=0)throw new Or(Rr.INVALID_ARGUMENT,`Invalid collection ID '${e}' passed to function collectionGroup(). Collection IDs must not contain '/'.`);return new Kl(t,null,function(t){return new ti(ts.emptyPath(),t)}(e))}function Hl(t,e,...n){if(t=(0,o.m9)(t),1===arguments.length&&(e=zr.I()),Ll("doc","path",e),t instanceof ql){const r=ts.fromString(e,...n);return Ol(r),new jl(t,null,new gs(r))}{if(!(t instanceof jl||t instanceof zl))throw new Or(Rr.INVALID_ARGUMENT,"Expected first argument to collection() to be a CollectionReference, a DocumentReference or FirebaseFirestore");const r=t._path.child(ts.fromString(e,...n));return Ol(r),new jl(t.firestore,t instanceof zl?t.converter:null,new gs(r))}}function Ql(t,e){return t=(0,o.m9)(t),e=(0,o.m9)(e),(t instanceof jl||t instanceof zl)&&(e instanceof jl||e instanceof zl)&&t.firestore===e.firestore&&t.path===e.path&&t.converter===e.converter}function Wl(t,e){return t=(0,o.m9)(t),e=(0,o.m9)(e),t instanceof Kl&&e instanceof Kl&&t.firestore===e.firestore&&li(t._query,e._query)&&t.converter===e.converter}class Yl{constructor(){this.fa=Promise.resolve(),this.da=[],this.wa=!1,this._a=[],this.ma=null,this.ga=!1,this.ya=!1,this.pa=[],this.rr=new xu(this,"async_queue_retry"),this.Ea=()=>{const t=Cu();t&&_r("AsyncQueue","Visibility state changed to "+t.visibilityState),this.rr.tr()};const t=Cu();t&&"function"==typeof t.addEventListener&&t.addEventListener("visibilitychange",this.Ea)}get isShuttingDown(){return this.wa}enqueueAndForget(t){this.enqueue(t)}enqueueAndForgetEvenWhileRestricted(t){this.Ta(),this.Ia(t)}enterRestrictedMode(t){if(!this.wa){this.wa=!0,this.ya=t||!1;const e=Cu();e&&"function"==typeof e.removeEventListener&&e.removeEventListener("visibilitychange",this.Ea)}}enqueue(t){if(this.Ta(),this.wa)return new Promise((()=>{}));const e=new Mr;return this.Ia((()=>this.wa&&this.ya?Promise.resolve():(t().then(e.resolve,e.reject),e.promise))).then((()=>e.promise))}enqueueRetryable(t){this.enqueueAndForget((()=>(this.da.push(t),this.Aa())))}async Aa(){if(0!==this.da.length){try{await this.da[0](),this.da.shift(),this.rr.reset()}catch(t){if(!La(t))throw t;_r("AsyncQueue","Operation failed with retryable error: "+t)}this.da.length>0&&this.rr.Xi((()=>this.Aa()))}}Ia(t){const e=this.fa.then((()=>(this.ga=!0,t().catch((t=>{throw this.ma=t,this.ga=!1,Nr("INTERNAL UNHANDLED ERROR: ",function(t){let e=t.message||"";return t.stack&&(e=t.stack.includes(t.message)?t.stack:t.message+"\n"+t.stack),e}(t)),t})).then((t=>(this.ga=!1,t))))));return this.fa=e,e}enqueueAfterDelay(t,e,n){this.Ta(),this.pa.indexOf(t)>-1&&(e=0);const r=lh.createAndSchedule(this,t,e,n,(t=>this.Ra(t)));return this._a.push(r),r}Ta(){this.ma&&Cr()}verifyOperationInProgress(){}async ba(){let t;do{t=this.fa,await t}while(t!==this.fa)}Pa(t){for(const e of this._a)if(e.timerId===t)return!0;return!1}va(t){return this.ba().then((()=>{this._a.sort(((t,e)=>t.targetTimeMs-e.targetTimeMs));for(const e of this._a)if(e.skipDelay(),"all"!==t&&e.timerId===t)break;return this.ba()}))}Va(t){this.pa.push(t)}Ra(t){const e=this._a.indexOf(t);this._a.splice(e,1)}}function Jl(t){return function(t,e){if("object"!=typeof t||null===t)return!1;const n=t;for(const t of["next","error","complete"])if(t in n&&"function"==typeof n[t])return!0;return!1}(t)}class Xl{constructor(){this._progressObserver={},this._taskCompletionResolver=new Mr,this._lastProgress={taskState:"Running",totalBytes:0,totalDocuments:0,bytesLoaded:0,documentsLoaded:0}}onProgress(t,e,n){this._progressObserver={next:t,error:e,complete:n}}catch(t){return this._taskCompletionResolver.promise.catch(t)}then(t,e){return this._taskCompletionResolver.promise.then(t,e)}_completeWith(t){this._updateProgress(t),this._progressObserver.complete&&this._progressObserver.complete(),this._taskCompletionResolver.resolve(t)}_failWith(t){this._lastProgress.taskState="Error",this._progressObserver.next&&this._progressObserver.next(this._lastProgress),this._progressObserver.error&&this._progressObserver.error(t),this._taskCompletionResolver.reject(t)}_updateProgress(t){this._lastProgress=t,this._progressObserver.next&&this._progressObserver.next(t)}}const Zl=-1;class td extends ql{constructor(t,e){super(t,e),this.type="firestore",this._queue=new Yl,this._persistenceKey="name"in t?t.name:"[DEFAULT]"}_terminate(){return this._firestoreClient||sd(this),this._firestoreClient.terminate()}}function ed(t,e){const n=(0,r.qX)(t,"firestore");if(n.isInitialized()){const t=n.getImmediate(),r=n.getOptions();if((0,o.vZ)(r,e))return t;throw new Or(Rr.FAILED_PRECONDITION,"initializeFirestore() has already been called with different options. To avoid this error, call initializeFirestore() with the same options as when it was originally called, or call getFirestore() to return the already initialized instance.")}if(void 0!==e.cacheSizeBytes&&-1!==e.cacheSizeBytes&&e.cacheSizeBytes<1048576)throw new Or(Rr.INVALID_ARGUMENT,"cacheSizeBytes must be at least 1048576");return n.initialize({options:e})}function nd(t=(0,r.Mq)()){return(0,r.qX)(t,"firestore").getImmediate()}function rd(t){return t._firestoreClient||sd(t),t._firestoreClient.verifyNotTerminated(),t._firestoreClient}function sd(t){var e;const n=t._freezeSettings(),r=function(t,e,n,r){return new Cl(t,e,n,r.host,r.ssl,r.experimentalForceLongPolling,r.experimentalAutoDetectLongPolling,r.useFetchStreams)}(t._databaseId,(null===(e=t._app)||void 0===e?void 0:e.options.appId)||"",t._persistenceKey,n);t._firestoreClient=new yl(t._credentials,t._queue,r)}function id(t,e){md(t=Fl(t,td));const n=rd(t),r=t._freezeSettings(),s=new ll;return ad(n,s,new ul(s,r.cacheSizeBytes,null==e?void 0:e.forceOwnership))}function od(t){md(t=Fl(t,td));const e=rd(t),n=t._freezeSettings(),r=new ll;return ad(e,r,new hl(r,n.cacheSizeBytes))}function ad(t,e,n){const r=new Mr;return t.asyncQueue.enqueue((async()=>{try{await vl(t,n),await wl(t,e),r.resolve()}catch(t){if(!function(t){return"FirebaseError"===t.name?t.code===Rr.FAILED_PRECONDITION||t.code===Rr.UNIMPLEMENTED:!("undefined"!=typeof DOMException&&t instanceof DOMException)||22===t.code||20===t.code||11===t.code}(t))throw t;console.warn("Error enabling offline persistence. Falling back to persistence disabled: "+t),r.reject(t)}})).then((()=>r.promise))}function cd(t){if(t._initialized&&!t._terminated)throw new Or(Rr.FAILED_PRECONDITION,"Persistence can only be cleared before a Firestore instance is initialized or after it is terminated.");const e=new Mr;return t._queue.enqueueAndForgetEvenWhileRestricted((async()=>{try{await async function(t){if(!Ca.bt())return Promise.resolve();const e=t+"main";await Ca.delete(e)}(qc(t._databaseId,t._persistenceKey)),e.resolve()}catch(t){e.reject(t)}})),e.promise}function ud(t){return function(t){const e=new Mr;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e){const n=Lr(t);Gu(n.remoteStore)||_r("SyncEngine","The network is disabled. The task returned by 'awaitPendingWrites()' will not complete until the network is enabled.");try{const t=await function(t){const e=Lr(t);return e.persistence.runTransaction("Get highest unacknowledged batch id","readonly",(t=>e.In.getHighestUnacknowledgedBatchId(t)))}(n.localStore);if(-1===t)return void e.resolve();const r=n.Bo.get(t)||[];r.push(e),n.Bo.set(t,r)}catch(t){const n=dh(t,"Initialization of waitForPendingWrites() operation failed");e.reject(n)}}(await _l(t),e))),e.promise}(rd(t=Fl(t,td)))}function hd(t){return function(t){return t.asyncQueue.enqueue((async()=>{const e=await El(t),n=await Sl(t);return e.setNetworkEnabled(!0),function(t){const e=Lr(t);return e.Kr.delete(0),Vu(e)}(n)}))}(rd(t=Fl(t,td)))}function ld(t){return function(t){return t.asyncQueue.enqueue((async()=>{const e=await El(t),n=await Sl(t);return e.setNetworkEnabled(!1),async function(t){const e=Lr(t);e.Kr.add(0),await Uu(e),e.Wr.set("Offline")}(n)}))}(rd(t=Fl(t,td)))}function dd(t){return(0,r.wN)(t.app,"firestore"),t._delete()}function fd(t,e){const n=rd(t=Fl(t,td)),r=new Xl;return function(t,e,n,r){const s=function(t,e){let n;return n="string"==typeof t?(new TextEncoder).encode(t):t,function(t,e){return new pl(t,e)}(function(t,e){if(t instanceof Uint8Array)return dl(t,e);if(t instanceof ArrayBuffer)return dl(new Uint8Array(t),e);if(t instanceof ReadableStream)return t.getReader();throw new Error("Source of `toByteStreamReader` has to be a ArrayBuffer or ReadableStream")}(n),e)}(n,ku(e));t.asyncQueue.enqueueAndForget((async()=>{!function(t,e,n){const r=Lr(t);(async function(t,e,n){try{const r=await e.getMetadata();if(await function(t,e){const n=Lr(t),r=xo(e.createTime);return n.persistence.runTransaction("hasNewerBundle","readonly",(t=>n.Je.getBundleMetadata(t,e.id))).then((t=>!!t&&t.createTime.compareTo(r)>=0))}(t.localStore,r))return await e.close(),void n._completeWith(function(t){return{taskState:"Success",documentsLoaded:t.totalDocuments,bytesLoaded:t.totalBytes,totalDocuments:t.totalDocuments,totalBytes:t.totalBytes}}(r));n._updateProgress(Ah(r));const s=new Nh(r,t.localStore,e.N);let i=await e.Qo();for(;i;){const t=await s.fo(i);t&&n._updateProgress(t),i=await e.Qo()}const o=await s.complete();await Wh(t,o.Tn,void 0),await function(t,e){const n=Lr(t);return n.persistence.runTransaction("Save bundle","readwrite",(t=>n.Je.saveBundleMetadata(t,e)))}(t.localStore,r),n._completeWith(o.progress)}catch(t){Ar("SyncEngine",`Loading bundle failed with ${t}`),n._failWith(t)}})(r,e,n).then((()=>{r.sharedClientState.notifyBundleLoaded()}))}(await _l(t),s,r)}))}(n,t._databaseId,e,r),r}function pd(t,e){return function(t,e){return t.asyncQueue.enqueue((async()=>function(t,e){const n=Lr(t);return n.persistence.runTransaction("Get named query","readonly",(t=>n.Je.getNamedQuery(t,e)))}(await Tl(t),e)))}(rd(t=Fl(t,td)),e).then((e=>e?new Kl(t,null,e.query):null))}function md(t){if(t._initialized||t._terminated)throw new Or(Rr.FAILED_PRECONDITION,"Firestore has already been started and persistence can no longer be enabled. You can only enable persistence before calling any other methods on a Firestore object.")}class gd{constructor(...t){for(let e=0;e<t.length;++e)if(0===t[e].length)throw new Or(Rr.INVALID_ARGUMENT,"Invalid field name at argument $(i + 1). Field names must not be empty.");this._internalPath=new ns(t)}isEqual(t){return this._internalPath.isEqual(t._internalPath)}}function yd(){return new gd("__name__")}class vd{constructor(t){this._byteString=t}static fromBase64String(t){try{return new vd(is.fromBase64String(t))}catch(t){throw new Or(Rr.INVALID_ARGUMENT,"Failed to construct data from Base64 string: "+t)}}static fromUint8Array(t){return new vd(is.fromUint8Array(t))}toBase64(){return this._byteString.toBase64()}toUint8Array(){return this._byteString.toUint8Array()}toString(){return"Bytes(base64: "+this.toBase64()+")"}isEqual(t){return this._byteString.isEqual(t._byteString)}}class wd{constructor(t){this._methodName=t}}class bd{constructor(t,e){if(!isFinite(t)||t<-90||t>90)throw new Or(Rr.INVALID_ARGUMENT,"Latitude must be a number between -90 and 90, but was: "+t);if(!isFinite(e)||e<-180||e>180)throw new Or(Rr.INVALID_ARGUMENT,"Longitude must be a number between -180 and 180, but was: "+e);this._lat=t,this._long=e}get latitude(){return this._lat}get longitude(){return this._long}isEqual(t){return this._lat===t._lat&&this._long===t._long}toJSON(){return{latitude:this._lat,longitude:this._long}}_compareTo(t){return $r(this._lat,t._lat)||$r(this._long,t._long)}}const Id=/^__.*__$/;class Ed{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return null!==this.fieldMask?new Ki(t,this.data,this.fieldMask,e,this.fieldTransforms):new ji(t,this.data,e,this.fieldTransforms)}}class Td{constructor(t,e,n){this.data=t,this.fieldMask=e,this.fieldTransforms=n}toMutation(t,e){return new Ki(t,this.data,this.fieldMask,e,this.fieldTransforms)}}function Sd(t){switch(t){case 0:case 2:case 1:return!0;case 3:case 4:return!1;default:throw Cr()}}class _d{constructor(t,e,n,r,s,i){this.settings=t,this.databaseId=e,this.N=n,this.ignoreUndefinedProperties=r,void 0===s&&this.Sa(),this.fieldTransforms=s||[],this.fieldMask=i||[]}get path(){return this.settings.path}get Da(){return this.settings.Da}Ca(t){return new _d(Object.assign(Object.assign({},this.settings),t),this.databaseId,this.N,this.ignoreUndefinedProperties,this.fieldTransforms,this.fieldMask)}Na(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.Ca({path:n,xa:!1});return r.ka(t),r}$a(t){var e;const n=null===(e=this.path)||void 0===e?void 0:e.child(t),r=this.Ca({path:n,xa:!1});return r.Sa(),r}Oa(t){return this.Ca({path:void 0,xa:!0})}Fa(t){return $d(t,this.settings.methodName,this.settings.Ma||!1,this.path,this.settings.La)}contains(t){return void 0!==this.fieldMask.find((e=>t.isPrefixOf(e)))||void 0!==this.fieldTransforms.find((e=>t.isPrefixOf(e.field)))}Sa(){if(this.path)for(let t=0;t<this.path.length;t++)this.ka(this.path.get(t))}ka(t){if(0===t.length)throw this.Fa("Document fields must not be empty");if(Sd(this.Da)&&Id.test(t))throw this.Fa('Document fields cannot begin and end with "__"')}}class Nd{constructor(t,e,n){this.databaseId=t,this.ignoreUndefinedProperties=e,this.N=n||ku(t)}Ba(t,e,n,r=!1){return new _d({Da:t,methodName:e,La:n,path:ns.emptyPath(),xa:!1,Ma:r},this.databaseId,this.N,this.ignoreUndefinedProperties)}}function Ad(t){const e=t._freezeSettings(),n=ku(t._databaseId);return new Nd(t._databaseId,!!e.ignoreUndefinedProperties,n)}function Dd(t,e,n,r,s,i={}){const o=t.Ba(i.merge||i.mergeFields?2:0,e,n,s);Bd("Data must be an object, but it was:",o,r);const a=Ud(r,o);let c,u;if(i.merge)c=new rs(o.fieldMask),u=o.fieldTransforms;else if(i.mergeFields){const t=[];for(const r of i.mergeFields){const s=jd(e,r,n);if(!o.contains(s))throw new Or(Rr.INVALID_ARGUMENT,`Field '${s}' is specified in your field mask but missing from your input data.`);Gd(t,s)||t.push(s)}c=new rs(t),u=o.fieldTransforms.filter((t=>c.covers(t.field)))}else c=null,u=o.fieldTransforms;return new Ed(new xs(a),c,u)}class Cd extends wd{_toFieldTransform(t){if(2!==t.Da)throw 1===t.Da?t.Fa(`${this._methodName}() can only appear at the top level of your update data`):t.Fa(`${this._methodName}() cannot be used with set() unless you pass {merge:true}`);return t.fieldMask.push(t.path),null}isEqual(t){return t instanceof Cd}}function kd(t,e,n){return new _d({Da:3,La:e.settings.La,methodName:t._methodName,xa:n},e.databaseId,e.N,e.ignoreUndefinedProperties)}class xd extends wd{_toFieldTransform(t){return new Li(t.path,new Si)}isEqual(t){return t instanceof xd}}class Ld extends wd{constructor(t,e){super(t),this.Ua=e}_toFieldTransform(t){const e=kd(this,t,!0),n=this.Ua.map((t=>Vd(t,e))),r=new _i(n);return new Li(t.path,r)}isEqual(t){return this===t}}class Rd extends wd{constructor(t,e){super(t),this.Ua=e}_toFieldTransform(t){const e=kd(this,t,!0),n=this.Ua.map((t=>Vd(t,e))),r=new Ai(n);return new Li(t.path,r)}isEqual(t){return this===t}}class Od extends wd{constructor(t,e){super(t),this.qa=e}_toFieldTransform(t){const e=new Ci(t.N,wi(t.N,this.qa));return new Li(t.path,e)}isEqual(t){return this===t}}function Md(t,e,n,r){const s=t.Ba(1,e,n);Bd("Data must be an object, but it was:",s,r);const i=[],a=xs.empty();Jr(r,((t,r)=>{const c=zd(e,t,n);r=(0,o.m9)(r);const u=s.$a(c);if(r instanceof Cd)i.push(c);else{const t=Vd(r,u);null!=t&&(i.push(c),a.set(c,t))}}));const c=new rs(i);return new Td(a,c,s.fieldTransforms)}function Pd(t,e,n,r,s,i){const a=t.Ba(1,e,n),c=[jd(e,r,n)],u=[s];if(i.length%2!=0)throw new Or(Rr.INVALID_ARGUMENT,`Function ${e}() needs to be called with an even number of arguments that alternate between field names and values.`);for(let t=0;t<i.length;t+=2)c.push(jd(e,i[t])),u.push(i[t+1]);const h=[],l=xs.empty();for(let t=c.length-1;t>=0;--t)if(!Gd(h,c[t])){const e=c[t];let n=u[t];n=(0,o.m9)(n);const r=a.$a(e);if(n instanceof Cd)h.push(e);else{const t=Vd(n,r);null!=t&&(h.push(e),l.set(e,t))}}const d=new rs(h);return new Td(l,d,a.fieldTransforms)}function Fd(t,e,n,r=!1){return Vd(n,t.Ba(r?4:3,e))}function Vd(t,e){if(qd(t=(0,o.m9)(t)))return Bd("Unsupported field value:",e,t),Ud(t,e);if(t instanceof wd)return function(t,e){if(!Sd(e.Da))throw e.Fa(`${t._methodName}() can only be used with update() and set()`);if(!e.path)throw e.Fa(`${t._methodName}() is not currently supported inside arrays`);const n=t._toFieldTransform(e);n&&e.fieldTransforms.push(n)}(t,e),null;if(void 0===t&&e.ignoreUndefinedProperties)return null;if(e.path&&e.fieldMask.push(e.path),t instanceof Array){if(e.settings.xa&&4!==e.Da)throw e.Fa("Nested arrays are not supported");return function(t,e){const n=[];let r=0;for(const s of t){let t=Vd(s,e.Oa(r));null==t&&(t={nullValue:"NULL_VALUE"}),n.push(t),r++}return{arrayValue:{values:n}}}(t,e)}return function(t,e){if(null===(t=(0,o.m9)(t)))return{nullValue:"NULL_VALUE"};if("number"==typeof t)return wi(e.N,t);if("boolean"==typeof t)return{booleanValue:t};if("string"==typeof t)return{stringValue:t};if(t instanceof Date){const n=Qr.fromDate(t);return{timestampValue:Do(e.N,n)}}if(t instanceof Qr){const n=new Qr(t.seconds,1e3*Math.floor(t.nanoseconds/1e3));return{timestampValue:Do(e.N,n)}}if(t instanceof bd)return{geoPointValue:{latitude:t.latitude,longitude:t.longitude}};if(t instanceof vd)return{bytesValue:Co(e.N,t._byteString)};if(t instanceof jl){const n=e.databaseId,r=t.firestore._databaseId;if(!r.isEqual(n))throw e.Fa(`Document reference is for database ${r.projectId}/${r.database} but should be for database ${n.projectId}/${n.database}`);return{referenceValue:Lo(t.firestore._databaseId||e.databaseId,t._key.path)}}throw e.Fa(`Unsupported field value: ${Pl(t)}`)}(t,e)}function Ud(t,e){const n={};return Xr(t)?e.path&&e.path.length>0&&e.fieldMask.push(e.path):Jr(t,((t,r)=>{const s=Vd(r,e.Na(t));null!=s&&(n[t]=s)})),{mapValue:{fields:n}}}function qd(t){return!("object"!=typeof t||null===t||t instanceof Array||t instanceof Date||t instanceof Qr||t instanceof bd||t instanceof vd||t instanceof jl||t instanceof wd)}function Bd(t,e,n){if(!qd(n)||!function(t){return"object"==typeof t&&null!==t&&(Object.getPrototypeOf(t)===Object.prototype||null===Object.getPrototypeOf(t))}(n)){const r=Pl(n);throw"an object"===r?e.Fa(t+" a custom object"):e.Fa(t+" "+r)}}function jd(t,e,n){if((e=(0,o.m9)(e))instanceof gd)return e._internalPath;if("string"==typeof e)return zd(t,e);throw $d("Field path arguments must be of type string or FieldPath.",t,!1,void 0,n)}const Kd=new RegExp("[~\\*/\\[\\]]");function zd(t,e,n){if(e.search(Kd)>=0)throw $d(`Invalid field path (${e}). Paths must not contain '~', '*', '/', '[', or ']'`,t,!1,void 0,n);try{return new gd(...e.split("."))._internalPath}catch(r){throw $d(`Invalid field path (${e}). Paths must not be empty, begin with '.', end with '.', or contain '..'`,t,!1,void 0,n)}}function $d(t,e,n,r,s){const i=r&&!r.isEmpty(),o=void 0!==s;let a=`Function ${e}() called with invalid data`;n&&(a+=" (via `toFirestore()`)"),a+=". ";let c="";return(i||o)&&(c+=" (found",i&&(c+=` in field ${r}`),o&&(c+=` in document ${s}`),c+=")"),new Or(Rr.INVALID_ARGUMENT,a+t+c)}function Gd(t,e){return t.some((t=>t.isEqual(e)))}class Hd{constructor(t,e,n,r,s){this._firestore=t,this._userDataWriter=e,this._key=n,this._document=r,this._converter=s}get id(){return this._key.path.lastSegment()}get ref(){return new jl(this._firestore,this._converter,this._key)}exists(){return null!==this._document}data(){if(this._document){if(this._converter){const t=new Qd(this._firestore,this._userDataWriter,this._key,this._document,null);return this._converter.fromFirestore(t)}return this._userDataWriter.convertValue(this._document.data.value)}}get(t){if(this._document){const e=this._document.data.field(Wd("DocumentSnapshot.get",t));if(null!==e)return this._userDataWriter.convertValue(e)}}}class Qd extends Hd{data(){return super.data()}}function Wd(t,e){return"string"==typeof e?zd(t,e):e instanceof gd?e._internalPath:e._delegate._internalPath}class Yd{constructor(t,e){this.hasPendingWrites=t,this.fromCache=e}isEqual(t){return this.hasPendingWrites===t.hasPendingWrites&&this.fromCache===t.fromCache}}class Jd extends Hd{constructor(t,e,n,r,s,i){super(t,e,n,r,i),this._firestore=t,this._firestoreImpl=t,this.metadata=s}exists(){return super.exists()}data(t={}){if(this._document){if(this._converter){const e=new Xd(this._firestore,this._userDataWriter,this._key,this._document,this.metadata,null);return this._converter.fromFirestore(e,t)}return this._userDataWriter.convertValue(this._document.data.value,t.serverTimestamps)}}get(t,e={}){if(this._document){const n=this._document.data.field(Wd("DocumentSnapshot.get",t));if(null!==n)return this._userDataWriter.convertValue(n,e.serverTimestamps)}}}class Xd extends Jd{data(t={}){return super.data(t)}}class Zd{constructor(t,e,n,r){this._firestore=t,this._userDataWriter=e,this._snapshot=r,this.metadata=new Yd(r.hasPendingWrites,r.fromCache),this.query=n}get docs(){const t=[];return this.forEach((e=>t.push(e))),t}get size(){return this._snapshot.docs.size}get empty(){return 0===this.size}forEach(t,e){this._snapshot.docs.forEach((n=>{t.call(e,new Xd(this._firestore,this._userDataWriter,n.key,n,new Yd(this._snapshot.mutatedKeys.has(n.key),this._snapshot.fromCache),this.query.converter))}))}docChanges(t={}){const e=!!t.includeMetadataChanges;if(e&&this._snapshot.excludesMetadataChanges)throw new Or(Rr.INVALID_ARGUMENT,"To include metadata changes with your document changes, you must also pass { includeMetadataChanges:true } to onSnapshot().");return this._cachedChanges&&this._cachedChangesIncludeMetadataChanges===e||(this._cachedChanges=function(t,e){if(t._snapshot.oldDocs.isEmpty()){let e=0;return t._snapshot.docChanges.map((n=>({type:"added",doc:new Xd(t._firestore,t._userDataWriter,n.doc.key,n.doc,new Yd(t._snapshot.mutatedKeys.has(n.doc.key),t._snapshot.fromCache),t.query.converter),oldIndex:-1,newIndex:e++})))}{let n=t._snapshot.oldDocs;return t._snapshot.docChanges.filter((t=>e||3!==t.type)).map((e=>{const r=new Xd(t._firestore,t._userDataWriter,e.doc.key,e.doc,new Yd(t._snapshot.mutatedKeys.has(e.doc.key),t._snapshot.fromCache),t.query.converter);let s=-1,i=-1;return 0!==e.type&&(s=n.indexOf(e.doc.key),n=n.delete(e.doc.key)),1!==e.type&&(n=n.add(e.doc),i=n.indexOf(e.doc.key)),{type:tf(e.type),doc:r,oldIndex:s,newIndex:i}}))}}(this,e),this._cachedChangesIncludeMetadataChanges=e),this._cachedChanges}}function tf(t){switch(t){case 0:return"added";case 2:case 3:return"modified";case 1:return"removed";default:return Cr()}}function ef(t,e){return t instanceof Jd&&e instanceof Jd?t._firestore===e._firestore&&t._key.isEqual(e._key)&&(null===t._document?null===e._document:t._document.isEqual(e._document))&&t._converter===e._converter:t instanceof Zd&&e instanceof Zd&&t._firestore===e._firestore&&Wl(t.query,e.query)&&t.metadata.isEqual(e.metadata)&&t._snapshot.isEqual(e._snapshot)}function nf(t){if(si(t)&&0===t.explicitOrderBy.length)throw new Or(Rr.UNIMPLEMENTED,"limitToLast() queries require specifying at least one orderBy() clause")}class rf{}function sf(t,...e){for(const n of e)t=n._apply(t);return t}class of extends rf{constructor(t,e,n){super(),this.Ka=t,this.ja=e,this.Qa=n,this.type="where"}_apply(t){const e=Ad(t.firestore),n=function(t,e,n,r,s,i,o){let a;if(s.isKeyField()){if("array-contains"===i||"array-contains-any"===i)throw new Or(Rr.INVALID_ARGUMENT,`Invalid Query. You can't perform '${i}' queries on FieldPath.documentId().`);if("in"===i||"not-in"===i){If(o,i);const e=[];for(const n of o)e.push(bf(r,t,n));a={arrayValue:{values:e}}}else a=bf(r,t,o)}else"in"!==i&&"not-in"!==i&&"array-contains-any"!==i||If(o,i),a=Fd(n,"where",o,"in"===i||"not-in"===i);const c=Us.create(s,i,a);return function(t,e){if(e.v()){const n=oi(t);if(null!==n&&!n.isEqual(e.field))throw new Or(Rr.INVALID_ARGUMENT,`Invalid query. All where filters with an inequality (<, <=, !=, not-in, >, or >=) must be on the same field. But you have inequality filters on '${n.toString()}' and '${e.field.toString()}'`);const r=ii(t);null!==r&&Ef(0,e.field,r)}const n=function(t,e){for(const n of t.filters)if(e.indexOf(n.op)>=0)return n.op;return null}(t,function(t){switch(t){case"!=":return["!=","not-in"];case"array-contains":return["array-contains","array-contains-any","not-in"];case"in":return["array-contains-any","in","not-in"];case"array-contains-any":return["array-contains","array-contains-any","in","not-in"];case"not-in":return["array-contains","array-contains-any","in","not-in","!="];default:return[]}}(e.op));if(null!==n)throw n===e.op?new Or(Rr.INVALID_ARGUMENT,`Invalid query. You cannot use more than one '${e.op.toString()}' filter.`):new Or(Rr.INVALID_ARGUMENT,`Invalid query. You cannot use '${e.op.toString()}' filters with '${n.toString()}' filters.`)}(t,c),c}(t._query,0,e,t.firestore._databaseId,this.Ka,this.ja,this.Qa);return new Kl(t.firestore,t.converter,function(t,e){const n=t.filters.concat([e]);return new ti(t.path,t.collectionGroup,t.explicitOrderBy.slice(),n,t.limit,t.limitType,t.startAt,t.endAt)}(t._query,n))}}function af(t,e,n){const r=e,s=Wd("where",t);return new of(s,r,n)}class cf extends rf{constructor(t,e){super(),this.Ka=t,this.Wa=e,this.type="orderBy"}_apply(t){const e=function(t,e,n){if(null!==t.startAt)throw new Or(Rr.INVALID_ARGUMENT,"Invalid query. You must not call startAt() or startAfter() before calling orderBy().");if(null!==t.endAt)throw new Or(Rr.INVALID_ARGUMENT,"Invalid query. You must not call endAt() or endBefore() before calling orderBy().");const r=new Ys(e,n);return function(t,e){if(null===ii(t)){const n=oi(t);null!==n&&Ef(0,n,e.field)}}(t,r),r}(t._query,this.Ka,this.Wa);return new Kl(t.firestore,t.converter,function(t,e){const n=t.explicitOrderBy.concat([e]);return new ti(t.path,t.collectionGroup,n,t.filters.slice(),t.limit,t.limitType,t.startAt,t.endAt)}(t._query,e))}}function uf(t,e="asc"){const n=e,r=Wd("orderBy",t);return new cf(r,n)}class hf extends rf{constructor(t,e,n){super(),this.type=t,this.Ga=e,this.za=n}_apply(t){return new Kl(t.firestore,t.converter,hi(t._query,this.Ga,this.za))}}function lf(t){return Vl("limit",t),new hf("limit",t,"F")}function df(t){return Vl("limitToLast",t),new hf("limitToLast",t,"L")}class ff extends rf{constructor(t,e,n){super(),this.type=t,this.Ha=e,this.Ja=n}_apply(t){const e=wf(t,this.type,this.Ha,this.Ja);return new Kl(t.firestore,t.converter,function(t,e){return new ti(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,e,t.endAt)}(t._query,e))}}function pf(...t){return new ff("startAt",t,!0)}function mf(...t){return new ff("startAfter",t,!1)}class gf extends rf{constructor(t,e,n){super(),this.type=t,this.Ha=e,this.Ja=n}_apply(t){const e=wf(t,this.type,this.Ha,this.Ja);return new Kl(t.firestore,t.converter,function(t,e){return new ti(t.path,t.collectionGroup,t.explicitOrderBy.slice(),t.filters.slice(),t.limit,t.limitType,t.startAt,e)}(t._query,e))}}function yf(...t){return new gf("endBefore",t,!0)}function vf(...t){return new gf("endAt",t,!1)}function wf(t,e,n,r){if(n[0]=(0,o.m9)(n[0]),n[0]instanceof Hd)return function(t,e,n,r,s){if(!r)throw new Or(Rr.NOT_FOUND,`Can't use a DocumentSnapshot that doesn't exist for ${n}().`);const i=[];for(const n of ci(t))if(n.field.isKeyField())i.push(Ss(e,r.key));else{const t=r.data.field(n.field);if(hs(t))throw new Or(Rr.INVALID_ARGUMENT,'Invalid query. You are trying to start or end a query using a document for which the field "'+n.field+'" is an uncommitted server timestamp. (Since the value of this field is unknown, you cannot start/end a query with it.)');if(null===t){const t=n.field.canonicalString();throw new Or(Rr.INVALID_ARGUMENT,`Invalid query. You are trying to start or end a query using a document for which the field '${t}' (used as the orderBy) does not exist.`)}i.push(t)}return new Qs(i,s)}(t._query,t.firestore._databaseId,e,n[0]._document,r);{const s=Ad(t.firestore);return function(t,e,n,r,s,i){const o=t.explicitOrderBy;if(s.length>o.length)throw new Or(Rr.INVALID_ARGUMENT,`Too many arguments provided to ${r}(). The number of arguments must be less than or equal to the number of orderBy() clauses`);const a=[];for(let i=0;i<s.length;i++){const c=s[i];if(o[i].field.isKeyField()){if("string"!=typeof c)throw new Or(Rr.INVALID_ARGUMENT,`Invalid query. Expected a string for document ID in ${r}(), but got a ${typeof c}`);if(!ai(t)&&-1!==c.indexOf("/"))throw new Or(Rr.INVALID_ARGUMENT,`Invalid query. When querying a collection and ordering by FieldPath.documentId(), the value passed to ${r}() must be a plain document ID, but '${c}' contains a slash.`);const n=t.path.child(ts.fromString(c));if(!gs.isDocumentKey(n))throw new Or(Rr.INVALID_ARGUMENT,`Invalid query. When querying a collection group and ordering by FieldPath.documentId(), the value passed to ${r}() must result in a valid document path, but '${n}' is not because it contains an odd number of segments.`);const s=new gs(n);a.push(Ss(e,s))}else{const t=Fd(n,r,c);a.push(t)}}return new Qs(a,i)}(t._query,t.firestore._databaseId,s,e,n,r)}}function bf(t,e,n){if("string"==typeof(n=(0,o.m9)(n))){if(""===n)throw new Or(Rr.INVALID_ARGUMENT,"Invalid query. When querying with FieldPath.documentId(), you must provide a valid document ID, but it was an empty string.");if(!ai(e)&&-1!==n.indexOf("/"))throw new Or(Rr.INVALID_ARGUMENT,`Invalid query. When querying a collection by FieldPath.documentId(), you must provide a plain document ID, but '${n}' contains a '/' character.`);const r=e.path.child(ts.fromString(n));if(!gs.isDocumentKey(r))throw new Or(Rr.INVALID_ARGUMENT,`Invalid query. When querying a collection group by FieldPath.documentId(), the value provided must result in a valid document path, but '${r}' is not because it has an odd number of segments (${r.length}).`);return Ss(t,new gs(r))}if(n instanceof jl)return Ss(t,n._key);throw new Or(Rr.INVALID_ARGUMENT,`Invalid query. When querying with FieldPath.documentId(), you must provide a valid string or a DocumentReference, but it was: ${Pl(n)}.`)}function If(t,e){if(!Array.isArray(t)||0===t.length)throw new Or(Rr.INVALID_ARGUMENT,`Invalid Query. A non-empty array is required for '${e.toString()}' filters.`);if(t.length>10)throw new Or(Rr.INVALID_ARGUMENT,`Invalid Query. '${e.toString()}' filters support a maximum of 10 elements in the value array.`)}function Ef(t,e,n){if(!n.isEqual(e))throw new Or(Rr.INVALID_ARGUMENT,`Invalid query. You have a where filter with an inequality (<, <=, !=, not-in, >, or >=) on field '${e.toString()}' and so you must also use '${e.toString()}' as your first argument to orderBy(), but your first orderBy() is on field '${n.toString()}' instead.`)}class Tf{convertValue(t,e="none"){switch(ys(t)){case 0:return null;case 1:return t.booleanValue;case 2:return cs(t.integerValue||t.doubleValue);case 3:return this.convertTimestamp(t.timestampValue);case 4:return this.convertServerTimestamp(t,e);case 5:return t.stringValue;case 6:return this.convertBytes(us(t.bytesValue));case 7:return this.convertReference(t.referenceValue);case 8:return this.convertGeoPoint(t.geoPointValue);case 9:return this.convertArray(t.arrayValue,e);case 10:return this.convertObject(t.mapValue,e);default:throw Cr()}}convertObject(t,e){const n={};return Jr(t.fields,((t,r)=>{n[t]=this.convertValue(r,e)})),n}convertGeoPoint(t){return new bd(cs(t.latitude),cs(t.longitude))}convertArray(t,e){return(t.values||[]).map((t=>this.convertValue(t,e)))}convertServerTimestamp(t,e){switch(e){case"previous":const n=ls(t);return null==n?null:this.convertValue(n,e);case"estimate":return this.convertTimestamp(ds(t));default:return null}}convertTimestamp(t){const e=as(t);return new Qr(e.seconds,e.nanos)}convertDocumentKey(t,e){const n=ts.fromString(t);kr(ra(n));const r=new kl(n.get(1),n.get(3)),s=new gs(n.popFirst(5));return r.isEqual(e)||Nr(`Document ${s} contains a document reference within a different database (${r.projectId}/${r.database}) which is not supported. It will be treated as a reference in the current database (${e.projectId}/${e.database}) instead.`),s}}function Sf(t,e,n){let r;return r=t?n&&(n.merge||n.mergeFields)?t.toFirestore(e,n):t.toFirestore(e):e,r}class _f extends Tf{constructor(t){super(),this.firestore=t}convertBytes(t){return new vd(t)}convertReference(t){const e=this.convertDocumentKey(t,this.firestore._databaseId);return new jl(this.firestore,null,e)}}class Nf{constructor(t,e){this._firestore=t,this._commitHandler=e,this._mutations=[],this._committed=!1,this._dataReader=Ad(t)}set(t,e,n){this._verifyNotCommitted();const r=Af(t,this._firestore),s=Sf(r.converter,e,n),i=Dd(this._dataReader,"WriteBatch.set",r._key,s,null!==r.converter,n);return this._mutations.push(i.toMutation(r._key,Oi.none())),this}update(t,e,n,...r){this._verifyNotCommitted();const s=Af(t,this._firestore);let i;return i="string"==typeof(e=(0,o.m9)(e))||e instanceof gd?Pd(this._dataReader,"WriteBatch.update",s._key,e,n,r):Md(this._dataReader,"WriteBatch.update",s._key,e),this._mutations.push(i.toMutation(s._key,Oi.exists(!0))),this}delete(t){this._verifyNotCommitted();const e=Af(t,this._firestore);return this._mutations=this._mutations.concat(new Hi(e._key,Oi.none())),this}commit(){return this._verifyNotCommitted(),this._committed=!0,this._mutations.length>0?this._commitHandler(this._mutations):Promise.resolve()}_verifyNotCommitted(){if(this._committed)throw new Or(Rr.FAILED_PRECONDITION,"A write batch can no longer be used after commit() has been called.")}}function Af(t,e){if((t=(0,o.m9)(t)).firestore!==e)throw new Or(Rr.INVALID_ARGUMENT,"Provided document reference is from a different Firestore instance.");return t}function Df(t){t=Fl(t,jl);const e=Fl(t.firestore,td);return Al(rd(e),t._key).then((n=>jf(e,t,n)))}class Cf extends Tf{constructor(t){super(),this.firestore=t}convertBytes(t){return new vd(t)}convertReference(t){const e=this.convertDocumentKey(t,this.firestore._databaseId);return new jl(this.firestore,null,e)}}function kf(t){t=Fl(t,jl);const e=Fl(t.firestore,td),n=rd(e),r=new Cf(e);return function(t,e){const n=new Mr;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){try{const r=await function(t,e){const n=Lr(t);return n.persistence.runTransaction("read document","readonly",(t=>n.Qn.An(t,e)))}(t,e);r.isFoundDocument()?n.resolve(r):r.isNoDocument()?n.resolve(null):n.reject(new Or(Rr.UNAVAILABLE,"Failed to get document from cache. (However, this document may exist on the server. Run again without setting 'source' in the GetOptions to attempt to retrieve the document from the server.)"))}catch(t){const r=dh(t,`Failed to get document '${e} from cache`);n.reject(r)}}(await Tl(t),e,n))),n.promise}(n,t._key).then((n=>new Jd(e,r,t._key,n,new Yd(null!==n&&n.hasLocalMutations,!0),t.converter)))}function xf(t){t=Fl(t,jl);const e=Fl(t.firestore,td);return Al(rd(e),t._key,{source:"server"}).then((n=>jf(e,t,n)))}function Lf(t){t=Fl(t,Kl);const e=Fl(t.firestore,td),n=rd(e),r=new Cf(e);return nf(t._query),Dl(n,t._query).then((n=>new Zd(e,r,t,n)))}function Rf(t){t=Fl(t,Kl);const e=Fl(t.firestore,td),n=rd(e),r=new Cf(e);return function(t,e){const n=new Mr;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){try{const r=await Zc(t,e,!0),s=new kh(e,r.Gn),i=s.Io(r.documents),o=s.applyChanges(i,!1);n.resolve(o.snapshot)}catch(t){const r=dh(t,`Failed to execute query '${e} against cache`);n.reject(r)}}(await Tl(t),e,n))),n.promise}(n,t._query).then((n=>new Zd(e,r,t,n)))}function Of(t){t=Fl(t,Kl);const e=Fl(t.firestore,td),n=rd(e),r=new Cf(e);return Dl(n,t._query,{source:"server"}).then((n=>new Zd(e,r,t,n)))}function Mf(t,e,n){t=Fl(t,jl);const r=Fl(t.firestore,td),s=Sf(t.converter,e,n);return Bf(r,[Dd(Ad(r),"setDoc",t._key,s,null!==t.converter,n).toMutation(t._key,Oi.none())])}function Pf(t,e,n,...r){t=Fl(t,jl);const s=Fl(t.firestore,td),i=Ad(s);let a;return a="string"==typeof(e=(0,o.m9)(e))||e instanceof gd?Pd(i,"updateDoc",t._key,e,n,r):Md(i,"updateDoc",t._key,e),Bf(s,[a.toMutation(t._key,Oi.exists(!0))])}function Ff(t){return Bf(Fl(t.firestore,td),[new Hi(t._key,Oi.none())])}function Vf(t,e){const n=Fl(t.firestore,td),r=Hl(t),s=Sf(t.converter,e);return Bf(n,[Dd(Ad(t.firestore),"addDoc",r._key,s,null!==t.converter,{}).toMutation(r._key,Oi.exists(!1))]).then((()=>r))}function Uf(t,...e){var n,r,s;t=(0,o.m9)(t);let i={includeMetadataChanges:!1},a=0;"object"!=typeof e[a]||Jl(e[a])||(i=e[a],a++);const c={includeMetadataChanges:i.includeMetadataChanges};if(Jl(e[a])){const t=e[a];e[a]=null===(n=t.next)||void 0===n?void 0:n.bind(t),e[a+1]=null===(r=t.error)||void 0===r?void 0:r.bind(t),e[a+2]=null===(s=t.complete)||void 0===s?void 0:s.bind(t)}let u,h,l;if(t instanceof jl)h=Fl(t.firestore,td),l=ni(t._key.path),u={next:n=>{e[a]&&e[a](jf(h,t,n))},error:e[a+1],complete:e[a+2]};else{const n=Fl(t,Kl);h=Fl(n.firestore,td),l=n._query;const r=new Cf(h);u={next:t=>{e[a]&&e[a](new Zd(h,r,n,t))},error:e[a+1],complete:e[a+2]},nf(t._query)}return function(t,e,n,r){const s=new fl(r),i=new Th(e,s,n);return t.asyncQueue.enqueueAndForget((async()=>vh(await Nl(t),i))),()=>{s.Xo(),t.asyncQueue.enqueueAndForget((async()=>wh(await Nl(t),i)))}}(rd(h),l,c,u)}function qf(t,e){return function(t,e){const n=new fl(e);return t.asyncQueue.enqueueAndForget((async()=>function(t,e){Lr(t).Zr.add(e),e.next()}(await Nl(t),n))),()=>{n.Xo(),t.asyncQueue.enqueueAndForget((async()=>function(t,e){Lr(t).Zr.delete(e)}(await Nl(t),n)))}}(rd(t=Fl(t,td)),Jl(e)?e:{next:e})}function Bf(t,e){return function(t,e){const n=new Mr;return t.asyncQueue.enqueueAndForget((async()=>async function(t,e,n){const r=al(t);try{const t=await function(t,e){const n=Lr(t),r=Qr.now(),s=e.reduce(((t,e)=>t.add(e.key)),fo());let i;return n.persistence.runTransaction("Locally write mutations","readwrite",(t=>n.Qn.Pn(t,s).next((s=>{i=s;const o=[];for(const t of e){const e=Ui(t,i.get(t.key));null!=e&&o.push(new Ki(t.key,e,Ls(e.value.mapValue),Oi.exists(!0)))}return n.In.addMutationBatch(t,r,o,e)})))).then((t=>(t.applyToLocalDocumentSet(i),{batchId:t.batchId,changes:i})))}(r.localStore,e);r.sharedClientState.addPendingMutation(t.batchId),function(t,e,n){let r=t.Lo[t.currentUser.toKey()];r||(r=new to($r)),r=r.insert(e,n),t.Lo[t.currentUser.toKey()]=r}(r,t.batchId,n),await Wh(r,t.changes),await Zu(r.remoteStore)}catch(t){const e=dh(t,"Failed to persist write");n.reject(e)}}(await _l(t),e,n))),n.promise}(rd(t),e)}function jf(t,e,n){const r=n.docs.get(e._key),s=new Cf(t);return new Jd(t,s,e._key,r,new Yd(n.hasPendingWrites,n.fromCache),e.converter)}class Kf extends class{constructor(t,e){this._firestore=t,this._transaction=e,this._dataReader=Ad(t)}get(t){const e=Af(t,this._firestore),n=new _f(this._firestore);return this._transaction.lookup([e._key]).then((t=>{if(!t||1!==t.length)return Cr();const r=t[0];if(r.isFoundDocument())return new Hd(this._firestore,n,r.key,r,e.converter);if(r.isNoDocument())return new Hd(this._firestore,n,e._key,null,e.converter);throw Cr()}))}set(t,e,n){const r=Af(t,this._firestore),s=Sf(r.converter,e,n),i=Dd(this._dataReader,"Transaction.set",r._key,s,null!==r.converter,n);return this._transaction.set(r._key,i),this}update(t,e,n,...r){const s=Af(t,this._firestore);let i;return i="string"==typeof(e=(0,o.m9)(e))||e instanceof gd?Pd(this._dataReader,"Transaction.update",s._key,e,n,r):Md(this._dataReader,"Transaction.update",s._key,e),this._transaction.update(s._key,i),this}delete(t){const e=Af(t,this._firestore);return this._transaction.delete(e._key),this}}{constructor(t,e){super(t,e),this._firestore=t}get(t){const e=Af(t,this._firestore),n=new Cf(this._firestore);return super.get(t).then((t=>new Jd(this._firestore,n,e._key,t._document,new Yd(!1,!1),e.converter)))}}function zf(t,e){return function(t,e){const n=new Mr;return t.asyncQueue.enqueueAndForget((async()=>{const r=await function(t){return Il(t).then((t=>t.datastore))}(t);new gl(t.asyncQueue,r,e,n).run()})),n.promise}(rd(t),(n=>e(new Kf(t,n))))}function $f(){return new Cd("deleteField")}function Gf(){return new xd("serverTimestamp")}function Hf(...t){return new Ld("arrayUnion",t)}function Qf(...t){return new Rd("arrayRemove",t)}function Wf(t){return new Od("increment",t)}function Yf(t){return rd(t=Fl(t,td)),new Nf(t,(e=>Bf(t,e)))}!function(t){Ir=t}(r.Jn),(0,r.Xd)(new s.wA("firestore",((t,{options:e})=>{const n=t.getProvider("app").getImmediate(),r=new td(n,new Ur(t.getProvider("auth-internal")));return e=Object.assign({useFetchStreams:!0},e),r._setSettings(e),r}),"PUBLIC")),(0,r.KN)("@firebase/firestore","3.0.2",void 0)},327:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(s,i){function o(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}c((r=r.apply(t,e||[])).next())}))},s=this&&this.__generator||function(t,e){var n,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&i[0]?r.return:i[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,i[1])).done)return s;switch(r=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){o.label=i[1];break}if(6===i[0]&&o.label<s[1]){o.label=s[1],s=i;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(i);break}s[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}},i=this&&this.__asyncValues||function(t){if(!Symbol.asyncIterator)throw new TypeError("Symbol.asyncIterator is not defined.");var e,n=t[Symbol.asyncIterator];return n?n.call(t):(t="function"==typeof __values?__values(t):t[Symbol.iterator](),e={},r("next"),r("throw"),r("return"),e[Symbol.asyncIterator]=function(){return this},e);function r(n){e[n]=t[n]&&function(e){return new Promise((function(r,s){!function(t,e,n,r){Promise.resolve(r).then((function(e){t({value:e,done:n})}),e)}(r,s,(e=t[n](e)).done,e.value)}))}}};Object.defineProperty(e,"__esModule",{value:!0}),e.AppFireStoreStorage=void 0;var o=n(503),a=n(956),c=n(956),u=n(518),h=function(){function t(){this.firebaseConfig={apiKey:"AIzaSyC21XhRttz95nbr-vOikJxVhlzOcB4rPTY",authDomain:"notekeep-a35d2.firebaseapp.com",projectId:"notekeep-a35d2",storageBucket:"notekeep-a35d2.appspot.com",messagingSenderId:"12311041099",appId:"1:12311041099:web:6c24f6e9e1e4c4bd4ce9ce",measurementId:"G-J8NLNTKFQ2"},this.notatki="Notatki",(0,o.initializeApp)(this.firebaseConfig),this.db=(0,a.getFirestore)()}return t.prototype.saveNotes=function(t){var e,n,o,a;return r(this,void 0,void 0,(function(){var r,u,h,l;return s(this,(function(s){switch(s.label){case 0:console.log("test"),s.label=1;case 1:s.trys.push([1,15,,16]),s.label=2;case 2:s.trys.push([2,8,9,14]),e=i(t),s.label=3;case 3:return[4,e.next()];case 4:return(n=s.sent()).done?[3,7]:(r=n.value,[4,(0,c.addDoc)((0,c.collection)(this.db,this.notatki),{id:r.id,title:r.title,textContent:r.textContent,color:r.color,isPinned:r.isPinned,date:r.date})]);case 5:u=s.sent(),console.log("Document written with ID: ",u.id),s.label=6;case 6:return[3,3];case 7:return[3,14];case 8:return h=s.sent(),o={error:h},[3,14];case 9:return s.trys.push([9,,12,13]),n&&!n.done&&(a=e.return)?[4,a.call(e)]:[3,11];case 10:s.sent(),s.label=11;case 11:return[3,13];case 12:if(o)throw o.error;return[7];case 13:return[7];case 14:return[3,16];case 15:return l=s.sent(),console.error("Error adding document: ",l),[3,16];case 16:return[2]}}))}))},t.prototype.getNotes=function(){return r(this,void 0,void 0,(function(){var t,e;return s(this,(function(n){switch(n.label){case 0:return[4,(0,a.getDocs)((0,c.collection)(this.db,this.notatki))];case 1:return t=n.sent(),e=[],t.forEach((function(t){console.log(),e.push(new u.Note(t.id,t.data().title,t.data().textContent,t.data().color,t.data().isPinned))})),[2,e]}}))}))},t.prototype.removeNote=function(t){return r(this,void 0,void 0,(function(){return s(this,(function(e){switch(e.label){case 0:return[4,(0,a.deleteDoc)((0,a.doc)(this.db,this.notatki,t)).then((function(t){console.log(t)}))];case 1:return e.sent(),[2]}}))}))},t.prototype.add=function(t){return r(this,void 0,void 0,(function(){var e,n;return s(this,(function(r){switch(r.label){case 0:return r.trys.push([0,2,,3]),[4,(0,c.addDoc)((0,c.collection)(this.db,this.notatki),{id:t.id,title:t.title,textContent:t.textContent,color:t.color,isPinned:t.isPinned,date:t.date})];case 1:return e=r.sent(),console.log("Document written with ID: ",e.id),[3,3];case 2:return n=r.sent(),console.error(n),[3,3];case 3:return[2]}}))}))},t.prototype.update=function(t,e){return r(this,void 0,void 0,(function(){var n;return s(this,(function(r){switch(r.label){case 0:return console.log(t),n=(0,a.doc)(this.db,this.notatki,t),[4,(0,a.updateDoc)(n,{id:e.id,title:e.title,textContent:e.textContent,color:e.color,isPinned:e.isPinned,date:e.date})];case 1:return r.sent(),[2]}}))}))},t}();e.AppFireStoreStorage=h},171:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.AppStorage=void 0;var n=function(){function t(){}return t.prototype.saveNotes=function(t){t.forEach((function(t){localStorage.setItem("Notatka"+t.id,JSON.stringify(t))}))},t.prototype.getNotes=function(){return new Promise((function(t,e){t(Object.keys(localStorage).filter((function(t){return t.startsWith("Notatka")})).map((function(t){return JSON.parse(localStorage[t])})))}))},t.prototype.removeNote=function(t){localStorage.removeItem("Notatka"+t)},t.prototype.add=function(){},t.prototype.update=function(t,e){console.log("Notatka"+t),console.log(e),localStorage.setItem("Notatka"+t,JSON.stringify(e))},t}();e.AppStorage=n},518:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.Note=void 0;e.Note=function(t,e,n,r,s){this.id=t,this.title=e,this.textContent=n,this.color=r,this.isPinned=s,this.date=new Date}},911:function(t,e,n){var r=this&&this.__awaiter||function(t,e,n,r){return new(n||(n=Promise))((function(s,i){function o(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}c((r=r.apply(t,e||[])).next())}))},s=this&&this.__generator||function(t,e){var n,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&i[0]?r.return:i[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,i[1])).done)return s;switch(r=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){o.label=i[1];break}if(6===i[0]&&o.label<s[1]){o.label=s[1],s=i;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(i);break}s[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(e,"__esModule",{value:!0}),e.Notes=void 0;var i=n(327),o=n(171),a=n(913),c=n(518),u=function(){function t(t){this.notatki=[],this.ui=t,new c.Note("1","Tytuł","textContent","#ffffff",!0),new c.Note("2","Tytuł","textContent","#ffffff",!1),console.log(a.locationOfSaving),"firestore"===a.locationOfSaving?this.storage=new i.AppFireStoreStorage:this.storage=new o.AppStorage,this.getNotes()}return t.prototype.getNotes=function(){return r(this,void 0,void 0,(function(){var t=this;return s(this,(function(e){switch(e.label){case 0:return[4,this.storage.getNotes().then((function(e){e.forEach((function(e){return t.notatki.push(e)})),console.log(t.notatki),t.ui.renderNotes(e)}))];case 1:return e.sent(),this.removeButtonsEvent(),this.createNote(),this.updateNote(),[2]}}))}))},t.prototype.deleteNotes=function(t){return r(this,void 0,void 0,(function(){return s(this,(function(e){return this.notatki=this.notatki.filter((function(e){return e.id!==t})),console.log(this.notatki),this.storage.removeNote(t),[2]}))}))},t.prototype.add=function(t){return r(this,void 0,void 0,(function(){return s(this,(function(e){return this.storage.add(t),[2]}))}))},t.prototype.update=function(t){return r(this,void 0,void 0,(function(){var e,n;return s(this,(function(r){return"local"===a.locationOfSaving?(e=this.notatki.find((function(e){return e.id===t})).id,this.notatki[+e].isPinned=!this.notatki[+e].isPinned,this.storage.update(t,this.notatki[+e])):(n=this.notatki.find((function(e){return e.id.toString()==t})),console.log(n),n.isPinned=!n.isPinned,console.log(n),this.storage.update(t,n)),[2]}))}))},t.prototype.createNote=function(){var t=this;document.getElementById("accept").addEventListener("click",(function(){var e=document.getElementById("title"),n=document.getElementById("content"),r=document.getElementById("color"),s=new c.Note(t.notatki.length.toString(),e.value,n.value,r.value,!1);t.notatki.push(s),t.ui.renderNotes(t.notatki),t.storage.add(s),t.removeButtonsEvent(),t.updateNote()}))},t.prototype.updateNote=function(){var t=this;document.querySelectorAll(".repin-button").forEach((function(e){e.addEventListener("click",(function(){var n=document.getElementById(e.parentElement.id);if("unpin"==n.className){var r=document.getElementById("pinned");n.className="pin",r.insertBefore(n,null)}else{var s=document.getElementById("unpinned");n.className="unpin",s.insertBefore(n,null)}t.update(e.parentElement.id)}))}))},t.prototype.removeButtonsEvent=function(){var t=this;document.querySelectorAll(".remove-button").forEach((function(e){e.addEventListener("click",(function(){document.getElementById(e.parentElement.id).remove(),t.deleteNotes(e.parentElement.id)}))}))},t}();e.Notes=u},913:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.locationOfSaving=void 0,e.locationOfSaving="firestore"},380:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.userInterface=void 0;var n=function(){function t(){}return t.prototype.renderNotes=function(t){document.getElementById("pinned").innerHTML="",document.getElementById("unpinned").innerHTML="",t.forEach((function(t){var e=document.getElementById(t.isPinned?"pinned":"unpinned"),n=document.createElement("div"),r=document.createElement("h1"),s=document.createElement("p"),i=document.createElement("button"),o=document.createElement("button");n.id=t.id,n.className=t.isPinned?"pin":"unpin",n.style.margin="1em",n.style.backgroundColor=t.color,n.style.height="10em",n.style.width="20em",n.style.borderRadius="10%",n.style.display="flex",n.style.flexDirection="column",n.style.alignItems="center",r.textContent=t.title,n.appendChild(r),s.textContent=t.textContent,s.style.margin="0",n.appendChild(s),i.className="remove-button",i.textContent="remove",o.className="repin-button",o.textContent="repin",n.appendChild(i),n.appendChild(o),e.appendChild(n)}))},t}();e.userInterface=n},655:(t,e,n)=>{n.d(e,{ZT:()=>s,pi:()=>i,mG:()=>o,Jh:()=>a,XA:()=>c,CR:()=>u,ev:()=>h});var r=function(t,e){return r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])},r(t,e)};function s(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}r(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var i=function(){return i=Object.assign||function(t){for(var e,n=1,r=arguments.length;n<r;n++)for(var s in e=arguments[n])Object.prototype.hasOwnProperty.call(e,s)&&(t[s]=e[s]);return t},i.apply(this,arguments)};function o(t,e,n,r){return new(n||(n=Promise))((function(s,i){function o(t){try{c(r.next(t))}catch(t){i(t)}}function a(t){try{c(r.throw(t))}catch(t){i(t)}}function c(t){var e;t.done?s(t.value):(e=t.value,e instanceof n?e:new n((function(t){t(e)}))).then(o,a)}c((r=r.apply(t,e||[])).next())}))}function a(t,e){var n,r,s,i,o={label:0,sent:function(){if(1&s[0])throw s[1];return s[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;o;)try{if(n=1,r&&(s=2&i[0]?r.return:i[0]?r.throw||((s=r.return)&&s.call(r),0):r.next)&&!(s=s.call(r,i[1])).done)return s;switch(r=0,s&&(i=[2&i[0],s.value]),i[0]){case 0:case 1:s=i;break;case 4:return o.label++,{value:i[1],done:!1};case 5:o.label++,r=i[1],i=[0];continue;case 7:i=o.ops.pop(),o.trys.pop();continue;default:if(!((s=(s=o.trys).length>0&&s[s.length-1])||6!==i[0]&&2!==i[0])){o=0;continue}if(3===i[0]&&(!s||i[1]>s[0]&&i[1]<s[3])){o.label=i[1];break}if(6===i[0]&&o.label<s[1]){o.label=s[1],s=i;break}if(s&&o.label<s[2]){o.label=s[2],o.ops.push(i);break}s[2]&&o.ops.pop(),o.trys.pop();continue}i=e.call(t,o)}catch(t){i=[6,t],r=0}finally{n=s=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}}function c(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],r=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function u(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var r,s,i=n.call(t),o=[];try{for(;(void 0===e||e-- >0)&&!(r=i.next()).done;)o.push(r.value)}catch(t){s={error:t}}finally{try{r&&!r.done&&(n=i.return)&&n.call(i)}finally{if(s)throw s.error}}return o}function h(t,e,n){if(n||2===arguments.length)for(var r,s=0,i=e.length;s<i;s++)!r&&s in e||(r||(r=Array.prototype.slice.call(e,0,s)),r[s]=e[s]);return t.concat(r||Array.prototype.slice.call(e))}Object.create,Object.create}},r={};function s(t){var e=r[t];if(void 0!==e)return e.exports;var i=r[t]={exports:{}};return n[t].call(i.exports,i,i.exports,s),i.exports}s.d=(t,e)=>{for(var n in e)s.o(e,n)&&!s.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},s.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),s.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),s.r=t=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},t=s(911),e=s(380),new function(){this.ui=new e.userInterface,this.notes=new t.Notes(this.ui)}})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
